
PIF_POWER_READER.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008a30  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000215c  08008b40  08008b40  00018b40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac9c  0800ac9c  000201f4  2**0
                  CONTENTS
  4 .ARM          00000000  0800ac9c  0800ac9c  000201f4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ac9c  0800ac9c  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ac9c  0800ac9c  0001ac9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800aca0  0800aca0  0001aca0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800aca4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000694  200001f4  0800ae98  000201f4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000888  0800ae98  00020888  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002021d  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012728  00000000  00000000  00020260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b4c  00000000  00000000  00032988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001260  00000000  00000000  000354d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e6d  00000000  00000000  00036738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019d0e  00000000  00000000  000375a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001525d  00000000  00000000  000512b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094a37  00000000  00000000  00066510  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005f88  00000000  00000000  000faf48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000069  00000000  00000000  00100ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f4 	.word	0x200001f4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008b28 	.word	0x08008b28

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f8 	.word	0x200001f8
 800014c:	08008b28 	.word	0x08008b28

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_frsub>:
 8000a88:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000a8c:	e002      	b.n	8000a94 <__addsf3>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_fsub>:
 8000a90:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000a94 <__addsf3>:
 8000a94:	0042      	lsls	r2, r0, #1
 8000a96:	bf1f      	itttt	ne
 8000a98:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000a9c:	ea92 0f03 	teqne	r2, r3
 8000aa0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000aa4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000aa8:	d06a      	beq.n	8000b80 <__addsf3+0xec>
 8000aaa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aae:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ab2:	bfc1      	itttt	gt
 8000ab4:	18d2      	addgt	r2, r2, r3
 8000ab6:	4041      	eorgt	r1, r0
 8000ab8:	4048      	eorgt	r0, r1
 8000aba:	4041      	eorgt	r1, r0
 8000abc:	bfb8      	it	lt
 8000abe:	425b      	neglt	r3, r3
 8000ac0:	2b19      	cmp	r3, #25
 8000ac2:	bf88      	it	hi
 8000ac4:	4770      	bxhi	lr
 8000ac6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000aca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ace:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000ad2:	bf18      	it	ne
 8000ad4:	4240      	negne	r0, r0
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ade:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000ae2:	bf18      	it	ne
 8000ae4:	4249      	negne	r1, r1
 8000ae6:	ea92 0f03 	teq	r2, r3
 8000aea:	d03f      	beq.n	8000b6c <__addsf3+0xd8>
 8000aec:	f1a2 0201 	sub.w	r2, r2, #1
 8000af0:	fa41 fc03 	asr.w	ip, r1, r3
 8000af4:	eb10 000c 	adds.w	r0, r0, ip
 8000af8:	f1c3 0320 	rsb	r3, r3, #32
 8000afc:	fa01 f103 	lsl.w	r1, r1, r3
 8000b00:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b04:	d502      	bpl.n	8000b0c <__addsf3+0x78>
 8000b06:	4249      	negs	r1, r1
 8000b08:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b0c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b10:	d313      	bcc.n	8000b3a <__addsf3+0xa6>
 8000b12:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b16:	d306      	bcc.n	8000b26 <__addsf3+0x92>
 8000b18:	0840      	lsrs	r0, r0, #1
 8000b1a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b1e:	f102 0201 	add.w	r2, r2, #1
 8000b22:	2afe      	cmp	r2, #254	; 0xfe
 8000b24:	d251      	bcs.n	8000bca <__addsf3+0x136>
 8000b26:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b2a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b2e:	bf08      	it	eq
 8000b30:	f020 0001 	biceq.w	r0, r0, #1
 8000b34:	ea40 0003 	orr.w	r0, r0, r3
 8000b38:	4770      	bx	lr
 8000b3a:	0049      	lsls	r1, r1, #1
 8000b3c:	eb40 0000 	adc.w	r0, r0, r0
 8000b40:	3a01      	subs	r2, #1
 8000b42:	bf28      	it	cs
 8000b44:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b48:	d2ed      	bcs.n	8000b26 <__addsf3+0x92>
 8000b4a:	fab0 fc80 	clz	ip, r0
 8000b4e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b52:	ebb2 020c 	subs.w	r2, r2, ip
 8000b56:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b5a:	bfaa      	itet	ge
 8000b5c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b60:	4252      	neglt	r2, r2
 8000b62:	4318      	orrge	r0, r3
 8000b64:	bfbc      	itt	lt
 8000b66:	40d0      	lsrlt	r0, r2
 8000b68:	4318      	orrlt	r0, r3
 8000b6a:	4770      	bx	lr
 8000b6c:	f092 0f00 	teq	r2, #0
 8000b70:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000b74:	bf06      	itte	eq
 8000b76:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000b7a:	3201      	addeq	r2, #1
 8000b7c:	3b01      	subne	r3, #1
 8000b7e:	e7b5      	b.n	8000aec <__addsf3+0x58>
 8000b80:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b84:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b88:	bf18      	it	ne
 8000b8a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b8e:	d021      	beq.n	8000bd4 <__addsf3+0x140>
 8000b90:	ea92 0f03 	teq	r2, r3
 8000b94:	d004      	beq.n	8000ba0 <__addsf3+0x10c>
 8000b96:	f092 0f00 	teq	r2, #0
 8000b9a:	bf08      	it	eq
 8000b9c:	4608      	moveq	r0, r1
 8000b9e:	4770      	bx	lr
 8000ba0:	ea90 0f01 	teq	r0, r1
 8000ba4:	bf1c      	itt	ne
 8000ba6:	2000      	movne	r0, #0
 8000ba8:	4770      	bxne	lr
 8000baa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bae:	d104      	bne.n	8000bba <__addsf3+0x126>
 8000bb0:	0040      	lsls	r0, r0, #1
 8000bb2:	bf28      	it	cs
 8000bb4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bb8:	4770      	bx	lr
 8000bba:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bbe:	bf3c      	itt	cc
 8000bc0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000bc4:	4770      	bxcc	lr
 8000bc6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bca:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000bce:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bd2:	4770      	bx	lr
 8000bd4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bd8:	bf16      	itet	ne
 8000bda:	4608      	movne	r0, r1
 8000bdc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000be0:	4601      	movne	r1, r0
 8000be2:	0242      	lsls	r2, r0, #9
 8000be4:	bf06      	itte	eq
 8000be6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bea:	ea90 0f01 	teqeq	r0, r1
 8000bee:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000bf2:	4770      	bx	lr

08000bf4 <__aeabi_ui2f>:
 8000bf4:	f04f 0300 	mov.w	r3, #0
 8000bf8:	e004      	b.n	8000c04 <__aeabi_i2f+0x8>
 8000bfa:	bf00      	nop

08000bfc <__aeabi_i2f>:
 8000bfc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c00:	bf48      	it	mi
 8000c02:	4240      	negmi	r0, r0
 8000c04:	ea5f 0c00 	movs.w	ip, r0
 8000c08:	bf08      	it	eq
 8000c0a:	4770      	bxeq	lr
 8000c0c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c10:	4601      	mov	r1, r0
 8000c12:	f04f 0000 	mov.w	r0, #0
 8000c16:	e01c      	b.n	8000c52 <__aeabi_l2f+0x2a>

08000c18 <__aeabi_ul2f>:
 8000c18:	ea50 0201 	orrs.w	r2, r0, r1
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f04f 0300 	mov.w	r3, #0
 8000c24:	e00a      	b.n	8000c3c <__aeabi_l2f+0x14>
 8000c26:	bf00      	nop

08000c28 <__aeabi_l2f>:
 8000c28:	ea50 0201 	orrs.w	r2, r0, r1
 8000c2c:	bf08      	it	eq
 8000c2e:	4770      	bxeq	lr
 8000c30:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c34:	d502      	bpl.n	8000c3c <__aeabi_l2f+0x14>
 8000c36:	4240      	negs	r0, r0
 8000c38:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c3c:	ea5f 0c01 	movs.w	ip, r1
 8000c40:	bf02      	ittt	eq
 8000c42:	4684      	moveq	ip, r0
 8000c44:	4601      	moveq	r1, r0
 8000c46:	2000      	moveq	r0, #0
 8000c48:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c4c:	bf08      	it	eq
 8000c4e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c52:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c56:	fabc f28c 	clz	r2, ip
 8000c5a:	3a08      	subs	r2, #8
 8000c5c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c60:	db10      	blt.n	8000c84 <__aeabi_l2f+0x5c>
 8000c62:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c66:	4463      	add	r3, ip
 8000c68:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c6c:	f1c2 0220 	rsb	r2, r2, #32
 8000c70:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000c74:	fa20 f202 	lsr.w	r2, r0, r2
 8000c78:	eb43 0002 	adc.w	r0, r3, r2
 8000c7c:	bf08      	it	eq
 8000c7e:	f020 0001 	biceq.w	r0, r0, #1
 8000c82:	4770      	bx	lr
 8000c84:	f102 0220 	add.w	r2, r2, #32
 8000c88:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c8c:	f1c2 0220 	rsb	r2, r2, #32
 8000c90:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000c94:	fa21 f202 	lsr.w	r2, r1, r2
 8000c98:	eb43 0002 	adc.w	r0, r3, r2
 8000c9c:	bf08      	it	eq
 8000c9e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ca2:	4770      	bx	lr

08000ca4 <__aeabi_fmul>:
 8000ca4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ca8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cac:	bf1e      	ittt	ne
 8000cae:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cb2:	ea92 0f0c 	teqne	r2, ip
 8000cb6:	ea93 0f0c 	teqne	r3, ip
 8000cba:	d06f      	beq.n	8000d9c <__aeabi_fmul+0xf8>
 8000cbc:	441a      	add	r2, r3
 8000cbe:	ea80 0c01 	eor.w	ip, r0, r1
 8000cc2:	0240      	lsls	r0, r0, #9
 8000cc4:	bf18      	it	ne
 8000cc6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000cca:	d01e      	beq.n	8000d0a <__aeabi_fmul+0x66>
 8000ccc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000cd0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000cd4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000cd8:	fba0 3101 	umull	r3, r1, r0, r1
 8000cdc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ce0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000ce4:	bf3e      	ittt	cc
 8000ce6:	0049      	lslcc	r1, r1, #1
 8000ce8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000cec:	005b      	lslcc	r3, r3, #1
 8000cee:	ea40 0001 	orr.w	r0, r0, r1
 8000cf2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000cf6:	2afd      	cmp	r2, #253	; 0xfd
 8000cf8:	d81d      	bhi.n	8000d36 <__aeabi_fmul+0x92>
 8000cfa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cfe:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d02:	bf08      	it	eq
 8000d04:	f020 0001 	biceq.w	r0, r0, #1
 8000d08:	4770      	bx	lr
 8000d0a:	f090 0f00 	teq	r0, #0
 8000d0e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d12:	bf08      	it	eq
 8000d14:	0249      	lsleq	r1, r1, #9
 8000d16:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d1a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d1e:	3a7f      	subs	r2, #127	; 0x7f
 8000d20:	bfc2      	ittt	gt
 8000d22:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d26:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d2a:	4770      	bxgt	lr
 8000d2c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	3a01      	subs	r2, #1
 8000d36:	dc5d      	bgt.n	8000df4 <__aeabi_fmul+0x150>
 8000d38:	f112 0f19 	cmn.w	r2, #25
 8000d3c:	bfdc      	itt	le
 8000d3e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d42:	4770      	bxle	lr
 8000d44:	f1c2 0200 	rsb	r2, r2, #0
 8000d48:	0041      	lsls	r1, r0, #1
 8000d4a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d4e:	f1c2 0220 	rsb	r2, r2, #32
 8000d52:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d56:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d5a:	f140 0000 	adc.w	r0, r0, #0
 8000d5e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000d62:	bf08      	it	eq
 8000d64:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d68:	4770      	bx	lr
 8000d6a:	f092 0f00 	teq	r2, #0
 8000d6e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000d72:	bf02      	ittt	eq
 8000d74:	0040      	lsleq	r0, r0, #1
 8000d76:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000d7a:	3a01      	subeq	r2, #1
 8000d7c:	d0f9      	beq.n	8000d72 <__aeabi_fmul+0xce>
 8000d7e:	ea40 000c 	orr.w	r0, r0, ip
 8000d82:	f093 0f00 	teq	r3, #0
 8000d86:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000d8a:	bf02      	ittt	eq
 8000d8c:	0049      	lsleq	r1, r1, #1
 8000d8e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000d92:	3b01      	subeq	r3, #1
 8000d94:	d0f9      	beq.n	8000d8a <__aeabi_fmul+0xe6>
 8000d96:	ea41 010c 	orr.w	r1, r1, ip
 8000d9a:	e78f      	b.n	8000cbc <__aeabi_fmul+0x18>
 8000d9c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000da0:	ea92 0f0c 	teq	r2, ip
 8000da4:	bf18      	it	ne
 8000da6:	ea93 0f0c 	teqne	r3, ip
 8000daa:	d00a      	beq.n	8000dc2 <__aeabi_fmul+0x11e>
 8000dac:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000db0:	bf18      	it	ne
 8000db2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000db6:	d1d8      	bne.n	8000d6a <__aeabi_fmul+0xc6>
 8000db8:	ea80 0001 	eor.w	r0, r0, r1
 8000dbc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000dc0:	4770      	bx	lr
 8000dc2:	f090 0f00 	teq	r0, #0
 8000dc6:	bf17      	itett	ne
 8000dc8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000dcc:	4608      	moveq	r0, r1
 8000dce:	f091 0f00 	teqne	r1, #0
 8000dd2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000dd6:	d014      	beq.n	8000e02 <__aeabi_fmul+0x15e>
 8000dd8:	ea92 0f0c 	teq	r2, ip
 8000ddc:	d101      	bne.n	8000de2 <__aeabi_fmul+0x13e>
 8000dde:	0242      	lsls	r2, r0, #9
 8000de0:	d10f      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000de2:	ea93 0f0c 	teq	r3, ip
 8000de6:	d103      	bne.n	8000df0 <__aeabi_fmul+0x14c>
 8000de8:	024b      	lsls	r3, r1, #9
 8000dea:	bf18      	it	ne
 8000dec:	4608      	movne	r0, r1
 8000dee:	d108      	bne.n	8000e02 <__aeabi_fmul+0x15e>
 8000df0:	ea80 0001 	eor.w	r0, r0, r1
 8000df4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000df8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000dfc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e00:	4770      	bx	lr
 8000e02:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e06:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_fdiv>:
 8000e0c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e10:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e14:	bf1e      	ittt	ne
 8000e16:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e1a:	ea92 0f0c 	teqne	r2, ip
 8000e1e:	ea93 0f0c 	teqne	r3, ip
 8000e22:	d069      	beq.n	8000ef8 <__aeabi_fdiv+0xec>
 8000e24:	eba2 0203 	sub.w	r2, r2, r3
 8000e28:	ea80 0c01 	eor.w	ip, r0, r1
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e32:	d037      	beq.n	8000ea4 <__aeabi_fdiv+0x98>
 8000e34:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e38:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e3c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e40:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e44:	428b      	cmp	r3, r1
 8000e46:	bf38      	it	cc
 8000e48:	005b      	lslcc	r3, r3, #1
 8000e4a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e4e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e52:	428b      	cmp	r3, r1
 8000e54:	bf24      	itt	cs
 8000e56:	1a5b      	subcs	r3, r3, r1
 8000e58:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e5c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000e60:	bf24      	itt	cs
 8000e62:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000e66:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000e6a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000e6e:	bf24      	itt	cs
 8000e70:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000e74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000e78:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000e7c:	bf24      	itt	cs
 8000e7e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000e82:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000e86:	011b      	lsls	r3, r3, #4
 8000e88:	bf18      	it	ne
 8000e8a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000e8e:	d1e0      	bne.n	8000e52 <__aeabi_fdiv+0x46>
 8000e90:	2afd      	cmp	r2, #253	; 0xfd
 8000e92:	f63f af50 	bhi.w	8000d36 <__aeabi_fmul+0x92>
 8000e96:	428b      	cmp	r3, r1
 8000e98:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e9c:	bf08      	it	eq
 8000e9e:	f020 0001 	biceq.w	r0, r0, #1
 8000ea2:	4770      	bx	lr
 8000ea4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ea8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eac:	327f      	adds	r2, #127	; 0x7f
 8000eae:	bfc2      	ittt	gt
 8000eb0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000eb4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000eb8:	4770      	bxgt	lr
 8000eba:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ebe:	f04f 0300 	mov.w	r3, #0
 8000ec2:	3a01      	subs	r2, #1
 8000ec4:	e737      	b.n	8000d36 <__aeabi_fmul+0x92>
 8000ec6:	f092 0f00 	teq	r2, #0
 8000eca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000ece:	bf02      	ittt	eq
 8000ed0:	0040      	lsleq	r0, r0, #1
 8000ed2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000ed6:	3a01      	subeq	r2, #1
 8000ed8:	d0f9      	beq.n	8000ece <__aeabi_fdiv+0xc2>
 8000eda:	ea40 000c 	orr.w	r0, r0, ip
 8000ede:	f093 0f00 	teq	r3, #0
 8000ee2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ee6:	bf02      	ittt	eq
 8000ee8:	0049      	lsleq	r1, r1, #1
 8000eea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000eee:	3b01      	subeq	r3, #1
 8000ef0:	d0f9      	beq.n	8000ee6 <__aeabi_fdiv+0xda>
 8000ef2:	ea41 010c 	orr.w	r1, r1, ip
 8000ef6:	e795      	b.n	8000e24 <__aeabi_fdiv+0x18>
 8000ef8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000efc:	ea92 0f0c 	teq	r2, ip
 8000f00:	d108      	bne.n	8000f14 <__aeabi_fdiv+0x108>
 8000f02:	0242      	lsls	r2, r0, #9
 8000f04:	f47f af7d 	bne.w	8000e02 <__aeabi_fmul+0x15e>
 8000f08:	ea93 0f0c 	teq	r3, ip
 8000f0c:	f47f af70 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f10:	4608      	mov	r0, r1
 8000f12:	e776      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f14:	ea93 0f0c 	teq	r3, ip
 8000f18:	d104      	bne.n	8000f24 <__aeabi_fdiv+0x118>
 8000f1a:	024b      	lsls	r3, r1, #9
 8000f1c:	f43f af4c 	beq.w	8000db8 <__aeabi_fmul+0x114>
 8000f20:	4608      	mov	r0, r1
 8000f22:	e76e      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f24:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f28:	bf18      	it	ne
 8000f2a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f2e:	d1ca      	bne.n	8000ec6 <__aeabi_fdiv+0xba>
 8000f30:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f34:	f47f af5c 	bne.w	8000df0 <__aeabi_fmul+0x14c>
 8000f38:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f3c:	f47f af3c 	bne.w	8000db8 <__aeabi_fmul+0x114>
 8000f40:	e75f      	b.n	8000e02 <__aeabi_fmul+0x15e>
 8000f42:	bf00      	nop

08000f44 <My_Motor_Control>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* Control Motor using timer */
void My_Motor_Control(int32_t left_vel ,int32_t right_vel)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
	// Left motor control
	if(left_vel < 0)
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	da06      	bge.n	8000f62 <My_Motor_Control+0x1e>
	{
		TIM4->CCR1 = left_vel;
 8000f54:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <My_Motor_Control+0x54>)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6353      	str	r3, [r2, #52]	; 0x34
		TIM4->CCR2 = 0;
 8000f5a:	4b0f      	ldr	r3, [pc, #60]	; (8000f98 <My_Motor_Control+0x54>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	639a      	str	r2, [r3, #56]	; 0x38
 8000f60:	e005      	b.n	8000f6e <My_Motor_Control+0x2a>
	}
	else
	{
		TIM4->CCR1 = 0;
 8000f62:	4b0d      	ldr	r3, [pc, #52]	; (8000f98 <My_Motor_Control+0x54>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	635a      	str	r2, [r3, #52]	; 0x34
		TIM4->CCR2 = left_vel;
 8000f68:	4a0b      	ldr	r2, [pc, #44]	; (8000f98 <My_Motor_Control+0x54>)
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	6393      	str	r3, [r2, #56]	; 0x38
	}

	//Right motor control
	if(right_vel < 0)
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	da06      	bge.n	8000f82 <My_Motor_Control+0x3e>
	{
		TIM4->CCR4 = right_vel;
 8000f74:	4a08      	ldr	r2, [pc, #32]	; (8000f98 <My_Motor_Control+0x54>)
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	6413      	str	r3, [r2, #64]	; 0x40
		TIM4->CCR3 = 0;
 8000f7a:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <My_Motor_Control+0x54>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	63da      	str	r2, [r3, #60]	; 0x3c
	else
	{
		TIM4->CCR4 = 0;
		TIM4->CCR3 = right_vel;
	}
}
 8000f80:	e005      	b.n	8000f8e <My_Motor_Control+0x4a>
		TIM4->CCR4 = 0;
 8000f82:	4b05      	ldr	r3, [pc, #20]	; (8000f98 <My_Motor_Control+0x54>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	641a      	str	r2, [r3, #64]	; 0x40
		TIM4->CCR3 = right_vel;
 8000f88:	4a03      	ldr	r2, [pc, #12]	; (8000f98 <My_Motor_Control+0x54>)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 8000f8e:	bf00      	nop
 8000f90:	370c      	adds	r7, #12
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr
 8000f98:	40000800 	.word	0x40000800
 8000f9c:	00000000 	.word	0x00000000

08000fa0 <my_Low_Power_Alert>:



/* Oled part */
void my_Low_Power_Alert()
{
 8000fa0:	b5b0      	push	{r4, r5, r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
	  Percent_Battery =  (float)HAL_ADC_GetValue(&hadc1)*3.3*4 /( 4096*(Max_Bat_Voltage - D_Drop_Voltage) ) *100;
 8000fa4:	4830      	ldr	r0, [pc, #192]	; (8001068 <my_Low_Power_Alert+0xc8>)
 8000fa6:	f001 fc9f 	bl	80028e8 <HAL_ADC_GetValue>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fe21 	bl	8000bf4 <__aeabi_ui2f>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff fa37 	bl	8000428 <__aeabi_f2d>
 8000fba:	a329      	add	r3, pc, #164	; (adr r3, 8001060 <my_Low_Power_Alert+0xc0>)
 8000fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fc0:	f7ff fa8a 	bl	80004d8 <__aeabi_dmul>
 8000fc4:	4602      	mov	r2, r0
 8000fc6:	460b      	mov	r3, r1
 8000fc8:	4610      	mov	r0, r2
 8000fca:	4619      	mov	r1, r3
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b26      	ldr	r3, [pc, #152]	; (800106c <my_Low_Power_Alert+0xcc>)
 8000fd2:	f7ff fa81 	bl	80004d8 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4614      	mov	r4, r2
 8000fdc:	461d      	mov	r5, r3
 8000fde:	4b24      	ldr	r3, [pc, #144]	; (8001070 <my_Low_Power_Alert+0xd0>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a24      	ldr	r2, [pc, #144]	; (8001074 <my_Low_Power_Alert+0xd4>)
 8000fe4:	6812      	ldr	r2, [r2, #0]
 8000fe6:	4611      	mov	r1, r2
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f7ff fd51 	bl	8000a90 <__aeabi_fsub>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff fe55 	bl	8000ca4 <__aeabi_fmul>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f7ff fa13 	bl	8000428 <__aeabi_f2d>
 8001002:	4602      	mov	r2, r0
 8001004:	460b      	mov	r3, r1
 8001006:	4620      	mov	r0, r4
 8001008:	4629      	mov	r1, r5
 800100a:	f7ff fb8f 	bl	800072c <__aeabi_ddiv>
 800100e:	4602      	mov	r2, r0
 8001010:	460b      	mov	r3, r1
 8001012:	4610      	mov	r0, r2
 8001014:	4619      	mov	r1, r3
 8001016:	f04f 0200 	mov.w	r2, #0
 800101a:	4b17      	ldr	r3, [pc, #92]	; (8001078 <my_Low_Power_Alert+0xd8>)
 800101c:	f7ff fa5c 	bl	80004d8 <__aeabi_dmul>
 8001020:	4602      	mov	r2, r0
 8001022:	460b      	mov	r3, r1
 8001024:	4610      	mov	r0, r2
 8001026:	4619      	mov	r1, r3
 8001028:	f7ff fd06 	bl	8000a38 <__aeabi_d2iz>
 800102c:	4603      	mov	r3, r0
 800102e:	b21a      	sxth	r2, r3
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <my_Low_Power_Alert+0xdc>)
 8001032:	801a      	strh	r2, [r3, #0]
	 if(Percent_Battery < 25.0 )
 8001034:	4b11      	ldr	r3, [pc, #68]	; (800107c <my_Low_Power_Alert+0xdc>)
 8001036:	f9b3 3000 	ldrsh.w	r3, [r3]
 800103a:	2b18      	cmp	r3, #24
 800103c:	dc08      	bgt.n	8001050 <my_Low_Power_Alert+0xb0>
	 {
		 HAL_Delay(10);
 800103e:	200a      	movs	r0, #10
 8001040:	f001 faa0 	bl	8002584 <HAL_Delay>
	  	 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8001044:	2201      	movs	r2, #1
 8001046:	2102      	movs	r1, #2
 8001048:	480d      	ldr	r0, [pc, #52]	; (8001080 <my_Low_Power_Alert+0xe0>)
 800104a:	f002 fa18 	bl	800347e <HAL_GPIO_WritePin>

	 }else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
}
 800104e:	e004      	b.n	800105a <my_Low_Power_Alert+0xba>
	 }else HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8001050:	2200      	movs	r2, #0
 8001052:	2102      	movs	r1, #2
 8001054:	480a      	ldr	r0, [pc, #40]	; (8001080 <my_Low_Power_Alert+0xe0>)
 8001056:	f002 fa12 	bl	800347e <HAL_GPIO_WritePin>
}
 800105a:	bf00      	nop
 800105c:	bdb0      	pop	{r4, r5, r7, pc}
 800105e:	bf00      	nop
 8001060:	66666666 	.word	0x66666666
 8001064:	400a6666 	.word	0x400a6666
 8001068:	20000210 	.word	0x20000210
 800106c:	40100000 	.word	0x40100000
 8001070:	20000004 	.word	0x20000004
 8001074:	20000000 	.word	0x20000000
 8001078:	40590000 	.word	0x40590000
 800107c:	20000326 	.word	0x20000326
 8001080:	40010c00 	.word	0x40010c00

08001084 <Display_PID>:

void Display_PID(float Kp_val , float Ki_val , float Kd_val , uint16_t M_Speed_val )
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b08c      	sub	sp, #48	; 0x30
 8001088:	af00      	add	r7, sp, #0
 800108a:	60f8      	str	r0, [r7, #12]
 800108c:	60b9      	str	r1, [r7, #8]
 800108e:	607a      	str	r2, [r7, #4]
 8001090:	807b      	strh	r3, [r7, #2]
	  char Ki_Val_Str[6] ;
	  char Kd_Val_Str[6] ;
	  char M_Speed_Val_Str[6];

	  /* Display PID value */
	  sprintf(Kp_Val_Str , "%.3f" , Kp_val);
 8001092:	68f8      	ldr	r0, [r7, #12]
 8001094:	f7ff f9c8 	bl	8000428 <__aeabi_f2d>
 8001098:	4602      	mov	r2, r0
 800109a:	460b      	mov	r3, r1
 800109c:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010a0:	4932      	ldr	r1, [pc, #200]	; (800116c <Display_PID+0xe8>)
 80010a2:	f005 fbf5 	bl	8006890 <siprintf>
	  sprintf(Ki_Val_Str , "%.3f" , Ki_val);
 80010a6:	68b8      	ldr	r0, [r7, #8]
 80010a8:	f7ff f9be 	bl	8000428 <__aeabi_f2d>
 80010ac:	4602      	mov	r2, r0
 80010ae:	460b      	mov	r3, r1
 80010b0:	f107 0020 	add.w	r0, r7, #32
 80010b4:	492d      	ldr	r1, [pc, #180]	; (800116c <Display_PID+0xe8>)
 80010b6:	f005 fbeb 	bl	8006890 <siprintf>
	  sprintf(Kd_Val_Str , "%.3f" , Kd_val);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f7ff f9b4 	bl	8000428 <__aeabi_f2d>
 80010c0:	4602      	mov	r2, r0
 80010c2:	460b      	mov	r3, r1
 80010c4:	f107 0018 	add.w	r0, r7, #24
 80010c8:	4928      	ldr	r1, [pc, #160]	; (800116c <Display_PID+0xe8>)
 80010ca:	f005 fbe1 	bl	8006890 <siprintf>
	  sprintf(M_Speed_Val_Str , "%d" , M_Speed_val);
 80010ce:	887a      	ldrh	r2, [r7, #2]
 80010d0:	f107 0310 	add.w	r3, r7, #16
 80010d4:	4926      	ldr	r1, [pc, #152]	; (8001170 <Display_PID+0xec>)
 80010d6:	4618      	mov	r0, r3
 80010d8:	f005 fbda 	bl	8006890 <siprintf>

/* Display Kp */
	  ssd1306_SetCursor(75 , 20);
 80010dc:	2114      	movs	r1, #20
 80010de:	204b      	movs	r0, #75	; 0x4b
 80010e0:	f000 fe5a 	bl	8001d98 <ssd1306_SetCursor>
	  ssd1306_WriteString("P: ",Font_6x8,White);
 80010e4:	4a23      	ldr	r2, [pc, #140]	; (8001174 <Display_PID+0xf0>)
 80010e6:	2301      	movs	r3, #1
 80010e8:	ca06      	ldmia	r2, {r1, r2}
 80010ea:	4823      	ldr	r0, [pc, #140]	; (8001178 <Display_PID+0xf4>)
 80010ec:	f000 fe2e 	bl	8001d4c <ssd1306_WriteString>
	  ssd1306_WriteString(Kp_Val_Str,Font_6x8,White);
 80010f0:	4a20      	ldr	r2, [pc, #128]	; (8001174 <Display_PID+0xf0>)
 80010f2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80010f6:	2301      	movs	r3, #1
 80010f8:	ca06      	ldmia	r2, {r1, r2}
 80010fa:	f000 fe27 	bl	8001d4c <ssd1306_WriteString>

/* Display Ki */
	  ssd1306_SetCursor(75 , 30);
 80010fe:	211e      	movs	r1, #30
 8001100:	204b      	movs	r0, #75	; 0x4b
 8001102:	f000 fe49 	bl	8001d98 <ssd1306_SetCursor>
	  ssd1306_WriteString("I: ",Font_6x8,White);
 8001106:	4a1b      	ldr	r2, [pc, #108]	; (8001174 <Display_PID+0xf0>)
 8001108:	2301      	movs	r3, #1
 800110a:	ca06      	ldmia	r2, {r1, r2}
 800110c:	481b      	ldr	r0, [pc, #108]	; (800117c <Display_PID+0xf8>)
 800110e:	f000 fe1d 	bl	8001d4c <ssd1306_WriteString>
	  ssd1306_WriteString(Ki_Val_Str,Font_6x8,White);
 8001112:	4a18      	ldr	r2, [pc, #96]	; (8001174 <Display_PID+0xf0>)
 8001114:	f107 0020 	add.w	r0, r7, #32
 8001118:	2301      	movs	r3, #1
 800111a:	ca06      	ldmia	r2, {r1, r2}
 800111c:	f000 fe16 	bl	8001d4c <ssd1306_WriteString>

/* Display Kd */
	  ssd1306_SetCursor(75 , 40);
 8001120:	2128      	movs	r1, #40	; 0x28
 8001122:	204b      	movs	r0, #75	; 0x4b
 8001124:	f000 fe38 	bl	8001d98 <ssd1306_SetCursor>
	  ssd1306_WriteString("D: ",Font_6x8,White);
 8001128:	4a12      	ldr	r2, [pc, #72]	; (8001174 <Display_PID+0xf0>)
 800112a:	2301      	movs	r3, #1
 800112c:	ca06      	ldmia	r2, {r1, r2}
 800112e:	4814      	ldr	r0, [pc, #80]	; (8001180 <Display_PID+0xfc>)
 8001130:	f000 fe0c 	bl	8001d4c <ssd1306_WriteString>
	  ssd1306_WriteString(Kd_Val_Str,Font_6x8,White);
 8001134:	4a0f      	ldr	r2, [pc, #60]	; (8001174 <Display_PID+0xf0>)
 8001136:	f107 0018 	add.w	r0, r7, #24
 800113a:	2301      	movs	r3, #1
 800113c:	ca06      	ldmia	r2, {r1, r2}
 800113e:	f000 fe05 	bl	8001d4c <ssd1306_WriteString>

	  /* Display M_Speed Value */
	  ssd1306_SetCursor(75, 50);
 8001142:	2132      	movs	r1, #50	; 0x32
 8001144:	204b      	movs	r0, #75	; 0x4b
 8001146:	f000 fe27 	bl	8001d98 <ssd1306_SetCursor>
	  ssd1306_WriteString("Sp:",Font_6x8,White);
 800114a:	4a0a      	ldr	r2, [pc, #40]	; (8001174 <Display_PID+0xf0>)
 800114c:	2301      	movs	r3, #1
 800114e:	ca06      	ldmia	r2, {r1, r2}
 8001150:	480c      	ldr	r0, [pc, #48]	; (8001184 <Display_PID+0x100>)
 8001152:	f000 fdfb 	bl	8001d4c <ssd1306_WriteString>
	  ssd1306_WriteString(M_Speed_Val_Str,Font_6x8,White);
 8001156:	4a07      	ldr	r2, [pc, #28]	; (8001174 <Display_PID+0xf0>)
 8001158:	f107 0010 	add.w	r0, r7, #16
 800115c:	2301      	movs	r3, #1
 800115e:	ca06      	ldmia	r2, {r1, r2}
 8001160:	f000 fdf4 	bl	8001d4c <ssd1306_WriteString>
}
 8001164:	bf00      	nop
 8001166:	3730      	adds	r7, #48	; 0x30
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	08008b40 	.word	0x08008b40
 8001170:	08008b48 	.word	0x08008b48
 8001174:	20000008 	.word	0x20000008
 8001178:	08008b4c 	.word	0x08008b4c
 800117c:	08008b50 	.word	0x08008b50
 8001180:	08008b54 	.word	0x08008b54
 8001184:	08008b58 	.word	0x08008b58

08001188 <Display_Battery>:

void Display_Battery()
{
 8001188:	b5b0      	push	{r4, r5, r7, lr}
 800118a:	b084      	sub	sp, #16
 800118c:	af02      	add	r7, sp, #8
	Percent_Battery =  (float)HAL_ADC_GetValue(&hadc1)*3.3*4 /( 4096*(Max_Bat_Voltage - D_Drop_Voltage) ) *100;
 800118e:	486e      	ldr	r0, [pc, #440]	; (8001348 <Display_Battery+0x1c0>)
 8001190:	f001 fbaa 	bl	80028e8 <HAL_ADC_GetValue>
 8001194:	4603      	mov	r3, r0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff fd2c 	bl	8000bf4 <__aeabi_ui2f>
 800119c:	4603      	mov	r3, r0
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff f942 	bl	8000428 <__aeabi_f2d>
 80011a4:	a366      	add	r3, pc, #408	; (adr r3, 8001340 <Display_Battery+0x1b8>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff f995 	bl	80004d8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4610      	mov	r0, r2
 80011b4:	4619      	mov	r1, r3
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b64      	ldr	r3, [pc, #400]	; (800134c <Display_Battery+0x1c4>)
 80011bc:	f7ff f98c 	bl	80004d8 <__aeabi_dmul>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4614      	mov	r4, r2
 80011c6:	461d      	mov	r5, r3
 80011c8:	4b61      	ldr	r3, [pc, #388]	; (8001350 <Display_Battery+0x1c8>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	4a61      	ldr	r2, [pc, #388]	; (8001354 <Display_Battery+0x1cc>)
 80011ce:	6812      	ldr	r2, [r2, #0]
 80011d0:	4611      	mov	r1, r2
 80011d2:	4618      	mov	r0, r3
 80011d4:	f7ff fc5c 	bl	8000a90 <__aeabi_fsub>
 80011d8:	4603      	mov	r3, r0
 80011da:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 80011de:	4618      	mov	r0, r3
 80011e0:	f7ff fd60 	bl	8000ca4 <__aeabi_fmul>
 80011e4:	4603      	mov	r3, r0
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff f91e 	bl	8000428 <__aeabi_f2d>
 80011ec:	4602      	mov	r2, r0
 80011ee:	460b      	mov	r3, r1
 80011f0:	4620      	mov	r0, r4
 80011f2:	4629      	mov	r1, r5
 80011f4:	f7ff fa9a 	bl	800072c <__aeabi_ddiv>
 80011f8:	4602      	mov	r2, r0
 80011fa:	460b      	mov	r3, r1
 80011fc:	4610      	mov	r0, r2
 80011fe:	4619      	mov	r1, r3
 8001200:	f04f 0200 	mov.w	r2, #0
 8001204:	4b54      	ldr	r3, [pc, #336]	; (8001358 <Display_Battery+0x1d0>)
 8001206:	f7ff f967 	bl	80004d8 <__aeabi_dmul>
 800120a:	4602      	mov	r2, r0
 800120c:	460b      	mov	r3, r1
 800120e:	4610      	mov	r0, r2
 8001210:	4619      	mov	r1, r3
 8001212:	f7ff fc11 	bl	8000a38 <__aeabi_d2iz>
 8001216:	4603      	mov	r3, r0
 8001218:	b21a      	sxth	r2, r3
 800121a:	4b50      	ldr	r3, [pc, #320]	; (800135c <Display_Battery+0x1d4>)
 800121c:	801a      	strh	r2, [r3, #0]
	char BatStr[3] ;
	/* Display battery status */
		  sprintf(BatStr, "%d", Percent_Battery);
 800121e:	4b4f      	ldr	r3, [pc, #316]	; (800135c <Display_Battery+0x1d4>)
 8001220:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001224:	461a      	mov	r2, r3
 8001226:	1d3b      	adds	r3, r7, #4
 8001228:	494d      	ldr	r1, [pc, #308]	; (8001360 <Display_Battery+0x1d8>)
 800122a:	4618      	mov	r0, r3
 800122c:	f005 fb30 	bl	8006890 <siprintf>
		  if (Percent_Battery <= 5)
 8001230:	4b4a      	ldr	r3, [pc, #296]	; (800135c <Display_Battery+0x1d4>)
 8001232:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001236:	2b05      	cmp	r3, #5
 8001238:	dc16      	bgt.n	8001268 <Display_Battery+0xe0>
		  {
			  ssd1306_DrawBitmap(2, 17, battery_5 , 25 ,25 ,White); //Bat [0 - 5%]
 800123a:	2301      	movs	r3, #1
 800123c:	9301      	str	r3, [sp, #4]
 800123e:	2319      	movs	r3, #25
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2319      	movs	r3, #25
 8001244:	4a47      	ldr	r2, [pc, #284]	; (8001364 <Display_Battery+0x1dc>)
 8001246:	2111      	movs	r1, #17
 8001248:	2002      	movs	r0, #2
 800124a:	f000 fe29 	bl	8001ea0 <ssd1306_DrawBitmap>
			  ssd1306_DrawBitmap(115, 1, plug , 16, 16, White);
 800124e:	2301      	movs	r3, #1
 8001250:	9301      	str	r3, [sp, #4]
 8001252:	2310      	movs	r3, #16
 8001254:	9300      	str	r3, [sp, #0]
 8001256:	2310      	movs	r3, #16
 8001258:	4a43      	ldr	r2, [pc, #268]	; (8001368 <Display_Battery+0x1e0>)
 800125a:	2101      	movs	r1, #1
 800125c:	2073      	movs	r0, #115	; 0x73
 800125e:	f000 fe1f 	bl	8001ea0 <ssd1306_DrawBitmap>
			  my_Low_Power_Alert();
 8001262:	f7ff fe9d 	bl	8000fa0 <my_Low_Power_Alert>
 8001266:	e054      	b.n	8001312 <Display_Battery+0x18a>
		  }
		  else if (Percent_Battery <= 25 && Percent_Battery >= 5)
 8001268:	4b3c      	ldr	r3, [pc, #240]	; (800135c <Display_Battery+0x1d4>)
 800126a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800126e:	2b19      	cmp	r3, #25
 8001270:	dc1b      	bgt.n	80012aa <Display_Battery+0x122>
 8001272:	4b3a      	ldr	r3, [pc, #232]	; (800135c <Display_Battery+0x1d4>)
 8001274:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001278:	2b04      	cmp	r3, #4
 800127a:	dd16      	ble.n	80012aa <Display_Battery+0x122>
		  {
			  ssd1306_DrawBitmap(2, 17, battery_4 , 25, 25, White); //Bat [5 - 25%]
 800127c:	2301      	movs	r3, #1
 800127e:	9301      	str	r3, [sp, #4]
 8001280:	2319      	movs	r3, #25
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	2319      	movs	r3, #25
 8001286:	4a39      	ldr	r2, [pc, #228]	; (800136c <Display_Battery+0x1e4>)
 8001288:	2111      	movs	r1, #17
 800128a:	2002      	movs	r0, #2
 800128c:	f000 fe08 	bl	8001ea0 <ssd1306_DrawBitmap>
			  ssd1306_DrawBitmap(115, 1, plug , 16, 16, White);
 8001290:	2301      	movs	r3, #1
 8001292:	9301      	str	r3, [sp, #4]
 8001294:	2310      	movs	r3, #16
 8001296:	9300      	str	r3, [sp, #0]
 8001298:	2310      	movs	r3, #16
 800129a:	4a33      	ldr	r2, [pc, #204]	; (8001368 <Display_Battery+0x1e0>)
 800129c:	2101      	movs	r1, #1
 800129e:	2073      	movs	r0, #115	; 0x73
 80012a0:	f000 fdfe 	bl	8001ea0 <ssd1306_DrawBitmap>
			  my_Low_Power_Alert();
 80012a4:	f7ff fe7c 	bl	8000fa0 <my_Low_Power_Alert>
 80012a8:	e033      	b.n	8001312 <Display_Battery+0x18a>
		  }
		  else if (Percent_Battery <=50 && Percent_Battery >=25)
 80012aa:	4b2c      	ldr	r3, [pc, #176]	; (800135c <Display_Battery+0x1d4>)
 80012ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012b0:	2b32      	cmp	r3, #50	; 0x32
 80012b2:	dc0f      	bgt.n	80012d4 <Display_Battery+0x14c>
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <Display_Battery+0x1d4>)
 80012b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012ba:	2b18      	cmp	r3, #24
 80012bc:	dd0a      	ble.n	80012d4 <Display_Battery+0x14c>
		  {
			  ssd1306_DrawBitmap(2, 17, battery_3 , 25, 25, White); //Bat [25 - 50%]
 80012be:	2301      	movs	r3, #1
 80012c0:	9301      	str	r3, [sp, #4]
 80012c2:	2319      	movs	r3, #25
 80012c4:	9300      	str	r3, [sp, #0]
 80012c6:	2319      	movs	r3, #25
 80012c8:	4a29      	ldr	r2, [pc, #164]	; (8001370 <Display_Battery+0x1e8>)
 80012ca:	2111      	movs	r1, #17
 80012cc:	2002      	movs	r0, #2
 80012ce:	f000 fde7 	bl	8001ea0 <ssd1306_DrawBitmap>
 80012d2:	e01e      	b.n	8001312 <Display_Battery+0x18a>

		  }
		  else if (Percent_Battery <=75 && Percent_Battery >=50)
 80012d4:	4b21      	ldr	r3, [pc, #132]	; (800135c <Display_Battery+0x1d4>)
 80012d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012da:	2b4b      	cmp	r3, #75	; 0x4b
 80012dc:	dc0f      	bgt.n	80012fe <Display_Battery+0x176>
 80012de:	4b1f      	ldr	r3, [pc, #124]	; (800135c <Display_Battery+0x1d4>)
 80012e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80012e4:	2b31      	cmp	r3, #49	; 0x31
 80012e6:	dd0a      	ble.n	80012fe <Display_Battery+0x176>
		  {
			  ssd1306_DrawBitmap(2, 17, battery_2 , 25, 25, White); //Bat [50 - 75%]
 80012e8:	2301      	movs	r3, #1
 80012ea:	9301      	str	r3, [sp, #4]
 80012ec:	2319      	movs	r3, #25
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2319      	movs	r3, #25
 80012f2:	4a20      	ldr	r2, [pc, #128]	; (8001374 <Display_Battery+0x1ec>)
 80012f4:	2111      	movs	r1, #17
 80012f6:	2002      	movs	r0, #2
 80012f8:	f000 fdd2 	bl	8001ea0 <ssd1306_DrawBitmap>
 80012fc:	e009      	b.n	8001312 <Display_Battery+0x18a>
		  }
		  else
		  {
			  ssd1306_DrawBitmap(2, 17, battery_1 , 25, 25, White); //Bat [75 - 100%]
 80012fe:	2301      	movs	r3, #1
 8001300:	9301      	str	r3, [sp, #4]
 8001302:	2319      	movs	r3, #25
 8001304:	9300      	str	r3, [sp, #0]
 8001306:	2319      	movs	r3, #25
 8001308:	4a1b      	ldr	r2, [pc, #108]	; (8001378 <Display_Battery+0x1f0>)
 800130a:	2111      	movs	r1, #17
 800130c:	2002      	movs	r0, #2
 800130e:	f000 fdc7 	bl	8001ea0 <ssd1306_DrawBitmap>
		  }

		  ssd1306_SetCursor(30 , 21);
 8001312:	2115      	movs	r1, #21
 8001314:	201e      	movs	r0, #30
 8001316:	f000 fd3f 	bl	8001d98 <ssd1306_SetCursor>
		  ssd1306_WriteString(BatStr,Font_11x18 , White);
 800131a:	4a18      	ldr	r2, [pc, #96]	; (800137c <Display_Battery+0x1f4>)
 800131c:	1d38      	adds	r0, r7, #4
 800131e:	2301      	movs	r3, #1
 8001320:	ca06      	ldmia	r2, {r1, r2}
 8001322:	f000 fd13 	bl	8001d4c <ssd1306_WriteString>
		  ssd1306_WriteString("%",Font_7x10 , White);
 8001326:	4a16      	ldr	r2, [pc, #88]	; (8001380 <Display_Battery+0x1f8>)
 8001328:	2301      	movs	r3, #1
 800132a:	ca06      	ldmia	r2, {r1, r2}
 800132c:	4815      	ldr	r0, [pc, #84]	; (8001384 <Display_Battery+0x1fc>)
 800132e:	f000 fd0d 	bl	8001d4c <ssd1306_WriteString>

}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bdb0      	pop	{r4, r5, r7, pc}
 800133a:	bf00      	nop
 800133c:	f3af 8000 	nop.w
 8001340:	66666666 	.word	0x66666666
 8001344:	400a6666 	.word	0x400a6666
 8001348:	20000210 	.word	0x20000210
 800134c:	40100000 	.word	0x40100000
 8001350:	20000004 	.word	0x20000004
 8001354:	20000000 	.word	0x20000000
 8001358:	40590000 	.word	0x40590000
 800135c:	20000326 	.word	0x20000326
 8001360:	08008b48 	.word	0x08008b48
 8001364:	08008cf0 	.word	0x08008cf0
 8001368:	08008e14 	.word	0x08008e14
 800136c:	08008c8c 	.word	0x08008c8c
 8001370:	08008c28 	.word	0x08008c28
 8001374:	08008bc4 	.word	0x08008bc4
 8001378:	08008b60 	.word	0x08008b60
 800137c:	20000018 	.word	0x20000018
 8001380:	20000010 	.word	0x20000010
 8001384:	08008b5c 	.word	0x08008b5c

08001388 <Display_Frame>:

void Display_Frame()
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af02      	add	r7, sp, #8
	/* Draw Frames */
		  ssd1306_Line(1, 17, 128, 17, White);
 800138e:	2301      	movs	r3, #1
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2311      	movs	r3, #17
 8001394:	2280      	movs	r2, #128	; 0x80
 8001396:	2111      	movs	r1, #17
 8001398:	2001      	movs	r0, #1
 800139a:	f000 fd15 	bl	8001dc8 <ssd1306_Line>
		  ssd1306_Line(70, 18, 70, 64, White);
 800139e:	2301      	movs	r3, #1
 80013a0:	9300      	str	r3, [sp, #0]
 80013a2:	2340      	movs	r3, #64	; 0x40
 80013a4:	2246      	movs	r2, #70	; 0x46
 80013a6:	2112      	movs	r1, #18
 80013a8:	2046      	movs	r0, #70	; 0x46
 80013aa:	f000 fd0d 	bl	8001dc8 <ssd1306_Line>
		  ssd1306_Line(1, 41, 69, 41,  White);
 80013ae:	2301      	movs	r3, #1
 80013b0:	9300      	str	r3, [sp, #0]
 80013b2:	2329      	movs	r3, #41	; 0x29
 80013b4:	2245      	movs	r2, #69	; 0x45
 80013b6:	2129      	movs	r1, #41	; 0x29
 80013b8:	2001      	movs	r0, #1
 80013ba:	f000 fd05 	bl	8001dc8 <ssd1306_Line>

}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <Display_Logo>:

void Display_Logo()
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b082      	sub	sp, #8
 80013c8:	af02      	add	r7, sp, #8
	/* Display Logo */
		  ssd1306_DrawBitmap(1, 1, LogoPIFAVENGER , 90, 16, White); //Logo
 80013ca:	2301      	movs	r3, #1
 80013cc:	9301      	str	r3, [sp, #4]
 80013ce:	2310      	movs	r3, #16
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	235a      	movs	r3, #90	; 0x5a
 80013d4:	4a03      	ldr	r2, [pc, #12]	; (80013e4 <Display_Logo+0x20>)
 80013d6:	2101      	movs	r1, #1
 80013d8:	2001      	movs	r0, #1
 80013da:	f000 fd61 	bl	8001ea0 <ssd1306_DrawBitmap>

}
 80013de:	bf00      	nop
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	08008d54 	.word	0x08008d54

080013e8 <Display_Bluetooth_status>:

void Display_Bluetooth_status(uint8_t bluetooth_on)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af02      	add	r7, sp, #8
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
	  /* Display Bluetooth Status*/
	  if(bluetooth_on == 1)
 80013f2:	79fb      	ldrb	r3, [r7, #7]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d109      	bne.n	800140c <Display_Bluetooth_status+0x24>
	  {
	  	  ssd1306_DrawBitmap(107, 4, bluetooth , 10, 10, White);
 80013f8:	2301      	movs	r3, #1
 80013fa:	9301      	str	r3, [sp, #4]
 80013fc:	230a      	movs	r3, #10
 80013fe:	9300      	str	r3, [sp, #0]
 8001400:	230a      	movs	r3, #10
 8001402:	4a04      	ldr	r2, [pc, #16]	; (8001414 <Display_Bluetooth_status+0x2c>)
 8001404:	2104      	movs	r1, #4
 8001406:	206b      	movs	r0, #107	; 0x6b
 8001408:	f000 fd4a 	bl	8001ea0 <ssd1306_DrawBitmap>

	  }
}
 800140c:	bf00      	nop
 800140e:	3708      	adds	r7, #8
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	08008e34 	.word	0x08008e34

08001418 <my_Oled_Display>:


void my_Oled_Display(float Kp_val , float Ki_val , float Kd_val , uint16_t M_Speed_val )
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b084      	sub	sp, #16
 800141c:	af00      	add	r7, sp, #0
 800141e:	60f8      	str	r0, [r7, #12]
 8001420:	60b9      	str	r1, [r7, #8]
 8001422:	607a      	str	r2, [r7, #4]
 8001424:	807b      	strh	r3, [r7, #2]

	  bluetooth_status = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8001426:	2180      	movs	r1, #128	; 0x80
 8001428:	4810      	ldr	r0, [pc, #64]	; (800146c <my_Oled_Display+0x54>)
 800142a:	f002 f811 	bl	8003450 <HAL_GPIO_ReadPin>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b0f      	ldr	r3, [pc, #60]	; (8001470 <my_Oled_Display+0x58>)
 8001434:	701a      	strb	r2, [r3, #0]
	  ssd1306_Fill(Black);
 8001436:	2000      	movs	r0, #0
 8001438:	f000 fb6e 	bl	8001b18 <ssd1306_Fill>
	  Display_Logo();
 800143c:	f7ff ffc2 	bl	80013c4 <Display_Logo>
	  Display_Frame();
 8001440:	f7ff ffa2 	bl	8001388 <Display_Frame>
	  Display_Bluetooth_status(bluetooth_status);
 8001444:	4b0a      	ldr	r3, [pc, #40]	; (8001470 <my_Oled_Display+0x58>)
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff ffcd 	bl	80013e8 <Display_Bluetooth_status>
	  Display_Battery();
 800144e:	f7ff fe9b 	bl	8001188 <Display_Battery>
	  Display_PID(Kp_val,Ki_val,Kd_val,M_Speed_val);
 8001452:	887b      	ldrh	r3, [r7, #2]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	68b9      	ldr	r1, [r7, #8]
 8001458:	68f8      	ldr	r0, [r7, #12]
 800145a:	f7ff fe13 	bl	8001084 <Display_PID>

/* Initialize Screen */
	  ssd1306_UpdateScreen();
 800145e:	f000 fb73 	bl	8001b48 <ssd1306_UpdateScreen>


}
 8001462:	bf00      	nop
 8001464:	3710      	adds	r7, #16
 8001466:	46bd      	mov	sp, r7
 8001468:	bd80      	pop	{r7, pc}
 800146a:	bf00      	nop
 800146c:	40010800 	.word	0x40010800
 8001470:	2000032a 	.word	0x2000032a

08001474 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001478:	f001 f822 	bl	80024c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800147c:	f000 f85c 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001480:	f000 f9de 	bl	8001840 <MX_GPIO_Init>
  MX_I2C2_Init();
 8001484:	f000 f8ec 	bl	8001660 <MX_I2C2_Init>
  MX_ADC1_Init();
 8001488:	f000 f8ac 	bl	80015e4 <MX_ADC1_Init>
  MX_TIM4_Init();
 800148c:	f000 f916 	bl	80016bc <MX_TIM4_Init>
  MX_USART1_UART_Init();
 8001490:	f000 f9ac 	bl	80017ec <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_IT(&hadc1);
 8001494:	4820      	ldr	r0, [pc, #128]	; (8001518 <main+0xa4>)
 8001496:	f001 f971 	bl	800277c <HAL_ADC_Start_IT>
  HAL_UART_Receive_IT(&huart1,&rxData,1);
 800149a:	2201      	movs	r2, #1
 800149c:	491f      	ldr	r1, [pc, #124]	; (800151c <main+0xa8>)
 800149e:	4820      	ldr	r0, [pc, #128]	; (8001520 <main+0xac>)
 80014a0:	f003 ff9e 	bl	80053e0 <HAL_UART_Receive_IT>

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_1);
 80014a4:	2100      	movs	r1, #0
 80014a6:	481f      	ldr	r0, [pc, #124]	; (8001524 <main+0xb0>)
 80014a8:	f003 fa1c 	bl	80048e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_2);
 80014ac:	2104      	movs	r1, #4
 80014ae:	481d      	ldr	r0, [pc, #116]	; (8001524 <main+0xb0>)
 80014b0:	f003 fa18 	bl	80048e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_3);
 80014b4:	2108      	movs	r1, #8
 80014b6:	481b      	ldr	r0, [pc, #108]	; (8001524 <main+0xb0>)
 80014b8:	f003 fa14 	bl	80048e4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 80014bc:	210c      	movs	r1, #12
 80014be:	4819      	ldr	r0, [pc, #100]	; (8001524 <main+0xb0>)
 80014c0:	f003 fa10 	bl	80048e4 <HAL_TIM_PWM_Start>
  ssd1306_Init();
 80014c4:	f000 fabe 	bl	8001a44 <ssd1306_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  my_Oled_Display(0.394 , 0.819 , 2.981 , 500 );
 80014c8:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80014cc:	4a16      	ldr	r2, [pc, #88]	; (8001528 <main+0xb4>)
 80014ce:	4917      	ldr	r1, [pc, #92]	; (800152c <main+0xb8>)
 80014d0:	4817      	ldr	r0, [pc, #92]	; (8001530 <main+0xbc>)
 80014d2:	f7ff ffa1 	bl	8001418 <my_Oled_Display>
	  My_Motor_Control(800 ,800);
 80014d6:	f44f 7148 	mov.w	r1, #800	; 0x320
 80014da:	f44f 7048 	mov.w	r0, #800	; 0x320
 80014de:	f7ff fd31 	bl	8000f44 <My_Motor_Control>
	  HAL_Delay(100);
 80014e2:	2064      	movs	r0, #100	; 0x64
 80014e4:	f001 f84e 	bl	8002584 <HAL_Delay>
	  My_Motor_Control(-800 ,800);
 80014e8:	f44f 7148 	mov.w	r1, #800	; 0x320
 80014ec:	4811      	ldr	r0, [pc, #68]	; (8001534 <main+0xc0>)
 80014ee:	f7ff fd29 	bl	8000f44 <My_Motor_Control>
	  HAL_Delay(100);
 80014f2:	2064      	movs	r0, #100	; 0x64
 80014f4:	f001 f846 	bl	8002584 <HAL_Delay>
	  My_Motor_Control(800 ,-800);
 80014f8:	490e      	ldr	r1, [pc, #56]	; (8001534 <main+0xc0>)
 80014fa:	f44f 7048 	mov.w	r0, #800	; 0x320
 80014fe:	f7ff fd21 	bl	8000f44 <My_Motor_Control>
	  HAL_Delay(100);
 8001502:	2064      	movs	r0, #100	; 0x64
 8001504:	f001 f83e 	bl	8002584 <HAL_Delay>
	  My_Motor_Control(-800 ,-800);
 8001508:	490a      	ldr	r1, [pc, #40]	; (8001534 <main+0xc0>)
 800150a:	480a      	ldr	r0, [pc, #40]	; (8001534 <main+0xc0>)
 800150c:	f7ff fd1a 	bl	8000f44 <My_Motor_Control>
	  HAL_Delay(100);
 8001510:	2064      	movs	r0, #100	; 0x64
 8001512:	f001 f837 	bl	8002584 <HAL_Delay>
	  my_Oled_Display(0.394 , 0.819 , 2.981 , 500 );
 8001516:	e7d7      	b.n	80014c8 <main+0x54>
 8001518:	20000210 	.word	0x20000210
 800151c:	20000324 	.word	0x20000324
 8001520:	200002dc 	.word	0x200002dc
 8001524:	20000294 	.word	0x20000294
 8001528:	403ec8b4 	.word	0x403ec8b4
 800152c:	3f51a9fc 	.word	0x3f51a9fc
 8001530:	3ec9ba5e 	.word	0x3ec9ba5e
 8001534:	fffffce0 	.word	0xfffffce0

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b094      	sub	sp, #80	; 0x50
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001542:	2228      	movs	r2, #40	; 0x28
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f005 fa05 	bl	8006956 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	f107 0314 	add.w	r3, r7, #20
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800155c:	1d3b      	adds	r3, r7, #4
 800155e:	2200      	movs	r2, #0
 8001560:	601a      	str	r2, [r3, #0]
 8001562:	605a      	str	r2, [r3, #4]
 8001564:	609a      	str	r2, [r3, #8]
 8001566:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001568:	2302      	movs	r3, #2
 800156a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800156c:	2301      	movs	r3, #1
 800156e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001570:	2310      	movs	r3, #16
 8001572:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001574:	2302      	movs	r3, #2
 8001576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001578:	2300      	movs	r3, #0
 800157a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800157c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8001580:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001582:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001586:	4618      	mov	r0, r3
 8001588:	f002 fc3e 	bl	8003e08 <HAL_RCC_OscConfig>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8001592:	f000 fa19 	bl	80019c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001596:	230f      	movs	r3, #15
 8001598:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800159a:	2302      	movs	r3, #2
 800159c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015a6:	2300      	movs	r3, #0
 80015a8:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80015aa:	f107 0314 	add.w	r3, r7, #20
 80015ae:	2100      	movs	r1, #0
 80015b0:	4618      	mov	r0, r3
 80015b2:	f002 feab 	bl	800430c <HAL_RCC_ClockConfig>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <SystemClock_Config+0x88>
  {
    Error_Handler();
 80015bc:	f000 fa04 	bl	80019c8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80015c0:	2302      	movs	r3, #2
 80015c2:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV2;
 80015c4:	2300      	movs	r3, #0
 80015c6:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	4618      	mov	r0, r3
 80015cc:	f003 f82c 	bl	8004628 <HAL_RCCEx_PeriphCLKConfig>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80015d6:	f000 f9f7 	bl	80019c8 <Error_Handler>
  }
}
 80015da:	bf00      	nop
 80015dc:	3750      	adds	r7, #80	; 0x50
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
	...

080015e4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80015e4:	b580      	push	{r7, lr}
 80015e6:	b084      	sub	sp, #16
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ea:	1d3b      	adds	r3, r7, #4
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80015f4:	4b18      	ldr	r3, [pc, #96]	; (8001658 <MX_ADC1_Init+0x74>)
 80015f6:	4a19      	ldr	r2, [pc, #100]	; (800165c <MX_ADC1_Init+0x78>)
 80015f8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80015fa:	4b17      	ldr	r3, [pc, #92]	; (8001658 <MX_ADC1_Init+0x74>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001600:	4b15      	ldr	r3, [pc, #84]	; (8001658 <MX_ADC1_Init+0x74>)
 8001602:	2201      	movs	r2, #1
 8001604:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001606:	4b14      	ldr	r3, [pc, #80]	; (8001658 <MX_ADC1_Init+0x74>)
 8001608:	2200      	movs	r2, #0
 800160a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <MX_ADC1_Init+0x74>)
 800160e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8001612:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001614:	4b10      	ldr	r3, [pc, #64]	; (8001658 <MX_ADC1_Init+0x74>)
 8001616:	2200      	movs	r2, #0
 8001618:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 800161a:	4b0f      	ldr	r3, [pc, #60]	; (8001658 <MX_ADC1_Init+0x74>)
 800161c:	2201      	movs	r2, #1
 800161e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001620:	480d      	ldr	r0, [pc, #52]	; (8001658 <MX_ADC1_Init+0x74>)
 8001622:	f000 ffd3 	bl	80025cc <HAL_ADC_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 800162c:	f000 f9cc 	bl	80019c8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001630:	2308      	movs	r3, #8
 8001632:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001634:	2301      	movs	r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8001638:	2307      	movs	r3, #7
 800163a:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800163c:	1d3b      	adds	r3, r7, #4
 800163e:	4619      	mov	r1, r3
 8001640:	4805      	ldr	r0, [pc, #20]	; (8001658 <MX_ADC1_Init+0x74>)
 8001642:	f001 fa25 	bl	8002a90 <HAL_ADC_ConfigChannel>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 800164c:	f000 f9bc 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001650:	bf00      	nop
 8001652:	3710      	adds	r7, #16
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	20000210 	.word	0x20000210
 800165c:	40012400 	.word	0x40012400

08001660 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001664:	4b12      	ldr	r3, [pc, #72]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001666:	4a13      	ldr	r2, [pc, #76]	; (80016b4 <MX_I2C2_Init+0x54>)
 8001668:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800166a:	4b11      	ldr	r3, [pc, #68]	; (80016b0 <MX_I2C2_Init+0x50>)
 800166c:	4a12      	ldr	r2, [pc, #72]	; (80016b8 <MX_I2C2_Init+0x58>)
 800166e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001670:	4b0f      	ldr	r3, [pc, #60]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001672:	2200      	movs	r2, #0
 8001674:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001676:	4b0e      	ldr	r3, [pc, #56]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001678:	2200      	movs	r2, #0
 800167a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800167c:	4b0c      	ldr	r3, [pc, #48]	; (80016b0 <MX_I2C2_Init+0x50>)
 800167e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001682:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001684:	4b0a      	ldr	r3, [pc, #40]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001686:	2200      	movs	r2, #0
 8001688:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <MX_I2C2_Init+0x50>)
 800168c:	2200      	movs	r2, #0
 800168e:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001690:	4b07      	ldr	r3, [pc, #28]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001692:	2200      	movs	r2, #0
 8001694:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <MX_I2C2_Init+0x50>)
 8001698:	2200      	movs	r2, #0
 800169a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <MX_I2C2_Init+0x50>)
 800169e:	f001 ff07 	bl	80034b0 <HAL_I2C_Init>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80016a8:	f000 f98e 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	20000240 	.word	0x20000240
 80016b4:	40005800 	.word	0x40005800
 80016b8:	000186a0 	.word	0x000186a0

080016bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b08e      	sub	sp, #56	; 0x38
 80016c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80016c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016c6:	2200      	movs	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
 80016ca:	605a      	str	r2, [r3, #4]
 80016cc:	609a      	str	r2, [r3, #8]
 80016ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d0:	f107 0320 	add.w	r3, r7, #32
 80016d4:	2200      	movs	r2, #0
 80016d6:	601a      	str	r2, [r3, #0]
 80016d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80016da:	1d3b      	adds	r3, r7, #4
 80016dc:	2200      	movs	r2, #0
 80016de:	601a      	str	r2, [r3, #0]
 80016e0:	605a      	str	r2, [r3, #4]
 80016e2:	609a      	str	r2, [r3, #8]
 80016e4:	60da      	str	r2, [r3, #12]
 80016e6:	611a      	str	r2, [r3, #16]
 80016e8:	615a      	str	r2, [r3, #20]
 80016ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016ec:	4b3d      	ldr	r3, [pc, #244]	; (80017e4 <MX_TIM4_Init+0x128>)
 80016ee:	4a3e      	ldr	r2, [pc, #248]	; (80017e8 <MX_TIM4_Init+0x12c>)
 80016f0:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 159;
 80016f2:	4b3c      	ldr	r3, [pc, #240]	; (80017e4 <MX_TIM4_Init+0x128>)
 80016f4:	229f      	movs	r2, #159	; 0x9f
 80016f6:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016f8:	4b3a      	ldr	r3, [pc, #232]	; (80017e4 <MX_TIM4_Init+0x128>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 80016fe:	4b39      	ldr	r3, [pc, #228]	; (80017e4 <MX_TIM4_Init+0x128>)
 8001700:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001704:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001706:	4b37      	ldr	r3, [pc, #220]	; (80017e4 <MX_TIM4_Init+0x128>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800170c:	4b35      	ldr	r3, [pc, #212]	; (80017e4 <MX_TIM4_Init+0x128>)
 800170e:	2280      	movs	r2, #128	; 0x80
 8001710:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001712:	4834      	ldr	r0, [pc, #208]	; (80017e4 <MX_TIM4_Init+0x128>)
 8001714:	f003 f83e 	bl	8004794 <HAL_TIM_Base_Init>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 800171e:	f000 f953 	bl	80019c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001726:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001728:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800172c:	4619      	mov	r1, r3
 800172e:	482d      	ldr	r0, [pc, #180]	; (80017e4 <MX_TIM4_Init+0x128>)
 8001730:	f003 fa3c 	bl	8004bac <HAL_TIM_ConfigClockSource>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d001      	beq.n	800173e <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 800173a:	f000 f945 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800173e:	4829      	ldr	r0, [pc, #164]	; (80017e4 <MX_TIM4_Init+0x128>)
 8001740:	f003 f877 	bl	8004832 <HAL_TIM_PWM_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 800174a:	f000 f93d 	bl	80019c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800174e:	2300      	movs	r3, #0
 8001750:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001752:	2300      	movs	r3, #0
 8001754:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001756:	f107 0320 	add.w	r3, r7, #32
 800175a:	4619      	mov	r1, r3
 800175c:	4821      	ldr	r0, [pc, #132]	; (80017e4 <MX_TIM4_Init+0x128>)
 800175e:	f003 fd91 	bl	8005284 <HAL_TIMEx_MasterConfigSynchronization>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d001      	beq.n	800176c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001768:	f000 f92e 	bl	80019c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800176c:	2360      	movs	r3, #96	; 0x60
 800176e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001770:	2300      	movs	r3, #0
 8001772:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001774:	2300      	movs	r3, #0
 8001776:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	4619      	mov	r1, r3
 8001782:	4818      	ldr	r0, [pc, #96]	; (80017e4 <MX_TIM4_Init+0x128>)
 8001784:	f003 f950 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800178e:	f000 f91b 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001792:	1d3b      	adds	r3, r7, #4
 8001794:	2204      	movs	r2, #4
 8001796:	4619      	mov	r1, r3
 8001798:	4812      	ldr	r0, [pc, #72]	; (80017e4 <MX_TIM4_Init+0x128>)
 800179a:	f003 f945 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 800179e:	4603      	mov	r3, r0
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d001      	beq.n	80017a8 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 80017a4:	f000 f910 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80017a8:	1d3b      	adds	r3, r7, #4
 80017aa:	2208      	movs	r2, #8
 80017ac:	4619      	mov	r1, r3
 80017ae:	480d      	ldr	r0, [pc, #52]	; (80017e4 <MX_TIM4_Init+0x128>)
 80017b0:	f003 f93a 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 80017ba:	f000 f905 	bl	80019c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017be:	1d3b      	adds	r3, r7, #4
 80017c0:	220c      	movs	r2, #12
 80017c2:	4619      	mov	r1, r3
 80017c4:	4807      	ldr	r0, [pc, #28]	; (80017e4 <MX_TIM4_Init+0x128>)
 80017c6:	f003 f92f 	bl	8004a28 <HAL_TIM_PWM_ConfigChannel>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d001      	beq.n	80017d4 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 80017d0:	f000 f8fa 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80017d4:	4803      	ldr	r0, [pc, #12]	; (80017e4 <MX_TIM4_Init+0x128>)
 80017d6:	f000 fcc3 	bl	8002160 <HAL_TIM_MspPostInit>

}
 80017da:	bf00      	nop
 80017dc:	3738      	adds	r7, #56	; 0x38
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000294 	.word	0x20000294
 80017e8:	40000800 	.word	0x40000800

080017ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80017f0:	4b11      	ldr	r3, [pc, #68]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 80017f2:	4a12      	ldr	r2, [pc, #72]	; (800183c <MX_USART1_UART_Init+0x50>)
 80017f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80017f6:	4b10      	ldr	r3, [pc, #64]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 80017f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80017fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001800:	2200      	movs	r2, #0
 8001802:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001806:	2200      	movs	r2, #0
 8001808:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800180a:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 800180c:	2200      	movs	r2, #0
 800180e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001810:	4b09      	ldr	r3, [pc, #36]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001812:	220c      	movs	r2, #12
 8001814:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001816:	4b08      	ldr	r3, [pc, #32]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001818:	2200      	movs	r2, #0
 800181a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 800181e:	2200      	movs	r2, #0
 8001820:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001822:	4805      	ldr	r0, [pc, #20]	; (8001838 <MX_USART1_UART_Init+0x4c>)
 8001824:	f003 fd8c 	bl	8005340 <HAL_UART_Init>
 8001828:	4603      	mov	r3, r0
 800182a:	2b00      	cmp	r3, #0
 800182c:	d001      	beq.n	8001832 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800182e:	f000 f8cb 	bl	80019c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	200002dc 	.word	0x200002dc
 800183c:	40013800 	.word	0x40013800

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001846:	f107 0310 	add.w	r3, r7, #16
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	605a      	str	r2, [r3, #4]
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	4b33      	ldr	r3, [pc, #204]	; (8001924 <MX_GPIO_Init+0xe4>)
 8001856:	699b      	ldr	r3, [r3, #24]
 8001858:	4a32      	ldr	r2, [pc, #200]	; (8001924 <MX_GPIO_Init+0xe4>)
 800185a:	f043 0310 	orr.w	r3, r3, #16
 800185e:	6193      	str	r3, [r2, #24]
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <MX_GPIO_Init+0xe4>)
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <MX_GPIO_Init+0xe4>)
 800186e:	699b      	ldr	r3, [r3, #24]
 8001870:	4a2c      	ldr	r2, [pc, #176]	; (8001924 <MX_GPIO_Init+0xe4>)
 8001872:	f043 0320 	orr.w	r3, r3, #32
 8001876:	6193      	str	r3, [r2, #24]
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <MX_GPIO_Init+0xe4>)
 800187a:	699b      	ldr	r3, [r3, #24]
 800187c:	f003 0320 	and.w	r3, r3, #32
 8001880:	60bb      	str	r3, [r7, #8]
 8001882:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001884:	4b27      	ldr	r3, [pc, #156]	; (8001924 <MX_GPIO_Init+0xe4>)
 8001886:	699b      	ldr	r3, [r3, #24]
 8001888:	4a26      	ldr	r2, [pc, #152]	; (8001924 <MX_GPIO_Init+0xe4>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6193      	str	r3, [r2, #24]
 8001890:	4b24      	ldr	r3, [pc, #144]	; (8001924 <MX_GPIO_Init+0xe4>)
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	607b      	str	r3, [r7, #4]
 800189a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800189c:	4b21      	ldr	r3, [pc, #132]	; (8001924 <MX_GPIO_Init+0xe4>)
 800189e:	699b      	ldr	r3, [r3, #24]
 80018a0:	4a20      	ldr	r2, [pc, #128]	; (8001924 <MX_GPIO_Init+0xe4>)
 80018a2:	f043 0308 	orr.w	r3, r3, #8
 80018a6:	6193      	str	r3, [r2, #24]
 80018a8:	4b1e      	ldr	r3, [pc, #120]	; (8001924 <MX_GPIO_Init+0xe4>)
 80018aa:	699b      	ldr	r3, [r3, #24]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	603b      	str	r3, [r7, #0]
 80018b2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80018b4:	2200      	movs	r2, #0
 80018b6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018ba:	481b      	ldr	r0, [pc, #108]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018bc:	f001 fddf 	bl	800347e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, GPIO_PIN_RESET);
 80018c0:	2200      	movs	r2, #0
 80018c2:	2102      	movs	r1, #2
 80018c4:	4819      	ldr	r0, [pc, #100]	; (800192c <MX_GPIO_Init+0xec>)
 80018c6:	f001 fdda 	bl	800347e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80018ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d0:	2301      	movs	r3, #1
 80018d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d4:	2300      	movs	r3, #0
 80018d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018d8:	2302      	movs	r3, #2
 80018da:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018dc:	f107 0310 	add.w	r3, r7, #16
 80018e0:	4619      	mov	r1, r3
 80018e2:	4811      	ldr	r0, [pc, #68]	; (8001928 <MX_GPIO_Init+0xe8>)
 80018e4:	f001 fc30 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3
                           PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80018e8:	239f      	movs	r3, #159	; 0x9f
 80018ea:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018ec:	2300      	movs	r3, #0
 80018ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f0:	2300      	movs	r3, #0
 80018f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018f4:	f107 0310 	add.w	r3, r7, #16
 80018f8:	4619      	mov	r1, r3
 80018fa:	480d      	ldr	r0, [pc, #52]	; (8001930 <MX_GPIO_Init+0xf0>)
 80018fc:	f001 fc24 	bl	8003148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001900:	2302      	movs	r3, #2
 8001902:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001904:	2301      	movs	r3, #1
 8001906:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001908:	2300      	movs	r3, #0
 800190a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800190c:	2302      	movs	r3, #2
 800190e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001910:	f107 0310 	add.w	r3, r7, #16
 8001914:	4619      	mov	r1, r3
 8001916:	4805      	ldr	r0, [pc, #20]	; (800192c <MX_GPIO_Init+0xec>)
 8001918:	f001 fc16 	bl	8003148 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800191c:	bf00      	nop
 800191e:	3720      	adds	r7, #32
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	40011000 	.word	0x40011000
 800192c:	40010c00 	.word	0x40010c00
 8001930:	40010800 	.word	0x40010800

08001934 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
//ADC Interrupt
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b082      	sub	sp, #8
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
	  if(hadc->Instance == hadc1.Instance)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b07      	ldr	r3, [pc, #28]	; (8001960 <HAL_ADC_ConvCpltCallback+0x2c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	429a      	cmp	r2, r3
 8001946:	d106      	bne.n	8001956 <HAL_ADC_ConvCpltCallback+0x22>
	  {
		  ADC_Data =  HAL_ADC_GetValue(&hadc1);
 8001948:	4805      	ldr	r0, [pc, #20]	; (8001960 <HAL_ADC_ConvCpltCallback+0x2c>)
 800194a:	f000 ffcd 	bl	80028e8 <HAL_ADC_GetValue>
 800194e:	4603      	mov	r3, r0
 8001950:	b29a      	uxth	r2, r3
 8001952:	4b04      	ldr	r3, [pc, #16]	; (8001964 <HAL_ADC_ConvCpltCallback+0x30>)
 8001954:	801a      	strh	r2, [r3, #0]

	  }
}
 8001956:	bf00      	nop
 8001958:	3708      	adds	r7, #8
 800195a:	46bd      	mov	sp, r7
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000210 	.word	0x20000210
 8001964:	20000328 	.word	0x20000328

08001968 <HAL_UART_RxCpltCallback>:
//UART Interrupt
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b082      	sub	sp, #8
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]

  if(huart->Instance==USART1)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a10      	ldr	r2, [pc, #64]	; (80019b8 <HAL_UART_RxCpltCallback+0x50>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d119      	bne.n	80019ae <HAL_UART_RxCpltCallback+0x46>
  {

    if(rxData==78) // Ascii value of 'N' is 78 (N for NO)
 800197a:	4b10      	ldr	r3, [pc, #64]	; (80019bc <HAL_UART_RxCpltCallback+0x54>)
 800197c:	781b      	ldrb	r3, [r3, #0]
 800197e:	2b4e      	cmp	r3, #78	; 0x4e
 8001980:	d106      	bne.n	8001990 <HAL_UART_RxCpltCallback+0x28>
    {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 0);
 8001982:	2200      	movs	r2, #0
 8001984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001988:	480d      	ldr	r0, [pc, #52]	; (80019c0 <HAL_UART_RxCpltCallback+0x58>)
 800198a:	f001 fd78 	bl	800347e <HAL_GPIO_WritePin>
 800198e:	e009      	b.n	80019a4 <HAL_UART_RxCpltCallback+0x3c>
    }
    else if (rxData==89) // Ascii value of 'Y' is 89 (Y for YES)
 8001990:	4b0a      	ldr	r3, [pc, #40]	; (80019bc <HAL_UART_RxCpltCallback+0x54>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b59      	cmp	r3, #89	; 0x59
 8001996:	d105      	bne.n	80019a4 <HAL_UART_RxCpltCallback+0x3c>
    {
    	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, 1);
 8001998:	2201      	movs	r2, #1
 800199a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800199e:	4808      	ldr	r0, [pc, #32]	; (80019c0 <HAL_UART_RxCpltCallback+0x58>)
 80019a0:	f001 fd6d 	bl	800347e <HAL_GPIO_WritePin>
    }
    HAL_UART_Receive_IT(&huart1,&rxData,1); // Enabling interrupt receive again
 80019a4:	2201      	movs	r2, #1
 80019a6:	4905      	ldr	r1, [pc, #20]	; (80019bc <HAL_UART_RxCpltCallback+0x54>)
 80019a8:	4806      	ldr	r0, [pc, #24]	; (80019c4 <HAL_UART_RxCpltCallback+0x5c>)
 80019aa:	f003 fd19 	bl	80053e0 <HAL_UART_Receive_IT>
  }
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40013800 	.word	0x40013800
 80019bc:	20000324 	.word	0x20000324
 80019c0:	40011000 	.word	0x40011000
 80019c4:	200002dc 	.word	0x200002dc

080019c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019cc:	b672      	cpsid	i
}
 80019ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <Error_Handler+0x8>

080019d2 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80019d6:	bf00      	nop
 80019d8:	46bd      	mov	sp, r7
 80019da:	bc80      	pop	{r7}
 80019dc:	4770      	bx	lr
	...

080019e0 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af04      	add	r7, sp, #16
 80019e6:	4603      	mov	r3, r0
 80019e8:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80019ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ee:	9302      	str	r3, [sp, #8]
 80019f0:	2301      	movs	r3, #1
 80019f2:	9301      	str	r3, [sp, #4]
 80019f4:	1dfb      	adds	r3, r7, #7
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	2301      	movs	r3, #1
 80019fa:	2200      	movs	r2, #0
 80019fc:	2178      	movs	r1, #120	; 0x78
 80019fe:	4803      	ldr	r0, [pc, #12]	; (8001a0c <ssd1306_WriteCommand+0x2c>)
 8001a00:	f001 fe9a 	bl	8003738 <HAL_I2C_Mem_Write>
}
 8001a04:	bf00      	nop
 8001a06:	3708      	adds	r7, #8
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	20000240 	.word	0x20000240

08001a10 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af04      	add	r7, sp, #16
 8001a16:	6078      	str	r0, [r7, #4]
 8001a18:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	b29b      	uxth	r3, r3
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a22:	9202      	str	r2, [sp, #8]
 8001a24:	9301      	str	r3, [sp, #4]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	9300      	str	r3, [sp, #0]
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	2240      	movs	r2, #64	; 0x40
 8001a2e:	2178      	movs	r1, #120	; 0x78
 8001a30:	4803      	ldr	r0, [pc, #12]	; (8001a40 <ssd1306_WriteData+0x30>)
 8001a32:	f001 fe81 	bl	8003738 <HAL_I2C_Mem_Write>
}
 8001a36:	bf00      	nop
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000240 	.word	0x20000240

08001a44 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8001a44:	b580      	push	{r7, lr}
 8001a46:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8001a48:	f7ff ffc3 	bl	80019d2 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(5);
 8001a4c:	2005      	movs	r0, #5
 8001a4e:	f000 fd99 	bl	8002584 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8001a52:	2000      	movs	r0, #0
 8001a54:	f000 fa92 	bl	8001f7c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8001a58:	2020      	movs	r0, #32
 8001a5a:	f7ff ffc1 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff ffbe 	bl	80019e0 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001a64:	20b0      	movs	r0, #176	; 0xb0
 8001a66:	f7ff ffbb 	bl	80019e0 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8001a6a:	20c8      	movs	r0, #200	; 0xc8
 8001a6c:	f7ff ffb8 	bl	80019e0 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8001a70:	2000      	movs	r0, #0
 8001a72:	f7ff ffb5 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8001a76:	2010      	movs	r0, #16
 8001a78:	f7ff ffb2 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8001a7c:	2040      	movs	r0, #64	; 0x40
 8001a7e:	f7ff ffaf 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8001a82:	20ff      	movs	r0, #255	; 0xff
 8001a84:	f000 fa67 	bl	8001f56 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8001a88:	20a1      	movs	r0, #161	; 0xa1
 8001a8a:	f7ff ffa9 	bl	80019e0 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8001a8e:	20a6      	movs	r0, #166	; 0xa6
 8001a90:	f7ff ffa6 	bl	80019e0 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8001a94:	20a8      	movs	r0, #168	; 0xa8
 8001a96:	f7ff ffa3 	bl	80019e0 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8001a9a:	203f      	movs	r0, #63	; 0x3f
 8001a9c:	f7ff ffa0 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8001aa0:	20a4      	movs	r0, #164	; 0xa4
 8001aa2:	f7ff ff9d 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8001aa6:	20d3      	movs	r0, #211	; 0xd3
 8001aa8:	f7ff ff9a 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8001aac:	2000      	movs	r0, #0
 8001aae:	f7ff ff97 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8001ab2:	20d5      	movs	r0, #213	; 0xd5
 8001ab4:	f7ff ff94 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8001ab8:	20f0      	movs	r0, #240	; 0xf0
 8001aba:	f7ff ff91 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8001abe:	20d9      	movs	r0, #217	; 0xd9
 8001ac0:	f7ff ff8e 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8001ac4:	2022      	movs	r0, #34	; 0x22
 8001ac6:	f7ff ff8b 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8001aca:	20da      	movs	r0, #218	; 0xda
 8001acc:	f7ff ff88 	bl	80019e0 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8001ad0:	2012      	movs	r0, #18
 8001ad2:	f7ff ff85 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8001ad6:	20db      	movs	r0, #219	; 0xdb
 8001ad8:	f7ff ff82 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8001adc:	2020      	movs	r0, #32
 8001ade:	f7ff ff7f 	bl	80019e0 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8001ae2:	208d      	movs	r0, #141	; 0x8d
 8001ae4:	f7ff ff7c 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8001ae8:	2014      	movs	r0, #20
 8001aea:	f7ff ff79 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8001aee:	2001      	movs	r0, #1
 8001af0:	f000 fa44 	bl	8001f7c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8001af4:	2000      	movs	r0, #0
 8001af6:	f000 f80f 	bl	8001b18 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8001afa:	f000 f825 	bl	8001b48 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <ssd1306_Init+0xd0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8001b04:	4b03      	ldr	r3, [pc, #12]	; (8001b14 <ssd1306_Init+0xd0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8001b0a:	4b02      	ldr	r3, [pc, #8]	; (8001b14 <ssd1306_Init+0xd0>)
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	711a      	strb	r2, [r3, #4]
}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	2000072c 	.word	0x2000072c

08001b18 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b082      	sub	sp, #8
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	4603      	mov	r3, r0
 8001b20:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <ssd1306_Fill+0x14>
 8001b28:	2300      	movs	r3, #0
 8001b2a:	e000      	b.n	8001b2e <ssd1306_Fill+0x16>
 8001b2c:	23ff      	movs	r3, #255	; 0xff
 8001b2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b32:	4619      	mov	r1, r3
 8001b34:	4803      	ldr	r0, [pc, #12]	; (8001b44 <ssd1306_Fill+0x2c>)
 8001b36:	f004 ff0e 	bl	8006956 <memset>
}
 8001b3a:	bf00      	nop
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	2000032c 	.word	0x2000032c

08001b48 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b4e:	2300      	movs	r3, #0
 8001b50:	71fb      	strb	r3, [r7, #7]
 8001b52:	e016      	b.n	8001b82 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	3b50      	subs	r3, #80	; 0x50
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	f7ff ff40 	bl	80019e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8001b60:	2000      	movs	r0, #0
 8001b62:	f7ff ff3d 	bl	80019e0 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8001b66:	2010      	movs	r0, #16
 8001b68:	f7ff ff3a 	bl	80019e0 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8001b6c:	79fb      	ldrb	r3, [r7, #7]
 8001b6e:	01db      	lsls	r3, r3, #7
 8001b70:	4a08      	ldr	r2, [pc, #32]	; (8001b94 <ssd1306_UpdateScreen+0x4c>)
 8001b72:	4413      	add	r3, r2
 8001b74:	2180      	movs	r1, #128	; 0x80
 8001b76:	4618      	mov	r0, r3
 8001b78:	f7ff ff4a 	bl	8001a10 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	71fb      	strb	r3, [r7, #7]
 8001b82:	79fb      	ldrb	r3, [r7, #7]
 8001b84:	2b07      	cmp	r3, #7
 8001b86:	d9e5      	bls.n	8001b54 <ssd1306_UpdateScreen+0xc>
    }
}
 8001b88:	bf00      	nop
 8001b8a:	bf00      	nop
 8001b8c:	3708      	adds	r7, #8
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000032c 	.word	0x2000032c

08001b98 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	71fb      	strb	r3, [r7, #7]
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	71bb      	strb	r3, [r7, #6]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	db3d      	blt.n	8001c2e <ssd1306_DrawPixel+0x96>
 8001bb2:	79bb      	ldrb	r3, [r7, #6]
 8001bb4:	2b3f      	cmp	r3, #63	; 0x3f
 8001bb6:	d83a      	bhi.n	8001c2e <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8001bb8:	797b      	ldrb	r3, [r7, #5]
 8001bba:	2b01      	cmp	r3, #1
 8001bbc:	d11a      	bne.n	8001bf4 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001bbe:	79fa      	ldrb	r2, [r7, #7]
 8001bc0:	79bb      	ldrb	r3, [r7, #6]
 8001bc2:	08db      	lsrs	r3, r3, #3
 8001bc4:	b2d8      	uxtb	r0, r3
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	01db      	lsls	r3, r3, #7
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a1a      	ldr	r2, [pc, #104]	; (8001c38 <ssd1306_DrawPixel+0xa0>)
 8001bce:	5cd3      	ldrb	r3, [r2, r3]
 8001bd0:	b25a      	sxtb	r2, r3
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	f003 0307 	and.w	r3, r3, #7
 8001bd8:	2101      	movs	r1, #1
 8001bda:	fa01 f303 	lsl.w	r3, r1, r3
 8001bde:	b25b      	sxtb	r3, r3
 8001be0:	4313      	orrs	r3, r2
 8001be2:	b259      	sxtb	r1, r3
 8001be4:	79fa      	ldrb	r2, [r7, #7]
 8001be6:	4603      	mov	r3, r0
 8001be8:	01db      	lsls	r3, r3, #7
 8001bea:	4413      	add	r3, r2
 8001bec:	b2c9      	uxtb	r1, r1
 8001bee:	4a12      	ldr	r2, [pc, #72]	; (8001c38 <ssd1306_DrawPixel+0xa0>)
 8001bf0:	54d1      	strb	r1, [r2, r3]
 8001bf2:	e01d      	b.n	8001c30 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001bf4:	79fa      	ldrb	r2, [r7, #7]
 8001bf6:	79bb      	ldrb	r3, [r7, #6]
 8001bf8:	08db      	lsrs	r3, r3, #3
 8001bfa:	b2d8      	uxtb	r0, r3
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	01db      	lsls	r3, r3, #7
 8001c00:	4413      	add	r3, r2
 8001c02:	4a0d      	ldr	r2, [pc, #52]	; (8001c38 <ssd1306_DrawPixel+0xa0>)
 8001c04:	5cd3      	ldrb	r3, [r2, r3]
 8001c06:	b25a      	sxtb	r2, r3
 8001c08:	79bb      	ldrb	r3, [r7, #6]
 8001c0a:	f003 0307 	and.w	r3, r3, #7
 8001c0e:	2101      	movs	r1, #1
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	b25b      	sxtb	r3, r3
 8001c16:	43db      	mvns	r3, r3
 8001c18:	b25b      	sxtb	r3, r3
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	b259      	sxtb	r1, r3
 8001c1e:	79fa      	ldrb	r2, [r7, #7]
 8001c20:	4603      	mov	r3, r0
 8001c22:	01db      	lsls	r3, r3, #7
 8001c24:	4413      	add	r3, r2
 8001c26:	b2c9      	uxtb	r1, r1
 8001c28:	4a03      	ldr	r2, [pc, #12]	; (8001c38 <ssd1306_DrawPixel+0xa0>)
 8001c2a:	54d1      	strb	r1, [r2, r3]
 8001c2c:	e000      	b.n	8001c30 <ssd1306_DrawPixel+0x98>
        return;
 8001c2e:	bf00      	nop
    }
}
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr
 8001c38:	2000032c 	.word	0x2000032c

08001c3c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8001c3c:	b590      	push	{r4, r7, lr}
 8001c3e:	b089      	sub	sp, #36	; 0x24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4604      	mov	r4, r0
 8001c44:	1d38      	adds	r0, r7, #4
 8001c46:	e880 0006 	stmia.w	r0, {r1, r2}
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	4623      	mov	r3, r4
 8001c4e:	73fb      	strb	r3, [r7, #15]
 8001c50:	4613      	mov	r3, r2
 8001c52:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
 8001c56:	2b1f      	cmp	r3, #31
 8001c58:	d902      	bls.n	8001c60 <ssd1306_WriteChar+0x24>
 8001c5a:	7bfb      	ldrb	r3, [r7, #15]
 8001c5c:	2b7e      	cmp	r3, #126	; 0x7e
 8001c5e:	d901      	bls.n	8001c64 <ssd1306_WriteChar+0x28>
        return 0;
 8001c60:	2300      	movs	r3, #0
 8001c62:	e06d      	b.n	8001d40 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c64:	4b38      	ldr	r3, [pc, #224]	; (8001d48 <ssd1306_WriteChar+0x10c>)
 8001c66:	881b      	ldrh	r3, [r3, #0]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	793b      	ldrb	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	2b80      	cmp	r3, #128	; 0x80
 8001c70:	dc06      	bgt.n	8001c80 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8001c72:	4b35      	ldr	r3, [pc, #212]	; (8001d48 <ssd1306_WriteChar+0x10c>)
 8001c74:	885b      	ldrh	r3, [r3, #2]
 8001c76:	461a      	mov	r2, r3
 8001c78:	797b      	ldrb	r3, [r7, #5]
 8001c7a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8001c7c:	2b40      	cmp	r3, #64	; 0x40
 8001c7e:	dd01      	ble.n	8001c84 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001c80:	2300      	movs	r3, #0
 8001c82:	e05d      	b.n	8001d40 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8001c84:	2300      	movs	r3, #0
 8001c86:	61fb      	str	r3, [r7, #28]
 8001c88:	e04c      	b.n	8001d24 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	7bfb      	ldrb	r3, [r7, #15]
 8001c8e:	3b20      	subs	r3, #32
 8001c90:	7979      	ldrb	r1, [r7, #5]
 8001c92:	fb01 f303 	mul.w	r3, r1, r3
 8001c96:	4619      	mov	r1, r3
 8001c98:	69fb      	ldr	r3, [r7, #28]
 8001c9a:	440b      	add	r3, r1
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	4413      	add	r3, r2
 8001ca0:	881b      	ldrh	r3, [r3, #0]
 8001ca2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	61bb      	str	r3, [r7, #24]
 8001ca8:	e034      	b.n	8001d14 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001caa:	697a      	ldr	r2, [r7, #20]
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d012      	beq.n	8001ce0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001cba:	4b23      	ldr	r3, [pc, #140]	; (8001d48 <ssd1306_WriteChar+0x10c>)
 8001cbc:	881b      	ldrh	r3, [r3, #0]
 8001cbe:	b2da      	uxtb	r2, r3
 8001cc0:	69bb      	ldr	r3, [r7, #24]
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	4413      	add	r3, r2
 8001cc6:	b2d8      	uxtb	r0, r3
 8001cc8:	4b1f      	ldr	r3, [pc, #124]	; (8001d48 <ssd1306_WriteChar+0x10c>)
 8001cca:	885b      	ldrh	r3, [r3, #2]
 8001ccc:	b2da      	uxtb	r2, r3
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	b2db      	uxtb	r3, r3
 8001cd2:	4413      	add	r3, r2
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	7bba      	ldrb	r2, [r7, #14]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	f7ff ff5d 	bl	8001b98 <ssd1306_DrawPixel>
 8001cde:	e016      	b.n	8001d0e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001ce0:	4b19      	ldr	r3, [pc, #100]	; (8001d48 <ssd1306_WriteChar+0x10c>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	b2da      	uxtb	r2, r3
 8001ce6:	69bb      	ldr	r3, [r7, #24]
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	4413      	add	r3, r2
 8001cec:	b2d8      	uxtb	r0, r3
 8001cee:	4b16      	ldr	r3, [pc, #88]	; (8001d48 <ssd1306_WriteChar+0x10c>)
 8001cf0:	885b      	ldrh	r3, [r3, #2]
 8001cf2:	b2da      	uxtb	r2, r3
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	b2db      	uxtb	r3, r3
 8001cf8:	4413      	add	r3, r2
 8001cfa:	b2d9      	uxtb	r1, r3
 8001cfc:	7bbb      	ldrb	r3, [r7, #14]
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	bf0c      	ite	eq
 8001d02:	2301      	moveq	r3, #1
 8001d04:	2300      	movne	r3, #0
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	461a      	mov	r2, r3
 8001d0a:	f7ff ff45 	bl	8001b98 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001d0e:	69bb      	ldr	r3, [r7, #24]
 8001d10:	3301      	adds	r3, #1
 8001d12:	61bb      	str	r3, [r7, #24]
 8001d14:	793b      	ldrb	r3, [r7, #4]
 8001d16:	461a      	mov	r2, r3
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d3c5      	bcc.n	8001caa <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	797b      	ldrb	r3, [r7, #5]
 8001d26:	461a      	mov	r2, r3
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d3ad      	bcc.n	8001c8a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <ssd1306_WriteChar+0x10c>)
 8001d30:	881a      	ldrh	r2, [r3, #0]
 8001d32:	793b      	ldrb	r3, [r7, #4]
 8001d34:	b29b      	uxth	r3, r3
 8001d36:	4413      	add	r3, r2
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b03      	ldr	r3, [pc, #12]	; (8001d48 <ssd1306_WriteChar+0x10c>)
 8001d3c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8001d3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3724      	adds	r7, #36	; 0x24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd90      	pop	{r4, r7, pc}
 8001d48:	2000072c 	.word	0x2000072c

08001d4c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b084      	sub	sp, #16
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	60f8      	str	r0, [r7, #12]
 8001d54:	1d38      	adds	r0, r7, #4
 8001d56:	e880 0006 	stmia.w	r0, {r1, r2}
 8001d5a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8001d5c:	e012      	b.n	8001d84 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	7818      	ldrb	r0, [r3, #0]
 8001d62:	78fb      	ldrb	r3, [r7, #3]
 8001d64:	1d3a      	adds	r2, r7, #4
 8001d66:	ca06      	ldmia	r2, {r1, r2}
 8001d68:	f7ff ff68 	bl	8001c3c <ssd1306_WriteChar>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	461a      	mov	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	d002      	beq.n	8001d7e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	781b      	ldrb	r3, [r3, #0]
 8001d7c:	e008      	b.n	8001d90 <ssd1306_WriteString+0x44>
        }
        str++;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	3301      	adds	r3, #1
 8001d82:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	781b      	ldrb	r3, [r3, #0]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d1e8      	bne.n	8001d5e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	781b      	ldrb	r3, [r3, #0]
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3710      	adds	r7, #16
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}

08001d98 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	4603      	mov	r3, r0
 8001da0:	460a      	mov	r2, r1
 8001da2:	71fb      	strb	r3, [r7, #7]
 8001da4:	4613      	mov	r3, r2
 8001da6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001da8:	79fb      	ldrb	r3, [r7, #7]
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b05      	ldr	r3, [pc, #20]	; (8001dc4 <ssd1306_SetCursor+0x2c>)
 8001dae:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001db0:	79bb      	ldrb	r3, [r7, #6]
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b03      	ldr	r3, [pc, #12]	; (8001dc4 <ssd1306_SetCursor+0x2c>)
 8001db6:	805a      	strh	r2, [r3, #2]
}
 8001db8:	bf00      	nop
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	bc80      	pop	{r7}
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	2000072c 	.word	0x2000072c

08001dc8 <ssd1306_Line>:

/* Draw line by Bresenhem's algorithm */
void ssd1306_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, SSD1306_COLOR color) {
 8001dc8:	b590      	push	{r4, r7, lr}
 8001dca:	b089      	sub	sp, #36	; 0x24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4604      	mov	r4, r0
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	71fb      	strb	r3, [r7, #7]
 8001dda:	4603      	mov	r3, r0
 8001ddc:	71bb      	strb	r3, [r7, #6]
 8001dde:	460b      	mov	r3, r1
 8001de0:	717b      	strb	r3, [r7, #5]
 8001de2:	4613      	mov	r3, r2
 8001de4:	713b      	strb	r3, [r7, #4]
    int32_t deltaX = abs(x2 - x1);
 8001de6:	797a      	ldrb	r2, [r7, #5]
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bfb8      	it	lt
 8001df0:	425b      	neglt	r3, r3
 8001df2:	61bb      	str	r3, [r7, #24]
    int32_t deltaY = abs(y2 - y1);
 8001df4:	793a      	ldrb	r2, [r7, #4]
 8001df6:	79bb      	ldrb	r3, [r7, #6]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	bfb8      	it	lt
 8001dfe:	425b      	neglt	r3, r3
 8001e00:	617b      	str	r3, [r7, #20]
    int32_t signX = ((x1 < x2) ? 1 : -1);
 8001e02:	79fa      	ldrb	r2, [r7, #7]
 8001e04:	797b      	ldrb	r3, [r7, #5]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d201      	bcs.n	8001e0e <ssd1306_Line+0x46>
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e001      	b.n	8001e12 <ssd1306_Line+0x4a>
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e12:	613b      	str	r3, [r7, #16]
    int32_t signY = ((y1 < y2) ? 1 : -1);
 8001e14:	79ba      	ldrb	r2, [r7, #6]
 8001e16:	793b      	ldrb	r3, [r7, #4]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d201      	bcs.n	8001e20 <ssd1306_Line+0x58>
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e001      	b.n	8001e24 <ssd1306_Line+0x5c>
 8001e20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e24:	60fb      	str	r3, [r7, #12]
    int32_t error = deltaX - deltaY;
 8001e26:	69ba      	ldr	r2, [r7, #24]
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	61fb      	str	r3, [r7, #28]
    int32_t error2;
    
    ssd1306_DrawPixel(x2, y2, color);
 8001e2e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e32:	7939      	ldrb	r1, [r7, #4]
 8001e34:	797b      	ldrb	r3, [r7, #5]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff feae 	bl	8001b98 <ssd1306_DrawPixel>

    while((x1 != x2) || (y1 != y2)) {
 8001e3c:	e024      	b.n	8001e88 <ssd1306_Line+0xc0>
        ssd1306_DrawPixel(x1, y1, color);
 8001e3e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e42:	79b9      	ldrb	r1, [r7, #6]
 8001e44:	79fb      	ldrb	r3, [r7, #7]
 8001e46:	4618      	mov	r0, r3
 8001e48:	f7ff fea6 	bl	8001b98 <ssd1306_DrawPixel>
        error2 = error * 2;
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	005b      	lsls	r3, r3, #1
 8001e50:	60bb      	str	r3, [r7, #8]
        if(error2 > -deltaY) {
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	425b      	negs	r3, r3
 8001e56:	68ba      	ldr	r2, [r7, #8]
 8001e58:	429a      	cmp	r2, r3
 8001e5a:	dd08      	ble.n	8001e6e <ssd1306_Line+0xa6>
            error -= deltaY;
 8001e5c:	69fa      	ldr	r2, [r7, #28]
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	61fb      	str	r3, [r7, #28]
            x1 += signX;
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	b2da      	uxtb	r2, r3
 8001e68:	79fb      	ldrb	r3, [r7, #7]
 8001e6a:	4413      	add	r3, r2
 8001e6c:	71fb      	strb	r3, [r7, #7]
        }
        
        if(error2 < deltaX) {
 8001e6e:	68ba      	ldr	r2, [r7, #8]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	da08      	bge.n	8001e88 <ssd1306_Line+0xc0>
            error += deltaX;
 8001e76:	69fa      	ldr	r2, [r7, #28]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	61fb      	str	r3, [r7, #28]
            y1 += signY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	b2da      	uxtb	r2, r3
 8001e82:	79bb      	ldrb	r3, [r7, #6]
 8001e84:	4413      	add	r3, r2
 8001e86:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2)) {
 8001e88:	79fa      	ldrb	r2, [r7, #7]
 8001e8a:	797b      	ldrb	r3, [r7, #5]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d1d6      	bne.n	8001e3e <ssd1306_Line+0x76>
 8001e90:	79ba      	ldrb	r2, [r7, #6]
 8001e92:	793b      	ldrb	r3, [r7, #4]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1d2      	bne.n	8001e3e <ssd1306_Line+0x76>
        }
    }
    return;
 8001e98:	bf00      	nop
}
 8001e9a:	3724      	adds	r7, #36	; 0x24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}

08001ea0 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b084      	sub	sp, #16
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	603a      	str	r2, [r7, #0]
 8001ea8:	461a      	mov	r2, r3
 8001eaa:	4603      	mov	r3, r0
 8001eac:	71fb      	strb	r3, [r7, #7]
 8001eae:	460b      	mov	r3, r1
 8001eb0:	71bb      	strb	r3, [r7, #6]
 8001eb2:	4613      	mov	r3, r2
 8001eb4:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001eb6:	797b      	ldrb	r3, [r7, #5]
 8001eb8:	3307      	adds	r3, #7
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	da00      	bge.n	8001ec0 <ssd1306_DrawBitmap+0x20>
 8001ebe:	3307      	adds	r3, #7
 8001ec0:	10db      	asrs	r3, r3, #3
 8001ec2:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8001ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	db3e      	blt.n	8001f4e <ssd1306_DrawBitmap+0xae>
 8001ed0:	79bb      	ldrb	r3, [r7, #6]
 8001ed2:	2b3f      	cmp	r3, #63	; 0x3f
 8001ed4:	d83b      	bhi.n	8001f4e <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	73bb      	strb	r3, [r7, #14]
 8001eda:	e033      	b.n	8001f44 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001edc:	2300      	movs	r3, #0
 8001ede:	737b      	strb	r3, [r7, #13]
 8001ee0:	e026      	b.n	8001f30 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8001ee2:	7b7b      	ldrb	r3, [r7, #13]
 8001ee4:	f003 0307 	and.w	r3, r3, #7
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d003      	beq.n	8001ef4 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8001eec:	7bfb      	ldrb	r3, [r7, #15]
 8001eee:	005b      	lsls	r3, r3, #1
 8001ef0:	73fb      	strb	r3, [r7, #15]
 8001ef2:	e00d      	b.n	8001f10 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001ef4:	7bbb      	ldrb	r3, [r7, #14]
 8001ef6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001efa:	fb02 f303 	mul.w	r3, r2, r3
 8001efe:	7b7a      	ldrb	r2, [r7, #13]
 8001f00:	08d2      	lsrs	r2, r2, #3
 8001f02:	b2d2      	uxtb	r2, r2
 8001f04:	4413      	add	r3, r2
 8001f06:	461a      	mov	r2, r3
 8001f08:	683b      	ldr	r3, [r7, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	781b      	ldrb	r3, [r3, #0]
 8001f0e:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8001f10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	da08      	bge.n	8001f2a <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8001f18:	79fa      	ldrb	r2, [r7, #7]
 8001f1a:	7b7b      	ldrb	r3, [r7, #13]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b2db      	uxtb	r3, r3
 8001f20:	7f3a      	ldrb	r2, [r7, #28]
 8001f22:	79b9      	ldrb	r1, [r7, #6]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff fe37 	bl	8001b98 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001f2a:	7b7b      	ldrb	r3, [r7, #13]
 8001f2c:	3301      	adds	r3, #1
 8001f2e:	737b      	strb	r3, [r7, #13]
 8001f30:	7b7a      	ldrb	r2, [r7, #13]
 8001f32:	797b      	ldrb	r3, [r7, #5]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d3d4      	bcc.n	8001ee2 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	73bb      	strb	r3, [r7, #14]
 8001f3e:	79bb      	ldrb	r3, [r7, #6]
 8001f40:	3301      	adds	r3, #1
 8001f42:	71bb      	strb	r3, [r7, #6]
 8001f44:	7bba      	ldrb	r2, [r7, #14]
 8001f46:	7e3b      	ldrb	r3, [r7, #24]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d3c7      	bcc.n	8001edc <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8001f4c:	e000      	b.n	8001f50 <ssd1306_DrawBitmap+0xb0>
        return;
 8001f4e:	bf00      	nop
}
 8001f50:	3710      	adds	r7, #16
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8001f56:	b580      	push	{r7, lr}
 8001f58:	b084      	sub	sp, #16
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8001f60:	2381      	movs	r3, #129	; 0x81
 8001f62:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8001f64:	7bfb      	ldrb	r3, [r7, #15]
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7ff fd3a 	bl	80019e0 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001f6c:	79fb      	ldrb	r3, [r7, #7]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f7ff fd36 	bl	80019e0 <ssd1306_WriteCommand>
}
 8001f74:	bf00      	nop
 8001f76:	3710      	adds	r7, #16
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bd80      	pop	{r7, pc}

08001f7c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	4603      	mov	r3, r0
 8001f84:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001f86:	79fb      	ldrb	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d005      	beq.n	8001f98 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001f8c:	23af      	movs	r3, #175	; 0xaf
 8001f8e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8001f90:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <ssd1306_SetDisplayOn+0x38>)
 8001f92:	2201      	movs	r2, #1
 8001f94:	715a      	strb	r2, [r3, #5]
 8001f96:	e004      	b.n	8001fa2 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001f98:	23ae      	movs	r3, #174	; 0xae
 8001f9a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001f9c:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <ssd1306_SetDisplayOn+0x38>)
 8001f9e:	2200      	movs	r2, #0
 8001fa0:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8001fa2:	7bfb      	ldrb	r3, [r7, #15]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fd1b 	bl	80019e0 <ssd1306_WriteCommand>
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	2000072c 	.word	0x2000072c

08001fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001fbe:	4b15      	ldr	r3, [pc, #84]	; (8002014 <HAL_MspInit+0x5c>)
 8001fc0:	699b      	ldr	r3, [r3, #24]
 8001fc2:	4a14      	ldr	r2, [pc, #80]	; (8002014 <HAL_MspInit+0x5c>)
 8001fc4:	f043 0301 	orr.w	r3, r3, #1
 8001fc8:	6193      	str	r3, [r2, #24]
 8001fca:	4b12      	ldr	r3, [pc, #72]	; (8002014 <HAL_MspInit+0x5c>)
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	60bb      	str	r3, [r7, #8]
 8001fd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fd6:	4b0f      	ldr	r3, [pc, #60]	; (8002014 <HAL_MspInit+0x5c>)
 8001fd8:	69db      	ldr	r3, [r3, #28]
 8001fda:	4a0e      	ldr	r2, [pc, #56]	; (8002014 <HAL_MspInit+0x5c>)
 8001fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe0:	61d3      	str	r3, [r2, #28]
 8001fe2:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <HAL_MspInit+0x5c>)
 8001fe4:	69db      	ldr	r3, [r3, #28]
 8001fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fea:	607b      	str	r3, [r7, #4]
 8001fec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_MspInit+0x60>)
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	4a04      	ldr	r2, [pc, #16]	; (8002018 <HAL_MspInit+0x60>)
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800200a:	bf00      	nop
 800200c:	3714      	adds	r7, #20
 800200e:	46bd      	mov	sp, r7
 8002010:	bc80      	pop	{r7}
 8002012:	4770      	bx	lr
 8002014:	40021000 	.word	0x40021000
 8002018:	40010000 	.word	0x40010000

0800201c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002024:	f107 0310 	add.w	r3, r7, #16
 8002028:	2200      	movs	r2, #0
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	605a      	str	r2, [r3, #4]
 800202e:	609a      	str	r2, [r3, #8]
 8002030:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a18      	ldr	r2, [pc, #96]	; (8002098 <HAL_ADC_MspInit+0x7c>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d129      	bne.n	8002090 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800203c:	4b17      	ldr	r3, [pc, #92]	; (800209c <HAL_ADC_MspInit+0x80>)
 800203e:	699b      	ldr	r3, [r3, #24]
 8002040:	4a16      	ldr	r2, [pc, #88]	; (800209c <HAL_ADC_MspInit+0x80>)
 8002042:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002046:	6193      	str	r3, [r2, #24]
 8002048:	4b14      	ldr	r3, [pc, #80]	; (800209c <HAL_ADC_MspInit+0x80>)
 800204a:	699b      	ldr	r3, [r3, #24]
 800204c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002054:	4b11      	ldr	r3, [pc, #68]	; (800209c <HAL_ADC_MspInit+0x80>)
 8002056:	699b      	ldr	r3, [r3, #24]
 8002058:	4a10      	ldr	r2, [pc, #64]	; (800209c <HAL_ADC_MspInit+0x80>)
 800205a:	f043 0308 	orr.w	r3, r3, #8
 800205e:	6193      	str	r3, [r2, #24]
 8002060:	4b0e      	ldr	r3, [pc, #56]	; (800209c <HAL_ADC_MspInit+0x80>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0308 	and.w	r3, r3, #8
 8002068:	60bb      	str	r3, [r7, #8]
 800206a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800206c:	2301      	movs	r3, #1
 800206e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002070:	2303      	movs	r3, #3
 8002072:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002074:	f107 0310 	add.w	r3, r7, #16
 8002078:	4619      	mov	r1, r3
 800207a:	4809      	ldr	r0, [pc, #36]	; (80020a0 <HAL_ADC_MspInit+0x84>)
 800207c:	f001 f864 	bl	8003148 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 14, 0);
 8002080:	2200      	movs	r2, #0
 8002082:	210e      	movs	r1, #14
 8002084:	2012      	movs	r0, #18
 8002086:	f000 ff76 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800208a:	2012      	movs	r0, #18
 800208c:	f000 ff8f 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002090:	bf00      	nop
 8002092:	3720      	adds	r7, #32
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	40012400 	.word	0x40012400
 800209c:	40021000 	.word	0x40021000
 80020a0:	40010c00 	.word	0x40010c00

080020a4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b088      	sub	sp, #32
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ac:	f107 0310 	add.w	r3, r7, #16
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
 80020b4:	605a      	str	r2, [r3, #4]
 80020b6:	609a      	str	r2, [r3, #8]
 80020b8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C2)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	4a16      	ldr	r2, [pc, #88]	; (8002118 <HAL_I2C_MspInit+0x74>)
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d124      	bne.n	800210e <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020c4:	4b15      	ldr	r3, [pc, #84]	; (800211c <HAL_I2C_MspInit+0x78>)
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	4a14      	ldr	r2, [pc, #80]	; (800211c <HAL_I2C_MspInit+0x78>)
 80020ca:	f043 0308 	orr.w	r3, r3, #8
 80020ce:	6193      	str	r3, [r2, #24]
 80020d0:	4b12      	ldr	r3, [pc, #72]	; (800211c <HAL_I2C_MspInit+0x78>)
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	f003 0308 	and.w	r3, r3, #8
 80020d8:	60fb      	str	r3, [r7, #12]
 80020da:	68fb      	ldr	r3, [r7, #12]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80020dc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80020e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80020e2:	2312      	movs	r3, #18
 80020e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80020e6:	2303      	movs	r3, #3
 80020e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ea:	f107 0310 	add.w	r3, r7, #16
 80020ee:	4619      	mov	r1, r3
 80020f0:	480b      	ldr	r0, [pc, #44]	; (8002120 <HAL_I2C_MspInit+0x7c>)
 80020f2:	f001 f829 	bl	8003148 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80020f6:	4b09      	ldr	r3, [pc, #36]	; (800211c <HAL_I2C_MspInit+0x78>)
 80020f8:	69db      	ldr	r3, [r3, #28]
 80020fa:	4a08      	ldr	r2, [pc, #32]	; (800211c <HAL_I2C_MspInit+0x78>)
 80020fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002100:	61d3      	str	r3, [r2, #28]
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <HAL_I2C_MspInit+0x78>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800210a:	60bb      	str	r3, [r7, #8]
 800210c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 800210e:	bf00      	nop
 8002110:	3720      	adds	r7, #32
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40005800 	.word	0x40005800
 800211c:	40021000 	.word	0x40021000
 8002120:	40010c00 	.word	0x40010c00

08002124 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4a09      	ldr	r2, [pc, #36]	; (8002158 <HAL_TIM_Base_MspInit+0x34>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d10b      	bne.n	800214e <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002136:	4b09      	ldr	r3, [pc, #36]	; (800215c <HAL_TIM_Base_MspInit+0x38>)
 8002138:	69db      	ldr	r3, [r3, #28]
 800213a:	4a08      	ldr	r2, [pc, #32]	; (800215c <HAL_TIM_Base_MspInit+0x38>)
 800213c:	f043 0304 	orr.w	r3, r3, #4
 8002140:	61d3      	str	r3, [r2, #28]
 8002142:	4b06      	ldr	r3, [pc, #24]	; (800215c <HAL_TIM_Base_MspInit+0x38>)
 8002144:	69db      	ldr	r3, [r3, #28]
 8002146:	f003 0304 	and.w	r3, r3, #4
 800214a:	60fb      	str	r3, [r7, #12]
 800214c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 800214e:	bf00      	nop
 8002150:	3714      	adds	r7, #20
 8002152:	46bd      	mov	sp, r7
 8002154:	bc80      	pop	{r7}
 8002156:	4770      	bx	lr
 8002158:	40000800 	.word	0x40000800
 800215c:	40021000 	.word	0x40021000

08002160 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b088      	sub	sp, #32
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0310 	add.w	r3, r7, #16
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM4)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a10      	ldr	r2, [pc, #64]	; (80021bc <HAL_TIM_MspPostInit+0x5c>)
 800217c:	4293      	cmp	r3, r2
 800217e:	d118      	bne.n	80021b2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002180:	4b0f      	ldr	r3, [pc, #60]	; (80021c0 <HAL_TIM_MspPostInit+0x60>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a0e      	ldr	r2, [pc, #56]	; (80021c0 <HAL_TIM_MspPostInit+0x60>)
 8002186:	f043 0308 	orr.w	r3, r3, #8
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b0c      	ldr	r3, [pc, #48]	; (80021c0 <HAL_TIM_MspPostInit+0x60>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0308 	and.w	r3, r3, #8
 8002194:	60fb      	str	r3, [r7, #12]
 8002196:	68fb      	ldr	r3, [r7, #12]
    PB6     ------> TIM4_CH1
    PB7     ------> TIM4_CH2
    PB8     ------> TIM4_CH3
    PB9     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002198:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800219c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219e:	2302      	movs	r3, #2
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021a6:	f107 0310 	add.w	r3, r7, #16
 80021aa:	4619      	mov	r1, r3
 80021ac:	4805      	ldr	r0, [pc, #20]	; (80021c4 <HAL_TIM_MspPostInit+0x64>)
 80021ae:	f000 ffcb 	bl	8003148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80021b2:	bf00      	nop
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40000800 	.word	0x40000800
 80021c0:	40021000 	.word	0x40021000
 80021c4:	40010c00 	.word	0x40010c00

080021c8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021d0:	f107 0310 	add.w	r3, r7, #16
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	605a      	str	r2, [r3, #4]
 80021da:	609a      	str	r2, [r3, #8]
 80021dc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a20      	ldr	r2, [pc, #128]	; (8002264 <HAL_UART_MspInit+0x9c>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d139      	bne.n	800225c <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021e8:	4b1f      	ldr	r3, [pc, #124]	; (8002268 <HAL_UART_MspInit+0xa0>)
 80021ea:	699b      	ldr	r3, [r3, #24]
 80021ec:	4a1e      	ldr	r2, [pc, #120]	; (8002268 <HAL_UART_MspInit+0xa0>)
 80021ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80021f2:	6193      	str	r3, [r2, #24]
 80021f4:	4b1c      	ldr	r3, [pc, #112]	; (8002268 <HAL_UART_MspInit+0xa0>)
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021fc:	60fb      	str	r3, [r7, #12]
 80021fe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002200:	4b19      	ldr	r3, [pc, #100]	; (8002268 <HAL_UART_MspInit+0xa0>)
 8002202:	699b      	ldr	r3, [r3, #24]
 8002204:	4a18      	ldr	r2, [pc, #96]	; (8002268 <HAL_UART_MspInit+0xa0>)
 8002206:	f043 0304 	orr.w	r3, r3, #4
 800220a:	6193      	str	r3, [r2, #24]
 800220c:	4b16      	ldr	r3, [pc, #88]	; (8002268 <HAL_UART_MspInit+0xa0>)
 800220e:	699b      	ldr	r3, [r3, #24]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	60bb      	str	r3, [r7, #8]
 8002216:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002218:	f44f 7300 	mov.w	r3, #512	; 0x200
 800221c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800221e:	2302      	movs	r3, #2
 8002220:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002222:	2303      	movs	r3, #3
 8002224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002226:	f107 0310 	add.w	r3, r7, #16
 800222a:	4619      	mov	r1, r3
 800222c:	480f      	ldr	r0, [pc, #60]	; (800226c <HAL_UART_MspInit+0xa4>)
 800222e:	f000 ff8b 	bl	8003148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002232:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002236:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002240:	f107 0310 	add.w	r3, r7, #16
 8002244:	4619      	mov	r1, r3
 8002246:	4809      	ldr	r0, [pc, #36]	; (800226c <HAL_UART_MspInit+0xa4>)
 8002248:	f000 ff7e 	bl	8003148 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800224c:	2200      	movs	r2, #0
 800224e:	2105      	movs	r1, #5
 8002250:	2025      	movs	r0, #37	; 0x25
 8002252:	f000 fe90 	bl	8002f76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002256:	2025      	movs	r0, #37	; 0x25
 8002258:	f000 fea9 	bl	8002fae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800225c:	bf00      	nop
 800225e:	3720      	adds	r7, #32
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40013800 	.word	0x40013800
 8002268:	40021000 	.word	0x40021000
 800226c:	40010800 	.word	0x40010800

08002270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002270:	b480      	push	{r7}
 8002272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002274:	e7fe      	b.n	8002274 <NMI_Handler+0x4>

08002276 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002276:	b480      	push	{r7}
 8002278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800227a:	e7fe      	b.n	800227a <HardFault_Handler+0x4>

0800227c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002280:	e7fe      	b.n	8002280 <MemManage_Handler+0x4>

08002282 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002286:	e7fe      	b.n	8002286 <BusFault_Handler+0x4>

08002288 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002288:	b480      	push	{r7}
 800228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800228c:	e7fe      	b.n	800228c <UsageFault_Handler+0x4>

0800228e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002292:	bf00      	nop
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bc80      	pop	{r7}
 80022a4:	4770      	bx	lr

080022a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bc80      	pop	{r7}
 80022b0:	4770      	bx	lr

080022b2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022b2:	b580      	push	{r7, lr}
 80022b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022b6:	f000 f949 	bl	800254c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80022c4:	4802      	ldr	r0, [pc, #8]	; (80022d0 <ADC1_2_IRQHandler+0x10>)
 80022c6:	f000 fb1b 	bl	8002900 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
 80022ce:	bf00      	nop
 80022d0:	20000210 	.word	0x20000210

080022d4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80022d8:	4802      	ldr	r0, [pc, #8]	; (80022e4 <USART1_IRQHandler+0x10>)
 80022da:	f003 f8a7 	bl	800542c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80022de:	bf00      	nop
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	200002dc 	.word	0x200002dc

080022e8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0
  return 1;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <_kill>:

int _kill(int pid, int sig)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
 80022fe:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002300:	f004 fb7c 	bl	80069fc <__errno>
 8002304:	4603      	mov	r3, r0
 8002306:	2216      	movs	r2, #22
 8002308:	601a      	str	r2, [r3, #0]
  return -1;
 800230a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800230e:	4618      	mov	r0, r3
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <_exit>:

void _exit (int status)
{
 8002316:	b580      	push	{r7, lr}
 8002318:	b082      	sub	sp, #8
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800231e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f7ff ffe7 	bl	80022f6 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002328:	e7fe      	b.n	8002328 <_exit+0x12>

0800232a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af00      	add	r7, sp, #0
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	60b9      	str	r1, [r7, #8]
 8002334:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002336:	2300      	movs	r3, #0
 8002338:	617b      	str	r3, [r7, #20]
 800233a:	e00a      	b.n	8002352 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800233c:	f3af 8000 	nop.w
 8002340:	4601      	mov	r1, r0
 8002342:	68bb      	ldr	r3, [r7, #8]
 8002344:	1c5a      	adds	r2, r3, #1
 8002346:	60ba      	str	r2, [r7, #8]
 8002348:	b2ca      	uxtb	r2, r1
 800234a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	3301      	adds	r3, #1
 8002350:	617b      	str	r3, [r7, #20]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	429a      	cmp	r2, r3
 8002358:	dbf0      	blt.n	800233c <_read+0x12>
  }

  return len;
 800235a:	687b      	ldr	r3, [r7, #4]
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002370:	2300      	movs	r3, #0
 8002372:	617b      	str	r3, [r7, #20]
 8002374:	e009      	b.n	800238a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	1c5a      	adds	r2, r3, #1
 800237a:	60ba      	str	r2, [r7, #8]
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002384:	697b      	ldr	r3, [r7, #20]
 8002386:	3301      	adds	r3, #1
 8002388:	617b      	str	r3, [r7, #20]
 800238a:	697a      	ldr	r2, [r7, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	429a      	cmp	r2, r3
 8002390:	dbf1      	blt.n	8002376 <_write+0x12>
  }
  return len;
 8002392:	687b      	ldr	r3, [r7, #4]
}
 8002394:	4618      	mov	r0, r3
 8002396:	3718      	adds	r7, #24
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <_close>:

int _close(int file)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023a4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	370c      	adds	r7, #12
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bc80      	pop	{r7}
 80023b0:	4770      	bx	lr

080023b2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023b2:	b480      	push	{r7}
 80023b4:	b083      	sub	sp, #12
 80023b6:	af00      	add	r7, sp, #0
 80023b8:	6078      	str	r0, [r7, #4]
 80023ba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023c2:	605a      	str	r2, [r3, #4]
  return 0;
 80023c4:	2300      	movs	r3, #0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bc80      	pop	{r7}
 80023ce:	4770      	bx	lr

080023d0 <_isatty>:

int _isatty(int file)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80023d8:	2301      	movs	r3, #1
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr

080023e4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	3714      	adds	r7, #20
 80023f6:	46bd      	mov	sp, r7
 80023f8:	bc80      	pop	{r7}
 80023fa:	4770      	bx	lr

080023fc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002404:	4a14      	ldr	r2, [pc, #80]	; (8002458 <_sbrk+0x5c>)
 8002406:	4b15      	ldr	r3, [pc, #84]	; (800245c <_sbrk+0x60>)
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002410:	4b13      	ldr	r3, [pc, #76]	; (8002460 <_sbrk+0x64>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d102      	bne.n	800241e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <_sbrk+0x64>)
 800241a:	4a12      	ldr	r2, [pc, #72]	; (8002464 <_sbrk+0x68>)
 800241c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800241e:	4b10      	ldr	r3, [pc, #64]	; (8002460 <_sbrk+0x64>)
 8002420:	681a      	ldr	r2, [r3, #0]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4413      	add	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	429a      	cmp	r2, r3
 800242a:	d207      	bcs.n	800243c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800242c:	f004 fae6 	bl	80069fc <__errno>
 8002430:	4603      	mov	r3, r0
 8002432:	220c      	movs	r2, #12
 8002434:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800243a:	e009      	b.n	8002450 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800243c:	4b08      	ldr	r3, [pc, #32]	; (8002460 <_sbrk+0x64>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002442:	4b07      	ldr	r3, [pc, #28]	; (8002460 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	4a05      	ldr	r2, [pc, #20]	; (8002460 <_sbrk+0x64>)
 800244c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800244e:	68fb      	ldr	r3, [r7, #12]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3718      	adds	r7, #24
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	20005000 	.word	0x20005000
 800245c:	00000400 	.word	0x00000400
 8002460:	20000734 	.word	0x20000734
 8002464:	20000888 	.word	0x20000888

08002468 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002468:	b480      	push	{r7}
 800246a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800246c:	bf00      	nop
 800246e:	46bd      	mov	sp, r7
 8002470:	bc80      	pop	{r7}
 8002472:	4770      	bx	lr

08002474 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002474:	f7ff fff8 	bl	8002468 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002478:	480b      	ldr	r0, [pc, #44]	; (80024a8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800247a:	490c      	ldr	r1, [pc, #48]	; (80024ac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800247c:	4a0c      	ldr	r2, [pc, #48]	; (80024b0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800247e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002480:	e002      	b.n	8002488 <LoopCopyDataInit>

08002482 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002482:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002484:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002486:	3304      	adds	r3, #4

08002488 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002488:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800248a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800248c:	d3f9      	bcc.n	8002482 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800248e:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002490:	4c09      	ldr	r4, [pc, #36]	; (80024b8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002492:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002494:	e001      	b.n	800249a <LoopFillZerobss>

08002496 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002496:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002498:	3204      	adds	r2, #4

0800249a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800249a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800249c:	d3fb      	bcc.n	8002496 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800249e:	f004 fab3 	bl	8006a08 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80024a2:	f7fe ffe7 	bl	8001474 <main>
  bx lr
 80024a6:	4770      	bx	lr
  ldr r0, =_sdata
 80024a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024ac:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80024b0:	0800aca4 	.word	0x0800aca4
  ldr r2, =_sbss
 80024b4:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80024b8:	20000888 	.word	0x20000888

080024bc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80024bc:	e7fe      	b.n	80024bc <CAN1_RX1_IRQHandler>
	...

080024c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c4:	4b08      	ldr	r3, [pc, #32]	; (80024e8 <HAL_Init+0x28>)
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4a07      	ldr	r2, [pc, #28]	; (80024e8 <HAL_Init+0x28>)
 80024ca:	f043 0310 	orr.w	r3, r3, #16
 80024ce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024d0:	2003      	movs	r0, #3
 80024d2:	f000 fd45 	bl	8002f60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d6:	200f      	movs	r0, #15
 80024d8:	f000 f808 	bl	80024ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024dc:	f7ff fd6c 	bl	8001fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024e0:	2300      	movs	r3, #0
}
 80024e2:	4618      	mov	r0, r3
 80024e4:	bd80      	pop	{r7, pc}
 80024e6:	bf00      	nop
 80024e8:	40022000 	.word	0x40022000

080024ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024f4:	4b12      	ldr	r3, [pc, #72]	; (8002540 <HAL_InitTick+0x54>)
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	4b12      	ldr	r3, [pc, #72]	; (8002544 <HAL_InitTick+0x58>)
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	4619      	mov	r1, r3
 80024fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002502:	fbb3 f3f1 	udiv	r3, r3, r1
 8002506:	fbb2 f3f3 	udiv	r3, r2, r3
 800250a:	4618      	mov	r0, r3
 800250c:	f000 fd5d 	bl	8002fca <HAL_SYSTICK_Config>
 8002510:	4603      	mov	r3, r0
 8002512:	2b00      	cmp	r3, #0
 8002514:	d001      	beq.n	800251a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e00e      	b.n	8002538 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b0f      	cmp	r3, #15
 800251e:	d80a      	bhi.n	8002536 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002520:	2200      	movs	r2, #0
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002528:	f000 fd25 	bl	8002f76 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800252c:	4a06      	ldr	r2, [pc, #24]	; (8002548 <HAL_InitTick+0x5c>)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002532:	2300      	movs	r3, #0
 8002534:	e000      	b.n	8002538 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}
 8002540:	20000020 	.word	0x20000020
 8002544:	20000028 	.word	0x20000028
 8002548:	20000024 	.word	0x20000024

0800254c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_IncTick+0x1c>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	461a      	mov	r2, r3
 8002556:	4b05      	ldr	r3, [pc, #20]	; (800256c <HAL_IncTick+0x20>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4413      	add	r3, r2
 800255c:	4a03      	ldr	r2, [pc, #12]	; (800256c <HAL_IncTick+0x20>)
 800255e:	6013      	str	r3, [r2, #0]
}
 8002560:	bf00      	nop
 8002562:	46bd      	mov	sp, r7
 8002564:	bc80      	pop	{r7}
 8002566:	4770      	bx	lr
 8002568:	20000028 	.word	0x20000028
 800256c:	20000738 	.word	0x20000738

08002570 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0
  return uwTick;
 8002574:	4b02      	ldr	r3, [pc, #8]	; (8002580 <HAL_GetTick+0x10>)
 8002576:	681b      	ldr	r3, [r3, #0]
}
 8002578:	4618      	mov	r0, r3
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr
 8002580:	20000738 	.word	0x20000738

08002584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff fff0 	bl	8002570 <HAL_GetTick>
 8002590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800259c:	d005      	beq.n	80025aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259e:	4b0a      	ldr	r3, [pc, #40]	; (80025c8 <HAL_Delay+0x44>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4413      	add	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80025aa:	bf00      	nop
 80025ac:	f7ff ffe0 	bl	8002570 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d8f7      	bhi.n	80025ac <HAL_Delay+0x28>
  {
  }
}
 80025bc:	bf00      	nop
 80025be:	bf00      	nop
 80025c0:	3710      	adds	r7, #16
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000028 	.word	0x20000028

080025cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b086      	sub	sp, #24
 80025d0:	af00      	add	r7, sp, #0
 80025d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d4:	2300      	movs	r3, #0
 80025d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80025d8:	2300      	movs	r3, #0
 80025da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80025dc:	2300      	movs	r3, #0
 80025de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80025e0:	2300      	movs	r3, #0
 80025e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d101      	bne.n	80025ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e0be      	b.n	800276c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d109      	bne.n	8002610 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2200      	movs	r2, #0
 8002600:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f7ff fd06 	bl	800201c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002610:	6878      	ldr	r0, [r7, #4]
 8002612:	f000 fb8f 	bl	8002d34 <ADC_ConversionStop_Disable>
 8002616:	4603      	mov	r3, r0
 8002618:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	f040 8099 	bne.w	800275a <HAL_ADC_Init+0x18e>
 8002628:	7dfb      	ldrb	r3, [r7, #23]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f040 8095 	bne.w	800275a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002634:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002638:	f023 0302 	bic.w	r3, r3, #2
 800263c:	f043 0202 	orr.w	r2, r3, #2
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800264c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	7b1b      	ldrb	r3, [r3, #12]
 8002652:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002654:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002656:	68ba      	ldr	r2, [r7, #8]
 8002658:	4313      	orrs	r3, r2
 800265a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002664:	d003      	beq.n	800266e <HAL_ADC_Init+0xa2>
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	2b01      	cmp	r3, #1
 800266c:	d102      	bne.n	8002674 <HAL_ADC_Init+0xa8>
 800266e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002672:	e000      	b.n	8002676 <HAL_ADC_Init+0xaa>
 8002674:	2300      	movs	r3, #0
 8002676:	693a      	ldr	r2, [r7, #16]
 8002678:	4313      	orrs	r3, r2
 800267a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	7d1b      	ldrb	r3, [r3, #20]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d119      	bne.n	80026b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	7b1b      	ldrb	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d109      	bne.n	80026a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	699b      	ldr	r3, [r3, #24]
 8002690:	3b01      	subs	r3, #1
 8002692:	035a      	lsls	r2, r3, #13
 8002694:	693b      	ldr	r3, [r7, #16]
 8002696:	4313      	orrs	r3, r2
 8002698:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800269c:	613b      	str	r3, [r7, #16]
 800269e:	e00b      	b.n	80026b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026a4:	f043 0220 	orr.w	r2, r3, #32
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b0:	f043 0201 	orr.w	r2, r3, #1
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	430a      	orrs	r2, r1
 80026ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	689a      	ldr	r2, [r3, #8]
 80026d2:	4b28      	ldr	r3, [pc, #160]	; (8002774 <HAL_ADC_Init+0x1a8>)
 80026d4:	4013      	ands	r3, r2
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	6812      	ldr	r2, [r2, #0]
 80026da:	68b9      	ldr	r1, [r7, #8]
 80026dc:	430b      	orrs	r3, r1
 80026de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026e8:	d003      	beq.n	80026f2 <HAL_ADC_Init+0x126>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d104      	bne.n	80026fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	3b01      	subs	r3, #1
 80026f8:	051b      	lsls	r3, r3, #20
 80026fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002702:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	430a      	orrs	r2, r1
 800270e:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689a      	ldr	r2, [r3, #8]
 8002716:	4b18      	ldr	r3, [pc, #96]	; (8002778 <HAL_ADC_Init+0x1ac>)
 8002718:	4013      	ands	r3, r2
 800271a:	68ba      	ldr	r2, [r7, #8]
 800271c:	429a      	cmp	r2, r3
 800271e:	d10b      	bne.n	8002738 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2200      	movs	r2, #0
 8002724:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800272a:	f023 0303 	bic.w	r3, r3, #3
 800272e:	f043 0201 	orr.w	r2, r3, #1
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002736:	e018      	b.n	800276a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	f023 0312 	bic.w	r3, r3, #18
 8002740:	f043 0210 	orr.w	r2, r3, #16
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	f043 0201 	orr.w	r2, r3, #1
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002758:	e007      	b.n	800276a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800275e:	f043 0210 	orr.w	r2, r3, #16
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002766:	2301      	movs	r3, #1
 8002768:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800276a:	7dfb      	ldrb	r3, [r7, #23]
}
 800276c:	4618      	mov	r0, r3
 800276e:	3718      	adds	r7, #24
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}
 8002774:	ffe1f7fd 	.word	0xffe1f7fd
 8002778:	ff1f0efe 	.word	0xff1f0efe

0800277c <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002784:	2300      	movs	r3, #0
 8002786:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800278e:	2b01      	cmp	r3, #1
 8002790:	d101      	bne.n	8002796 <HAL_ADC_Start_IT+0x1a>
 8002792:	2302      	movs	r3, #2
 8002794:	e0a0      	b.n	80028d8 <HAL_ADC_Start_IT+0x15c>
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 fa6e 	bl	8002c80 <ADC_Enable>
 80027a4:	4603      	mov	r3, r0
 80027a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	f040 808f 	bne.w	80028ce <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80027b8:	f023 0301 	bic.w	r3, r3, #1
 80027bc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4a45      	ldr	r2, [pc, #276]	; (80028e0 <HAL_ADC_Start_IT+0x164>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d105      	bne.n	80027da <HAL_ADC_Start_IT+0x5e>
 80027ce:	4b45      	ldr	r3, [pc, #276]	; (80028e4 <HAL_ADC_Start_IT+0x168>)
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027de:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d026      	beq.n	8002842 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80027fc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002804:	e01d      	b.n	8002842 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800280a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	4a33      	ldr	r2, [pc, #204]	; (80028e4 <HAL_ADC_Start_IT+0x168>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d004      	beq.n	8002826 <HAL_ADC_Start_IT+0xaa>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a2f      	ldr	r2, [pc, #188]	; (80028e0 <HAL_ADC_Start_IT+0x164>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d10d      	bne.n	8002842 <HAL_ADC_Start_IT+0xc6>
 8002826:	4b2f      	ldr	r3, [pc, #188]	; (80028e4 <HAL_ADC_Start_IT+0x168>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800282e:	2b00      	cmp	r3, #0
 8002830:	d007      	beq.n	8002842 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002836:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800283a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002846:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d006      	beq.n	800285c <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002852:	f023 0206 	bic.w	r2, r3, #6
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	62da      	str	r2, [r3, #44]	; 0x2c
 800285a:	e002      	b.n	8002862 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2200      	movs	r2, #0
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f06f 0202 	mvn.w	r2, #2
 8002872:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	685a      	ldr	r2, [r3, #4]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f042 0220 	orr.w	r2, r2, #32
 8002882:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800288e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002892:	d113      	bne.n	80028bc <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002898:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <HAL_ADC_Start_IT+0x164>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d105      	bne.n	80028aa <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800289e:	4b11      	ldr	r3, [pc, #68]	; (80028e4 <HAL_ADC_Start_IT+0x168>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d108      	bne.n	80028bc <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	689a      	ldr	r2, [r3, #8]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	e00c      	b.n	80028d6 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	689a      	ldr	r2, [r3, #8]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80028ca:	609a      	str	r2, [r3, #8]
 80028cc:	e003      	b.n	80028d6 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 80028d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3710      	adds	r7, #16
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40012800 	.word	0x40012800
 80028e4:	40012400 	.word	0x40012400

080028e8 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b083      	sub	sp, #12
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bc80      	pop	{r7}
 80028fe:	4770      	bx	lr

08002900 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b084      	sub	sp, #16
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	685b      	ldr	r3, [r3, #4]
 8002916:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0320 	and.w	r3, r3, #32
 800291e:	2b00      	cmp	r3, #0
 8002920:	d03e      	beq.n	80029a0 <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d039      	beq.n	80029a0 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002930:	f003 0310 	and.w	r3, r3, #16
 8002934:	2b00      	cmp	r3, #0
 8002936:	d105      	bne.n	8002944 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800293c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	689b      	ldr	r3, [r3, #8]
 800294a:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800294e:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8002952:	d11d      	bne.n	8002990 <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002958:	2b00      	cmp	r3, #0
 800295a:	d119      	bne.n	8002990 <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	685a      	ldr	r2, [r3, #4]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f022 0220 	bic.w	r2, r2, #32
 800296a:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800297c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d105      	bne.n	8002990 <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002988:	f043 0201 	orr.w	r2, r3, #1
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8002990:	6878      	ldr	r0, [r7, #4]
 8002992:	f7fe ffcf 	bl	8001934 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f06f 0212 	mvn.w	r2, #18
 800299e:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d04d      	beq.n	8002a46 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	f003 0304 	and.w	r3, r3, #4
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d048      	beq.n	8002a46 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	f003 0310 	and.w	r3, r3, #16
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d105      	bne.n	80029cc <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029c4:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80029d6:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 80029da:	d012      	beq.n	8002a02 <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d125      	bne.n	8002a36 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 80029f4:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80029f8:	d11d      	bne.n	8002a36 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d119      	bne.n	8002a36 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002a10:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a16:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d105      	bne.n	8002a36 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a2e:	f043 0201 	orr.w	r2, r3, #1
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f000 f9bd 	bl	8002db6 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f06f 020c 	mvn.w	r2, #12
 8002a44:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d012      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 0301 	and.w	r3, r3, #1
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d00d      	beq.n	8002a76 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f809 	bl	8002a7e <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f06f 0201 	mvn.w	r2, #1
 8002a74:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}

08002a7e <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002a86:	bf00      	nop
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr

08002a90 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002a90:	b480      	push	{r7}
 8002a92:	b085      	sub	sp, #20
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
 8002a98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002aa8:	2b01      	cmp	r3, #1
 8002aaa:	d101      	bne.n	8002ab0 <HAL_ADC_ConfigChannel+0x20>
 8002aac:	2302      	movs	r3, #2
 8002aae:	e0dc      	b.n	8002c6a <HAL_ADC_ConfigChannel+0x1da>
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	2b06      	cmp	r3, #6
 8002abe:	d81c      	bhi.n	8002afa <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac6:	683b      	ldr	r3, [r7, #0]
 8002ac8:	685a      	ldr	r2, [r3, #4]
 8002aca:	4613      	mov	r3, r2
 8002acc:	009b      	lsls	r3, r3, #2
 8002ace:	4413      	add	r3, r2
 8002ad0:	3b05      	subs	r3, #5
 8002ad2:	221f      	movs	r2, #31
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	43db      	mvns	r3, r3
 8002ada:	4019      	ands	r1, r3
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	6818      	ldr	r0, [r3, #0]
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	685a      	ldr	r2, [r3, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	009b      	lsls	r3, r3, #2
 8002ae8:	4413      	add	r3, r2
 8002aea:	3b05      	subs	r3, #5
 8002aec:	fa00 f203 	lsl.w	r2, r0, r3
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	430a      	orrs	r2, r1
 8002af6:	635a      	str	r2, [r3, #52]	; 0x34
 8002af8:	e03c      	b.n	8002b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	2b0c      	cmp	r3, #12
 8002b00:	d81c      	bhi.n	8002b3c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685a      	ldr	r2, [r3, #4]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4413      	add	r3, r2
 8002b12:	3b23      	subs	r3, #35	; 0x23
 8002b14:	221f      	movs	r2, #31
 8002b16:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1a:	43db      	mvns	r3, r3
 8002b1c:	4019      	ands	r1, r3
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	6818      	ldr	r0, [r3, #0]
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	685a      	ldr	r2, [r3, #4]
 8002b26:	4613      	mov	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	4413      	add	r3, r2
 8002b2c:	3b23      	subs	r3, #35	; 0x23
 8002b2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	631a      	str	r2, [r3, #48]	; 0x30
 8002b3a:	e01b      	b.n	8002b74 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685a      	ldr	r2, [r3, #4]
 8002b46:	4613      	mov	r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	4413      	add	r3, r2
 8002b4c:	3b41      	subs	r3, #65	; 0x41
 8002b4e:	221f      	movs	r2, #31
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	4019      	ands	r1, r3
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	6818      	ldr	r0, [r3, #0]
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685a      	ldr	r2, [r3, #4]
 8002b60:	4613      	mov	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4413      	add	r3, r2
 8002b66:	3b41      	subs	r3, #65	; 0x41
 8002b68:	fa00 f203 	lsl.w	r2, r0, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	430a      	orrs	r2, r1
 8002b72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2b09      	cmp	r3, #9
 8002b7a:	d91c      	bls.n	8002bb6 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	68d9      	ldr	r1, [r3, #12]
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4613      	mov	r3, r2
 8002b88:	005b      	lsls	r3, r3, #1
 8002b8a:	4413      	add	r3, r2
 8002b8c:	3b1e      	subs	r3, #30
 8002b8e:	2207      	movs	r2, #7
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	43db      	mvns	r3, r3
 8002b96:	4019      	ands	r1, r3
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	6898      	ldr	r0, [r3, #8]
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	3b1e      	subs	r3, #30
 8002ba8:	fa00 f203 	lsl.w	r2, r0, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	430a      	orrs	r2, r1
 8002bb2:	60da      	str	r2, [r3, #12]
 8002bb4:	e019      	b.n	8002bea <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	6919      	ldr	r1, [r3, #16]
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	005b      	lsls	r3, r3, #1
 8002bc4:	4413      	add	r3, r2
 8002bc6:	2207      	movs	r2, #7
 8002bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bcc:	43db      	mvns	r3, r3
 8002bce:	4019      	ands	r1, r3
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	6898      	ldr	r0, [r3, #8]
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681a      	ldr	r2, [r3, #0]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	005b      	lsls	r3, r3, #1
 8002bdc:	4413      	add	r3, r2
 8002bde:	fa00 f203 	lsl.w	r2, r0, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	430a      	orrs	r2, r1
 8002be8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	2b10      	cmp	r3, #16
 8002bf0:	d003      	beq.n	8002bfa <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002bf2:	683b      	ldr	r3, [r7, #0]
 8002bf4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002bf6:	2b11      	cmp	r3, #17
 8002bf8:	d132      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a1d      	ldr	r2, [pc, #116]	; (8002c74 <HAL_ADC_ConfigChannel+0x1e4>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d125      	bne.n	8002c50 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d126      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689a      	ldr	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8002c20:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2b10      	cmp	r3, #16
 8002c28:	d11a      	bne.n	8002c60 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002c2a:	4b13      	ldr	r3, [pc, #76]	; (8002c78 <HAL_ADC_ConfigChannel+0x1e8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a13      	ldr	r2, [pc, #76]	; (8002c7c <HAL_ADC_ConfigChannel+0x1ec>)
 8002c30:	fba2 2303 	umull	r2, r3, r2, r3
 8002c34:	0c9a      	lsrs	r2, r3, #18
 8002c36:	4613      	mov	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	4413      	add	r3, r2
 8002c3c:	005b      	lsls	r3, r3, #1
 8002c3e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c40:	e002      	b.n	8002c48 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	3b01      	subs	r3, #1
 8002c46:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002c48:	68bb      	ldr	r3, [r7, #8]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d1f9      	bne.n	8002c42 <HAL_ADC_ConfigChannel+0x1b2>
 8002c4e:	e007      	b.n	8002c60 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c54:	f043 0220 	orr.w	r2, r3, #32
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002c68:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3714      	adds	r7, #20
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bc80      	pop	{r7}
 8002c72:	4770      	bx	lr
 8002c74:	40012400 	.word	0x40012400
 8002c78:	20000020 	.word	0x20000020
 8002c7c:	431bde83 	.word	0x431bde83

08002c80 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d040      	beq.n	8002d20 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f042 0201 	orr.w	r2, r2, #1
 8002cac:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002cae:	4b1f      	ldr	r3, [pc, #124]	; (8002d2c <ADC_Enable+0xac>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a1f      	ldr	r2, [pc, #124]	; (8002d30 <ADC_Enable+0xb0>)
 8002cb4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb8:	0c9b      	lsrs	r3, r3, #18
 8002cba:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cbc:	e002      	b.n	8002cc4 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3b01      	subs	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d1f9      	bne.n	8002cbe <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002cca:	f7ff fc51 	bl	8002570 <HAL_GetTick>
 8002cce:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002cd0:	e01f      	b.n	8002d12 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002cd2:	f7ff fc4d 	bl	8002570 <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d918      	bls.n	8002d12 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 0301 	and.w	r3, r3, #1
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d011      	beq.n	8002d12 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf2:	f043 0210 	orr.w	r2, r3, #16
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfe:	f043 0201 	orr.w	r2, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e007      	b.n	8002d22 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b01      	cmp	r3, #1
 8002d1e:	d1d8      	bne.n	8002cd2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}
 8002d2a:	bf00      	nop
 8002d2c:	20000020 	.word	0x20000020
 8002d30:	431bde83 	.word	0x431bde83

08002d34 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	689b      	ldr	r3, [r3, #8]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d12e      	bne.n	8002dac <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	689a      	ldr	r2, [r3, #8]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f022 0201 	bic.w	r2, r2, #1
 8002d5c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002d5e:	f7ff fc07 	bl	8002570 <HAL_GetTick>
 8002d62:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d64:	e01b      	b.n	8002d9e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002d66:	f7ff fc03 	bl	8002570 <HAL_GetTick>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	2b02      	cmp	r3, #2
 8002d72:	d914      	bls.n	8002d9e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	f003 0301 	and.w	r3, r3, #1
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d10d      	bne.n	8002d9e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d86:	f043 0210 	orr.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d92:	f043 0201 	orr.w	r2, r3, #1
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e007      	b.n	8002dae <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d0dc      	beq.n	8002d66 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002dac:	2300      	movs	r3, #0
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}

08002db6 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002db6:	b480      	push	{r7}
 8002db8:	b083      	sub	sp, #12
 8002dba:	af00      	add	r7, sp, #0
 8002dbc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8002dbe:	bf00      	nop
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bc80      	pop	{r7}
 8002dc6:	4770      	bx	lr

08002dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b085      	sub	sp, #20
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f003 0307 	and.w	r3, r3, #7
 8002dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dd8:	4b0c      	ldr	r3, [pc, #48]	; (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dde:	68ba      	ldr	r2, [r7, #8]
 8002de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002de4:	4013      	ands	r3, r2
 8002de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dfa:	4a04      	ldr	r2, [pc, #16]	; (8002e0c <__NVIC_SetPriorityGrouping+0x44>)
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	60d3      	str	r3, [r2, #12]
}
 8002e00:	bf00      	nop
 8002e02:	3714      	adds	r7, #20
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e14:	4b04      	ldr	r3, [pc, #16]	; (8002e28 <__NVIC_GetPriorityGrouping+0x18>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	f003 0307 	and.w	r3, r3, #7
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	bc80      	pop	{r7}
 8002e24:	4770      	bx	lr
 8002e26:	bf00      	nop
 8002e28:	e000ed00 	.word	0xe000ed00

08002e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e2c:	b480      	push	{r7}
 8002e2e:	b083      	sub	sp, #12
 8002e30:	af00      	add	r7, sp, #0
 8002e32:	4603      	mov	r3, r0
 8002e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	db0b      	blt.n	8002e56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e3e:	79fb      	ldrb	r3, [r7, #7]
 8002e40:	f003 021f 	and.w	r2, r3, #31
 8002e44:	4906      	ldr	r1, [pc, #24]	; (8002e60 <__NVIC_EnableIRQ+0x34>)
 8002e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2001      	movs	r0, #1
 8002e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	e000e100 	.word	0xe000e100

08002e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	6039      	str	r1, [r7, #0]
 8002e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	db0a      	blt.n	8002e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	b2da      	uxtb	r2, r3
 8002e7c:	490c      	ldr	r1, [pc, #48]	; (8002eb0 <__NVIC_SetPriority+0x4c>)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	0112      	lsls	r2, r2, #4
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	440b      	add	r3, r1
 8002e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e8c:	e00a      	b.n	8002ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	b2da      	uxtb	r2, r3
 8002e92:	4908      	ldr	r1, [pc, #32]	; (8002eb4 <__NVIC_SetPriority+0x50>)
 8002e94:	79fb      	ldrb	r3, [r7, #7]
 8002e96:	f003 030f 	and.w	r3, r3, #15
 8002e9a:	3b04      	subs	r3, #4
 8002e9c:	0112      	lsls	r2, r2, #4
 8002e9e:	b2d2      	uxtb	r2, r2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	761a      	strb	r2, [r3, #24]
}
 8002ea4:	bf00      	nop
 8002ea6:	370c      	adds	r7, #12
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	e000e100 	.word	0xe000e100
 8002eb4:	e000ed00 	.word	0xe000ed00

08002eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b089      	sub	sp, #36	; 0x24
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	60f8      	str	r0, [r7, #12]
 8002ec0:	60b9      	str	r1, [r7, #8]
 8002ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	f1c3 0307 	rsb	r3, r3, #7
 8002ed2:	2b04      	cmp	r3, #4
 8002ed4:	bf28      	it	cs
 8002ed6:	2304      	movcs	r3, #4
 8002ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eda:	69fb      	ldr	r3, [r7, #28]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2b06      	cmp	r3, #6
 8002ee0:	d902      	bls.n	8002ee8 <NVIC_EncodePriority+0x30>
 8002ee2:	69fb      	ldr	r3, [r7, #28]
 8002ee4:	3b03      	subs	r3, #3
 8002ee6:	e000      	b.n	8002eea <NVIC_EncodePriority+0x32>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002ef0:	69bb      	ldr	r3, [r7, #24]
 8002ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef6:	43da      	mvns	r2, r3
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	401a      	ands	r2, r3
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f00:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f04:	697b      	ldr	r3, [r7, #20]
 8002f06:	fa01 f303 	lsl.w	r3, r1, r3
 8002f0a:	43d9      	mvns	r1, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f10:	4313      	orrs	r3, r2
         );
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3724      	adds	r7, #36	; 0x24
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bc80      	pop	{r7}
 8002f1a:	4770      	bx	lr

08002f1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b082      	sub	sp, #8
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	3b01      	subs	r3, #1
 8002f28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f2c:	d301      	bcc.n	8002f32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e00f      	b.n	8002f52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f32:	4a0a      	ldr	r2, [pc, #40]	; (8002f5c <SysTick_Config+0x40>)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	3b01      	subs	r3, #1
 8002f38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f3a:	210f      	movs	r1, #15
 8002f3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f40:	f7ff ff90 	bl	8002e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f44:	4b05      	ldr	r3, [pc, #20]	; (8002f5c <SysTick_Config+0x40>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f4a:	4b04      	ldr	r3, [pc, #16]	; (8002f5c <SysTick_Config+0x40>)
 8002f4c:	2207      	movs	r2, #7
 8002f4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f50:	2300      	movs	r3, #0
}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	e000e010 	.word	0xe000e010

08002f60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b580      	push	{r7, lr}
 8002f62:	b082      	sub	sp, #8
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f68:	6878      	ldr	r0, [r7, #4]
 8002f6a:	f7ff ff2d 	bl	8002dc8 <__NVIC_SetPriorityGrouping>
}
 8002f6e:	bf00      	nop
 8002f70:	3708      	adds	r7, #8
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f76:	b580      	push	{r7, lr}
 8002f78:	b086      	sub	sp, #24
 8002f7a:	af00      	add	r7, sp, #0
 8002f7c:	4603      	mov	r3, r0
 8002f7e:	60b9      	str	r1, [r7, #8]
 8002f80:	607a      	str	r2, [r7, #4]
 8002f82:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f88:	f7ff ff42 	bl	8002e10 <__NVIC_GetPriorityGrouping>
 8002f8c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	68b9      	ldr	r1, [r7, #8]
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f7ff ff90 	bl	8002eb8 <NVIC_EncodePriority>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f9e:	4611      	mov	r1, r2
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff5f 	bl	8002e64 <__NVIC_SetPriority>
}
 8002fa6:	bf00      	nop
 8002fa8:	3718      	adds	r7, #24
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff ff35 	bl	8002e2c <__NVIC_EnableIRQ>
}
 8002fc2:	bf00      	nop
 8002fc4:	3708      	adds	r7, #8
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}

08002fca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fca:	b580      	push	{r7, lr}
 8002fcc:	b082      	sub	sp, #8
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f7ff ffa2 	bl	8002f1c <SysTick_Config>
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3708      	adds	r7, #8
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}

08002fe2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b085      	sub	sp, #20
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002fea:	2300      	movs	r3, #0
 8002fec:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d008      	beq.n	800300c <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2204      	movs	r2, #4
 8002ffe:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	e020      	b.n	800304e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f022 020e 	bic.w	r2, r2, #14
 800301a:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f022 0201 	bic.w	r2, r2, #1
 800302a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003034:	2101      	movs	r1, #1
 8003036:	fa01 f202 	lsl.w	r2, r1, r2
 800303a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800304c:	7bfb      	ldrb	r3, [r7, #15]
}
 800304e:	4618      	mov	r0, r3
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	bc80      	pop	{r7}
 8003056:	4770      	bx	lr

08003058 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003060:	2300      	movs	r3, #0
 8003062:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800306a:	b2db      	uxtb	r3, r3
 800306c:	2b02      	cmp	r3, #2
 800306e:	d005      	beq.n	800307c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2204      	movs	r2, #4
 8003074:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	73fb      	strb	r3, [r7, #15]
 800307a:	e051      	b.n	8003120 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 020e 	bic.w	r2, r2, #14
 800308a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681a      	ldr	r2, [r3, #0]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 0201 	bic.w	r2, r2, #1
 800309a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	4a22      	ldr	r2, [pc, #136]	; (800312c <HAL_DMA_Abort_IT+0xd4>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d029      	beq.n	80030fa <HAL_DMA_Abort_IT+0xa2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4a21      	ldr	r2, [pc, #132]	; (8003130 <HAL_DMA_Abort_IT+0xd8>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d022      	beq.n	80030f6 <HAL_DMA_Abort_IT+0x9e>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	4a1f      	ldr	r2, [pc, #124]	; (8003134 <HAL_DMA_Abort_IT+0xdc>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d01a      	beq.n	80030f0 <HAL_DMA_Abort_IT+0x98>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a1e      	ldr	r2, [pc, #120]	; (8003138 <HAL_DMA_Abort_IT+0xe0>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d012      	beq.n	80030ea <HAL_DMA_Abort_IT+0x92>
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a1c      	ldr	r2, [pc, #112]	; (800313c <HAL_DMA_Abort_IT+0xe4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d00a      	beq.n	80030e4 <HAL_DMA_Abort_IT+0x8c>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <HAL_DMA_Abort_IT+0xe8>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d102      	bne.n	80030de <HAL_DMA_Abort_IT+0x86>
 80030d8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80030dc:	e00e      	b.n	80030fc <HAL_DMA_Abort_IT+0xa4>
 80030de:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030e2:	e00b      	b.n	80030fc <HAL_DMA_Abort_IT+0xa4>
 80030e4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e8:	e008      	b.n	80030fc <HAL_DMA_Abort_IT+0xa4>
 80030ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ee:	e005      	b.n	80030fc <HAL_DMA_Abort_IT+0xa4>
 80030f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80030f4:	e002      	b.n	80030fc <HAL_DMA_Abort_IT+0xa4>
 80030f6:	2310      	movs	r3, #16
 80030f8:	e000      	b.n	80030fc <HAL_DMA_Abort_IT+0xa4>
 80030fa:	2301      	movs	r3, #1
 80030fc:	4a11      	ldr	r2, [pc, #68]	; (8003144 <HAL_DMA_Abort_IT+0xec>)
 80030fe:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	2200      	movs	r2, #0
 800310c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003114:	2b00      	cmp	r3, #0
 8003116:	d003      	beq.n	8003120 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	4798      	blx	r3
    } 
  }
  return status;
 8003120:	7bfb      	ldrb	r3, [r7, #15]
}
 8003122:	4618      	mov	r0, r3
 8003124:	3710      	adds	r7, #16
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	40020008 	.word	0x40020008
 8003130:	4002001c 	.word	0x4002001c
 8003134:	40020030 	.word	0x40020030
 8003138:	40020044 	.word	0x40020044
 800313c:	40020058 	.word	0x40020058
 8003140:	4002006c 	.word	0x4002006c
 8003144:	40020000 	.word	0x40020000

08003148 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003148:	b480      	push	{r7}
 800314a:	b08b      	sub	sp, #44	; 0x2c
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003152:	2300      	movs	r3, #0
 8003154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003156:	2300      	movs	r3, #0
 8003158:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800315a:	e169      	b.n	8003430 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800315c:	2201      	movs	r2, #1
 800315e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69fa      	ldr	r2, [r7, #28]
 800316c:	4013      	ands	r3, r2
 800316e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003170:	69ba      	ldr	r2, [r7, #24]
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	429a      	cmp	r2, r3
 8003176:	f040 8158 	bne.w	800342a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	4a9a      	ldr	r2, [pc, #616]	; (80033e8 <HAL_GPIO_Init+0x2a0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d05e      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 8003184:	4a98      	ldr	r2, [pc, #608]	; (80033e8 <HAL_GPIO_Init+0x2a0>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d875      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 800318a:	4a98      	ldr	r2, [pc, #608]	; (80033ec <HAL_GPIO_Init+0x2a4>)
 800318c:	4293      	cmp	r3, r2
 800318e:	d058      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 8003190:	4a96      	ldr	r2, [pc, #600]	; (80033ec <HAL_GPIO_Init+0x2a4>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d86f      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 8003196:	4a96      	ldr	r2, [pc, #600]	; (80033f0 <HAL_GPIO_Init+0x2a8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d052      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 800319c:	4a94      	ldr	r2, [pc, #592]	; (80033f0 <HAL_GPIO_Init+0x2a8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d869      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031a2:	4a94      	ldr	r2, [pc, #592]	; (80033f4 <HAL_GPIO_Init+0x2ac>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d04c      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 80031a8:	4a92      	ldr	r2, [pc, #584]	; (80033f4 <HAL_GPIO_Init+0x2ac>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d863      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031ae:	4a92      	ldr	r2, [pc, #584]	; (80033f8 <HAL_GPIO_Init+0x2b0>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d046      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
 80031b4:	4a90      	ldr	r2, [pc, #576]	; (80033f8 <HAL_GPIO_Init+0x2b0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d85d      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031ba:	2b12      	cmp	r3, #18
 80031bc:	d82a      	bhi.n	8003214 <HAL_GPIO_Init+0xcc>
 80031be:	2b12      	cmp	r3, #18
 80031c0:	d859      	bhi.n	8003276 <HAL_GPIO_Init+0x12e>
 80031c2:	a201      	add	r2, pc, #4	; (adr r2, 80031c8 <HAL_GPIO_Init+0x80>)
 80031c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031c8:	08003243 	.word	0x08003243
 80031cc:	0800321d 	.word	0x0800321d
 80031d0:	0800322f 	.word	0x0800322f
 80031d4:	08003271 	.word	0x08003271
 80031d8:	08003277 	.word	0x08003277
 80031dc:	08003277 	.word	0x08003277
 80031e0:	08003277 	.word	0x08003277
 80031e4:	08003277 	.word	0x08003277
 80031e8:	08003277 	.word	0x08003277
 80031ec:	08003277 	.word	0x08003277
 80031f0:	08003277 	.word	0x08003277
 80031f4:	08003277 	.word	0x08003277
 80031f8:	08003277 	.word	0x08003277
 80031fc:	08003277 	.word	0x08003277
 8003200:	08003277 	.word	0x08003277
 8003204:	08003277 	.word	0x08003277
 8003208:	08003277 	.word	0x08003277
 800320c:	08003225 	.word	0x08003225
 8003210:	08003239 	.word	0x08003239
 8003214:	4a79      	ldr	r2, [pc, #484]	; (80033fc <HAL_GPIO_Init+0x2b4>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d013      	beq.n	8003242 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800321a:	e02c      	b.n	8003276 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	68db      	ldr	r3, [r3, #12]
 8003220:	623b      	str	r3, [r7, #32]
          break;
 8003222:	e029      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	68db      	ldr	r3, [r3, #12]
 8003228:	3304      	adds	r3, #4
 800322a:	623b      	str	r3, [r7, #32]
          break;
 800322c:	e024      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	68db      	ldr	r3, [r3, #12]
 8003232:	3308      	adds	r3, #8
 8003234:	623b      	str	r3, [r7, #32]
          break;
 8003236:	e01f      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003238:	683b      	ldr	r3, [r7, #0]
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	330c      	adds	r3, #12
 800323e:	623b      	str	r3, [r7, #32]
          break;
 8003240:	e01a      	b.n	8003278 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	689b      	ldr	r3, [r3, #8]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d102      	bne.n	8003250 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800324a:	2304      	movs	r3, #4
 800324c:	623b      	str	r3, [r7, #32]
          break;
 800324e:	e013      	b.n	8003278 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	2b01      	cmp	r3, #1
 8003256:	d105      	bne.n	8003264 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003258:	2308      	movs	r3, #8
 800325a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	69fa      	ldr	r2, [r7, #28]
 8003260:	611a      	str	r2, [r3, #16]
          break;
 8003262:	e009      	b.n	8003278 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003264:	2308      	movs	r3, #8
 8003266:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69fa      	ldr	r2, [r7, #28]
 800326c:	615a      	str	r2, [r3, #20]
          break;
 800326e:	e003      	b.n	8003278 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003270:	2300      	movs	r3, #0
 8003272:	623b      	str	r3, [r7, #32]
          break;
 8003274:	e000      	b.n	8003278 <HAL_GPIO_Init+0x130>
          break;
 8003276:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	2bff      	cmp	r3, #255	; 0xff
 800327c:	d801      	bhi.n	8003282 <HAL_GPIO_Init+0x13a>
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	e001      	b.n	8003286 <HAL_GPIO_Init+0x13e>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	3304      	adds	r3, #4
 8003286:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	2bff      	cmp	r3, #255	; 0xff
 800328c:	d802      	bhi.n	8003294 <HAL_GPIO_Init+0x14c>
 800328e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	e002      	b.n	800329a <HAL_GPIO_Init+0x152>
 8003294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003296:	3b08      	subs	r3, #8
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	210f      	movs	r1, #15
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	fa01 f303 	lsl.w	r3, r1, r3
 80032a8:	43db      	mvns	r3, r3
 80032aa:	401a      	ands	r2, r3
 80032ac:	6a39      	ldr	r1, [r7, #32]
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	fa01 f303 	lsl.w	r3, r1, r3
 80032b4:	431a      	orrs	r2, r3
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 80b1 	beq.w	800342a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80032c8:	4b4d      	ldr	r3, [pc, #308]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	4a4c      	ldr	r2, [pc, #304]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 80032ce:	f043 0301 	orr.w	r3, r3, #1
 80032d2:	6193      	str	r3, [r2, #24]
 80032d4:	4b4a      	ldr	r3, [pc, #296]	; (8003400 <HAL_GPIO_Init+0x2b8>)
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	60bb      	str	r3, [r7, #8]
 80032de:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80032e0:	4a48      	ldr	r2, [pc, #288]	; (8003404 <HAL_GPIO_Init+0x2bc>)
 80032e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e4:	089b      	lsrs	r3, r3, #2
 80032e6:	3302      	adds	r3, #2
 80032e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032ec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	f003 0303 	and.w	r3, r3, #3
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	220f      	movs	r2, #15
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43db      	mvns	r3, r3
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	4013      	ands	r3, r2
 8003302:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	4a40      	ldr	r2, [pc, #256]	; (8003408 <HAL_GPIO_Init+0x2c0>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d013      	beq.n	8003334 <HAL_GPIO_Init+0x1ec>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	4a3f      	ldr	r2, [pc, #252]	; (800340c <HAL_GPIO_Init+0x2c4>)
 8003310:	4293      	cmp	r3, r2
 8003312:	d00d      	beq.n	8003330 <HAL_GPIO_Init+0x1e8>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a3e      	ldr	r2, [pc, #248]	; (8003410 <HAL_GPIO_Init+0x2c8>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d007      	beq.n	800332c <HAL_GPIO_Init+0x1e4>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	4a3d      	ldr	r2, [pc, #244]	; (8003414 <HAL_GPIO_Init+0x2cc>)
 8003320:	4293      	cmp	r3, r2
 8003322:	d101      	bne.n	8003328 <HAL_GPIO_Init+0x1e0>
 8003324:	2303      	movs	r3, #3
 8003326:	e006      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003328:	2304      	movs	r3, #4
 800332a:	e004      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 800332c:	2302      	movs	r3, #2
 800332e:	e002      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003330:	2301      	movs	r3, #1
 8003332:	e000      	b.n	8003336 <HAL_GPIO_Init+0x1ee>
 8003334:	2300      	movs	r3, #0
 8003336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003338:	f002 0203 	and.w	r2, r2, #3
 800333c:	0092      	lsls	r2, r2, #2
 800333e:	4093      	lsls	r3, r2
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	4313      	orrs	r3, r2
 8003344:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003346:	492f      	ldr	r1, [pc, #188]	; (8003404 <HAL_GPIO_Init+0x2bc>)
 8003348:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800334a:	089b      	lsrs	r3, r3, #2
 800334c:	3302      	adds	r3, #2
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800335c:	2b00      	cmp	r3, #0
 800335e:	d006      	beq.n	800336e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	492c      	ldr	r1, [pc, #176]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	4313      	orrs	r3, r2
 800336a:	608b      	str	r3, [r1, #8]
 800336c:	e006      	b.n	800337c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800336e:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 8003370:	689a      	ldr	r2, [r3, #8]
 8003372:	69bb      	ldr	r3, [r7, #24]
 8003374:	43db      	mvns	r3, r3
 8003376:	4928      	ldr	r1, [pc, #160]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 8003378:	4013      	ands	r3, r2
 800337a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003384:	2b00      	cmp	r3, #0
 8003386:	d006      	beq.n	8003396 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003388:	4b23      	ldr	r3, [pc, #140]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 800338a:	68da      	ldr	r2, [r3, #12]
 800338c:	4922      	ldr	r1, [pc, #136]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	4313      	orrs	r3, r2
 8003392:	60cb      	str	r3, [r1, #12]
 8003394:	e006      	b.n	80033a4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003396:	4b20      	ldr	r3, [pc, #128]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	43db      	mvns	r3, r3
 800339e:	491e      	ldr	r1, [pc, #120]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033a0:	4013      	ands	r3, r2
 80033a2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d006      	beq.n	80033be <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80033b0:	4b19      	ldr	r3, [pc, #100]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033b2:	685a      	ldr	r2, [r3, #4]
 80033b4:	4918      	ldr	r1, [pc, #96]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	4313      	orrs	r3, r2
 80033ba:	604b      	str	r3, [r1, #4]
 80033bc:	e006      	b.n	80033cc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80033be:	4b16      	ldr	r3, [pc, #88]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	4914      	ldr	r1, [pc, #80]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033c8:	4013      	ands	r3, r2
 80033ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d021      	beq.n	800341c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80033d8:	4b0f      	ldr	r3, [pc, #60]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	490e      	ldr	r1, [pc, #56]	; (8003418 <HAL_GPIO_Init+0x2d0>)
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e021      	b.n	800342a <HAL_GPIO_Init+0x2e2>
 80033e6:	bf00      	nop
 80033e8:	10320000 	.word	0x10320000
 80033ec:	10310000 	.word	0x10310000
 80033f0:	10220000 	.word	0x10220000
 80033f4:	10210000 	.word	0x10210000
 80033f8:	10120000 	.word	0x10120000
 80033fc:	10110000 	.word	0x10110000
 8003400:	40021000 	.word	0x40021000
 8003404:	40010000 	.word	0x40010000
 8003408:	40010800 	.word	0x40010800
 800340c:	40010c00 	.word	0x40010c00
 8003410:	40011000 	.word	0x40011000
 8003414:	40011400 	.word	0x40011400
 8003418:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800341c:	4b0b      	ldr	r3, [pc, #44]	; (800344c <HAL_GPIO_Init+0x304>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	43db      	mvns	r3, r3
 8003424:	4909      	ldr	r1, [pc, #36]	; (800344c <HAL_GPIO_Init+0x304>)
 8003426:	4013      	ands	r3, r2
 8003428:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800342a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800342c:	3301      	adds	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681a      	ldr	r2, [r3, #0]
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	fa22 f303 	lsr.w	r3, r2, r3
 800343a:	2b00      	cmp	r3, #0
 800343c:	f47f ae8e 	bne.w	800315c <HAL_GPIO_Init+0x14>
  }
}
 8003440:	bf00      	nop
 8003442:	bf00      	nop
 8003444:	372c      	adds	r7, #44	; 0x2c
 8003446:	46bd      	mov	sp, r7
 8003448:	bc80      	pop	{r7}
 800344a:	4770      	bx	lr
 800344c:	40010400 	.word	0x40010400

08003450 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	460b      	mov	r3, r1
 800345a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	689a      	ldr	r2, [r3, #8]
 8003460:	887b      	ldrh	r3, [r7, #2]
 8003462:	4013      	ands	r3, r2
 8003464:	2b00      	cmp	r3, #0
 8003466:	d002      	beq.n	800346e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003468:	2301      	movs	r3, #1
 800346a:	73fb      	strb	r3, [r7, #15]
 800346c:	e001      	b.n	8003472 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800346e:	2300      	movs	r3, #0
 8003470:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003472:	7bfb      	ldrb	r3, [r7, #15]
}
 8003474:	4618      	mov	r0, r3
 8003476:	3714      	adds	r7, #20
 8003478:	46bd      	mov	sp, r7
 800347a:	bc80      	pop	{r7}
 800347c:	4770      	bx	lr

0800347e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800347e:	b480      	push	{r7}
 8003480:	b083      	sub	sp, #12
 8003482:	af00      	add	r7, sp, #0
 8003484:	6078      	str	r0, [r7, #4]
 8003486:	460b      	mov	r3, r1
 8003488:	807b      	strh	r3, [r7, #2]
 800348a:	4613      	mov	r3, r2
 800348c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800348e:	787b      	ldrb	r3, [r7, #1]
 8003490:	2b00      	cmp	r3, #0
 8003492:	d003      	beq.n	800349c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003494:	887a      	ldrh	r2, [r7, #2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800349a:	e003      	b.n	80034a4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800349c:	887b      	ldrh	r3, [r7, #2]
 800349e:	041a      	lsls	r2, r3, #16
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	611a      	str	r2, [r3, #16]
}
 80034a4:	bf00      	nop
 80034a6:	370c      	adds	r7, #12
 80034a8:	46bd      	mov	sp, r7
 80034aa:	bc80      	pop	{r7}
 80034ac:	4770      	bx	lr
	...

080034b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e12b      	b.n	800371a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034c8:	b2db      	uxtb	r3, r3
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d106      	bne.n	80034dc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f7fe fde4 	bl	80020a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2224      	movs	r2, #36	; 0x24
 80034e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f022 0201 	bic.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003502:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003512:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003514:	f001 f842 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 8003518:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	4a81      	ldr	r2, [pc, #516]	; (8003724 <HAL_I2C_Init+0x274>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d807      	bhi.n	8003534 <HAL_I2C_Init+0x84>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	4a80      	ldr	r2, [pc, #512]	; (8003728 <HAL_I2C_Init+0x278>)
 8003528:	4293      	cmp	r3, r2
 800352a:	bf94      	ite	ls
 800352c:	2301      	movls	r3, #1
 800352e:	2300      	movhi	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	e006      	b.n	8003542 <HAL_I2C_Init+0x92>
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	4a7d      	ldr	r2, [pc, #500]	; (800372c <HAL_I2C_Init+0x27c>)
 8003538:	4293      	cmp	r3, r2
 800353a:	bf94      	ite	ls
 800353c:	2301      	movls	r3, #1
 800353e:	2300      	movhi	r3, #0
 8003540:	b2db      	uxtb	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d001      	beq.n	800354a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003546:	2301      	movs	r3, #1
 8003548:	e0e7      	b.n	800371a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	4a78      	ldr	r2, [pc, #480]	; (8003730 <HAL_I2C_Init+0x280>)
 800354e:	fba2 2303 	umull	r2, r3, r2, r3
 8003552:	0c9b      	lsrs	r3, r3, #18
 8003554:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	68ba      	ldr	r2, [r7, #8]
 8003566:	430a      	orrs	r2, r1
 8003568:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4a6a      	ldr	r2, [pc, #424]	; (8003724 <HAL_I2C_Init+0x274>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d802      	bhi.n	8003584 <HAL_I2C_Init+0xd4>
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	3301      	adds	r3, #1
 8003582:	e009      	b.n	8003598 <HAL_I2C_Init+0xe8>
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800358a:	fb02 f303 	mul.w	r3, r2, r3
 800358e:	4a69      	ldr	r2, [pc, #420]	; (8003734 <HAL_I2C_Init+0x284>)
 8003590:	fba2 2303 	umull	r2, r3, r2, r3
 8003594:	099b      	lsrs	r3, r3, #6
 8003596:	3301      	adds	r3, #1
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	6812      	ldr	r2, [r2, #0]
 800359c:	430b      	orrs	r3, r1
 800359e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80035aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	495c      	ldr	r1, [pc, #368]	; (8003724 <HAL_I2C_Init+0x274>)
 80035b4:	428b      	cmp	r3, r1
 80035b6:	d819      	bhi.n	80035ec <HAL_I2C_Init+0x13c>
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	1e59      	subs	r1, r3, #1
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80035c6:	1c59      	adds	r1, r3, #1
 80035c8:	f640 73fc 	movw	r3, #4092	; 0xffc
 80035cc:	400b      	ands	r3, r1
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d00a      	beq.n	80035e8 <HAL_I2C_Init+0x138>
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	1e59      	subs	r1, r3, #1
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	fbb1 f3f3 	udiv	r3, r1, r3
 80035e0:	3301      	adds	r3, #1
 80035e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e6:	e051      	b.n	800368c <HAL_I2C_Init+0x1dc>
 80035e8:	2304      	movs	r3, #4
 80035ea:	e04f      	b.n	800368c <HAL_I2C_Init+0x1dc>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d111      	bne.n	8003618 <HAL_I2C_Init+0x168>
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1e58      	subs	r0, r3, #1
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6859      	ldr	r1, [r3, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	005b      	lsls	r3, r3, #1
 8003600:	440b      	add	r3, r1
 8003602:	fbb0 f3f3 	udiv	r3, r0, r3
 8003606:	3301      	adds	r3, #1
 8003608:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800360c:	2b00      	cmp	r3, #0
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	e012      	b.n	800363e <HAL_I2C_Init+0x18e>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1e58      	subs	r0, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	0099      	lsls	r1, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	2b00      	cmp	r3, #0
 8003636:	bf0c      	ite	eq
 8003638:	2301      	moveq	r3, #1
 800363a:	2300      	movne	r3, #0
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d001      	beq.n	8003646 <HAL_I2C_Init+0x196>
 8003642:	2301      	movs	r3, #1
 8003644:	e022      	b.n	800368c <HAL_I2C_Init+0x1dc>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	2b00      	cmp	r3, #0
 800364c:	d10e      	bne.n	800366c <HAL_I2C_Init+0x1bc>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	1e58      	subs	r0, r3, #1
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6859      	ldr	r1, [r3, #4]
 8003656:	460b      	mov	r3, r1
 8003658:	005b      	lsls	r3, r3, #1
 800365a:	440b      	add	r3, r1
 800365c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003660:	3301      	adds	r3, #1
 8003662:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003666:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800366a:	e00f      	b.n	800368c <HAL_I2C_Init+0x1dc>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e58      	subs	r0, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	0099      	lsls	r1, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003682:	3301      	adds	r3, #1
 8003684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003688:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	6809      	ldr	r1, [r1, #0]
 8003690:	4313      	orrs	r3, r2
 8003692:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	69da      	ldr	r2, [r3, #28]
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	431a      	orrs	r2, r3
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	430a      	orrs	r2, r1
 80036ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80036ba:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6911      	ldr	r1, [r2, #16]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	68d2      	ldr	r2, [r2, #12]
 80036c6:	4311      	orrs	r1, r2
 80036c8:	687a      	ldr	r2, [r7, #4]
 80036ca:	6812      	ldr	r2, [r2, #0]
 80036cc:	430b      	orrs	r3, r1
 80036ce:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	68db      	ldr	r3, [r3, #12]
 80036d6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695a      	ldr	r2, [r3, #20]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	699b      	ldr	r3, [r3, #24]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	430a      	orrs	r2, r1
 80036ea:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0201 	orr.w	r2, r2, #1
 80036fa:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2200      	movs	r2, #0
 8003700:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2220      	movs	r2, #32
 8003706:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2200      	movs	r2, #0
 8003714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003718:	2300      	movs	r3, #0
}
 800371a:	4618      	mov	r0, r3
 800371c:	3710      	adds	r7, #16
 800371e:	46bd      	mov	sp, r7
 8003720:	bd80      	pop	{r7, pc}
 8003722:	bf00      	nop
 8003724:	000186a0 	.word	0x000186a0
 8003728:	001e847f 	.word	0x001e847f
 800372c:	003d08ff 	.word	0x003d08ff
 8003730:	431bde83 	.word	0x431bde83
 8003734:	10624dd3 	.word	0x10624dd3

08003738 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b088      	sub	sp, #32
 800373c:	af02      	add	r7, sp, #8
 800373e:	60f8      	str	r0, [r7, #12]
 8003740:	4608      	mov	r0, r1
 8003742:	4611      	mov	r1, r2
 8003744:	461a      	mov	r2, r3
 8003746:	4603      	mov	r3, r0
 8003748:	817b      	strh	r3, [r7, #10]
 800374a:	460b      	mov	r3, r1
 800374c:	813b      	strh	r3, [r7, #8]
 800374e:	4613      	mov	r3, r2
 8003750:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003752:	f7fe ff0d 	bl	8002570 <HAL_GetTick>
 8003756:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800375e:	b2db      	uxtb	r3, r3
 8003760:	2b20      	cmp	r3, #32
 8003762:	f040 80d9 	bne.w	8003918 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	9300      	str	r3, [sp, #0]
 800376a:	2319      	movs	r3, #25
 800376c:	2201      	movs	r2, #1
 800376e:	496d      	ldr	r1, [pc, #436]	; (8003924 <HAL_I2C_Mem_Write+0x1ec>)
 8003770:	68f8      	ldr	r0, [r7, #12]
 8003772:	f000 f971 	bl	8003a58 <I2C_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800377c:	2302      	movs	r3, #2
 800377e:	e0cc      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003786:	2b01      	cmp	r3, #1
 8003788:	d101      	bne.n	800378e <HAL_I2C_Mem_Write+0x56>
 800378a:	2302      	movs	r3, #2
 800378c:	e0c5      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2201      	movs	r2, #1
 8003792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f003 0301 	and.w	r3, r3, #1
 80037a0:	2b01      	cmp	r3, #1
 80037a2:	d007      	beq.n	80037b4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f042 0201 	orr.w	r2, r2, #1
 80037b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681a      	ldr	r2, [r3, #0]
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2221      	movs	r2, #33	; 0x21
 80037c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2240      	movs	r2, #64	; 0x40
 80037d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	2200      	movs	r2, #0
 80037d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6a3a      	ldr	r2, [r7, #32]
 80037de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80037e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a4d      	ldr	r2, [pc, #308]	; (8003928 <HAL_I2C_Mem_Write+0x1f0>)
 80037f4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80037f6:	88f8      	ldrh	r0, [r7, #6]
 80037f8:	893a      	ldrh	r2, [r7, #8]
 80037fa:	8979      	ldrh	r1, [r7, #10]
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	9301      	str	r3, [sp, #4]
 8003800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003802:	9300      	str	r3, [sp, #0]
 8003804:	4603      	mov	r3, r0
 8003806:	68f8      	ldr	r0, [r7, #12]
 8003808:	f000 f890 	bl	800392c <I2C_RequestMemoryWrite>
 800380c:	4603      	mov	r3, r0
 800380e:	2b00      	cmp	r3, #0
 8003810:	d052      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e081      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003816:	697a      	ldr	r2, [r7, #20]
 8003818:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f000 fa36 	bl	8003c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d00d      	beq.n	8003842 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	2b04      	cmp	r3, #4
 800382c:	d107      	bne.n	800383e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800383c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	e06b      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003846:	781a      	ldrb	r2, [r3, #0]
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003852:	1c5a      	adds	r2, r3, #1
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003868:	b29b      	uxth	r3, r3
 800386a:	3b01      	subs	r3, #1
 800386c:	b29a      	uxth	r2, r3
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	695b      	ldr	r3, [r3, #20]
 8003878:	f003 0304 	and.w	r3, r3, #4
 800387c:	2b04      	cmp	r3, #4
 800387e:	d11b      	bne.n	80038b8 <HAL_I2C_Mem_Write+0x180>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003884:	2b00      	cmp	r3, #0
 8003886:	d017      	beq.n	80038b8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800388c:	781a      	ldrb	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003898:	1c5a      	adds	r2, r3, #1
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038ae:	b29b      	uxth	r3, r3
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d1aa      	bne.n	8003816 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80038c0:	697a      	ldr	r2, [r7, #20]
 80038c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80038c4:	68f8      	ldr	r0, [r7, #12]
 80038c6:	f000 fa29 	bl	8003d1c <I2C_WaitOnBTFFlagUntilTimeout>
 80038ca:	4603      	mov	r3, r0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00d      	beq.n	80038ec <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2b04      	cmp	r3, #4
 80038d6:	d107      	bne.n	80038e8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038e6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e016      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2220      	movs	r2, #32
 8003900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	2200      	movs	r2, #0
 8003910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003914:	2300      	movs	r3, #0
 8003916:	e000      	b.n	800391a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003918:	2302      	movs	r3, #2
  }
}
 800391a:	4618      	mov	r0, r3
 800391c:	3718      	adds	r7, #24
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	00100002 	.word	0x00100002
 8003928:	ffff0000 	.word	0xffff0000

0800392c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af02      	add	r7, sp, #8
 8003932:	60f8      	str	r0, [r7, #12]
 8003934:	4608      	mov	r0, r1
 8003936:	4611      	mov	r1, r2
 8003938:	461a      	mov	r2, r3
 800393a:	4603      	mov	r3, r0
 800393c:	817b      	strh	r3, [r7, #10]
 800393e:	460b      	mov	r3, r1
 8003940:	813b      	strh	r3, [r7, #8]
 8003942:	4613      	mov	r3, r2
 8003944:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	681a      	ldr	r2, [r3, #0]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003954:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003958:	9300      	str	r3, [sp, #0]
 800395a:	6a3b      	ldr	r3, [r7, #32]
 800395c:	2200      	movs	r2, #0
 800395e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 f878 	bl	8003a58 <I2C_WaitOnFlagUntilTimeout>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00d      	beq.n	800398a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800397c:	d103      	bne.n	8003986 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003984:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e05f      	b.n	8003a4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800398a:	897b      	ldrh	r3, [r7, #10]
 800398c:	b2db      	uxtb	r3, r3
 800398e:	461a      	mov	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003998:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800399a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800399c:	6a3a      	ldr	r2, [r7, #32]
 800399e:	492d      	ldr	r1, [pc, #180]	; (8003a54 <I2C_RequestMemoryWrite+0x128>)
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 f8d3 	bl	8003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e04c      	b.n	8003a4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039b0:	2300      	movs	r3, #0
 80039b2:	617b      	str	r3, [r7, #20]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	695b      	ldr	r3, [r3, #20]
 80039ba:	617b      	str	r3, [r7, #20]
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	699b      	ldr	r3, [r3, #24]
 80039c2:	617b      	str	r3, [r7, #20]
 80039c4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039c8:	6a39      	ldr	r1, [r7, #32]
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f95e 	bl	8003c8c <I2C_WaitOnTXEFlagUntilTimeout>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00d      	beq.n	80039f2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039da:	2b04      	cmp	r3, #4
 80039dc:	d107      	bne.n	80039ee <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039ec:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e02b      	b.n	8003a4a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039f2:	88fb      	ldrh	r3, [r7, #6]
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d105      	bne.n	8003a04 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039f8:	893b      	ldrh	r3, [r7, #8]
 80039fa:	b2da      	uxtb	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	611a      	str	r2, [r3, #16]
 8003a02:	e021      	b.n	8003a48 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003a04:	893b      	ldrh	r3, [r7, #8]
 8003a06:	0a1b      	lsrs	r3, r3, #8
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	b2da      	uxtb	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a14:	6a39      	ldr	r1, [r7, #32]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 f938 	bl	8003c8c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d00d      	beq.n	8003a3e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a26:	2b04      	cmp	r3, #4
 8003a28:	d107      	bne.n	8003a3a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	681a      	ldr	r2, [r3, #0]
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a38:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e005      	b.n	8003a4a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a3e:	893b      	ldrh	r3, [r7, #8]
 8003a40:	b2da      	uxtb	r2, r3
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003a48:	2300      	movs	r3, #0
}
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	3718      	adds	r7, #24
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	bd80      	pop	{r7, pc}
 8003a52:	bf00      	nop
 8003a54:	00010002 	.word	0x00010002

08003a58 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	60f8      	str	r0, [r7, #12]
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	603b      	str	r3, [r7, #0]
 8003a64:	4613      	mov	r3, r2
 8003a66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003a68:	e048      	b.n	8003afc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a6a:	683b      	ldr	r3, [r7, #0]
 8003a6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a70:	d044      	beq.n	8003afc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a72:	f7fe fd7d 	bl	8002570 <HAL_GetTick>
 8003a76:	4602      	mov	r2, r0
 8003a78:	69bb      	ldr	r3, [r7, #24]
 8003a7a:	1ad3      	subs	r3, r2, r3
 8003a7c:	683a      	ldr	r2, [r7, #0]
 8003a7e:	429a      	cmp	r2, r3
 8003a80:	d302      	bcc.n	8003a88 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d139      	bne.n	8003afc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003a88:	68bb      	ldr	r3, [r7, #8]
 8003a8a:	0c1b      	lsrs	r3, r3, #16
 8003a8c:	b2db      	uxtb	r3, r3
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d10d      	bne.n	8003aae <I2C_WaitOnFlagUntilTimeout+0x56>
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	695b      	ldr	r3, [r3, #20]
 8003a98:	43da      	mvns	r2, r3
 8003a9a:	68bb      	ldr	r3, [r7, #8]
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	b29b      	uxth	r3, r3
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	bf0c      	ite	eq
 8003aa4:	2301      	moveq	r3, #1
 8003aa6:	2300      	movne	r3, #0
 8003aa8:	b2db      	uxtb	r3, r3
 8003aaa:	461a      	mov	r2, r3
 8003aac:	e00c      	b.n	8003ac8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	699b      	ldr	r3, [r3, #24]
 8003ab4:	43da      	mvns	r2, r3
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	4013      	ands	r3, r2
 8003aba:	b29b      	uxth	r3, r3
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	bf0c      	ite	eq
 8003ac0:	2301      	moveq	r3, #1
 8003ac2:	2300      	movne	r3, #0
 8003ac4:	b2db      	uxtb	r3, r3
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	79fb      	ldrb	r3, [r7, #7]
 8003aca:	429a      	cmp	r2, r3
 8003acc:	d116      	bne.n	8003afc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e023      	b.n	8003b44 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10d      	bne.n	8003b22 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	695b      	ldr	r3, [r3, #20]
 8003b0c:	43da      	mvns	r2, r3
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	4013      	ands	r3, r2
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	bf0c      	ite	eq
 8003b18:	2301      	moveq	r3, #1
 8003b1a:	2300      	movne	r3, #0
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	461a      	mov	r2, r3
 8003b20:	e00c      	b.n	8003b3c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	699b      	ldr	r3, [r3, #24]
 8003b28:	43da      	mvns	r2, r3
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	4013      	ands	r3, r2
 8003b2e:	b29b      	uxth	r3, r3
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	bf0c      	ite	eq
 8003b34:	2301      	moveq	r3, #1
 8003b36:	2300      	movne	r3, #0
 8003b38:	b2db      	uxtb	r3, r3
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	79fb      	ldrb	r3, [r7, #7]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d093      	beq.n	8003a6a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b42:	2300      	movs	r3, #0
}
 8003b44:	4618      	mov	r0, r3
 8003b46:	3710      	adds	r7, #16
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}

08003b4c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b084      	sub	sp, #16
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	60f8      	str	r0, [r7, #12]
 8003b54:	60b9      	str	r1, [r7, #8]
 8003b56:	607a      	str	r2, [r7, #4]
 8003b58:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003b5a:	e071      	b.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	695b      	ldr	r3, [r3, #20]
 8003b62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b6a:	d123      	bne.n	8003bb4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b7a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003b84:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	2220      	movs	r2, #32
 8003b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	f043 0204 	orr.w	r2, r3, #4
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	e067      	b.n	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bba:	d041      	beq.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bbc:	f7fe fcd8 	bl	8002570 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	687a      	ldr	r2, [r7, #4]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d302      	bcc.n	8003bd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d136      	bne.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003bd2:	68bb      	ldr	r3, [r7, #8]
 8003bd4:	0c1b      	lsrs	r3, r3, #16
 8003bd6:	b2db      	uxtb	r3, r3
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	d10c      	bne.n	8003bf6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	43da      	mvns	r2, r3
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	4013      	ands	r3, r2
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	bf14      	ite	ne
 8003bee:	2301      	movne	r3, #1
 8003bf0:	2300      	moveq	r3, #0
 8003bf2:	b2db      	uxtb	r3, r3
 8003bf4:	e00b      	b.n	8003c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	699b      	ldr	r3, [r3, #24]
 8003bfc:	43da      	mvns	r2, r3
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	4013      	ands	r3, r2
 8003c02:	b29b      	uxth	r3, r3
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	bf14      	ite	ne
 8003c08:	2301      	movne	r3, #1
 8003c0a:	2300      	moveq	r3, #0
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d016      	beq.n	8003c40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2220      	movs	r2, #32
 8003c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	2200      	movs	r2, #0
 8003c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c2c:	f043 0220 	orr.w	r2, r3, #32
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2200      	movs	r2, #0
 8003c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e021      	b.n	8003c84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	0c1b      	lsrs	r3, r3, #16
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d10c      	bne.n	8003c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	695b      	ldr	r3, [r3, #20]
 8003c50:	43da      	mvns	r2, r3
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	4013      	ands	r3, r2
 8003c56:	b29b      	uxth	r3, r3
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	bf14      	ite	ne
 8003c5c:	2301      	movne	r3, #1
 8003c5e:	2300      	moveq	r3, #0
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	e00b      	b.n	8003c7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699b      	ldr	r3, [r3, #24]
 8003c6a:	43da      	mvns	r2, r3
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	bf14      	ite	ne
 8003c76:	2301      	movne	r3, #1
 8003c78:	2300      	moveq	r3, #0
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	f47f af6d 	bne.w	8003b5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003c82:	2300      	movs	r3, #0
}
 8003c84:	4618      	mov	r0, r3
 8003c86:	3710      	adds	r7, #16
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bd80      	pop	{r7, pc}

08003c8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	60f8      	str	r0, [r7, #12]
 8003c94:	60b9      	str	r1, [r7, #8]
 8003c96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003c98:	e034      	b.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003c9a:	68f8      	ldr	r0, [r7, #12]
 8003c9c:	f000 f886 	bl	8003dac <I2C_IsAcknowledgeFailed>
 8003ca0:	4603      	mov	r3, r0
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d001      	beq.n	8003caa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e034      	b.n	8003d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003caa:	68bb      	ldr	r3, [r7, #8]
 8003cac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cb0:	d028      	beq.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cb2:	f7fe fc5d 	bl	8002570 <HAL_GetTick>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	68ba      	ldr	r2, [r7, #8]
 8003cbe:	429a      	cmp	r2, r3
 8003cc0:	d302      	bcc.n	8003cc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d11d      	bne.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd2:	2b80      	cmp	r3, #128	; 0x80
 8003cd4:	d016      	beq.n	8003d04 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	2200      	movs	r2, #0
 8003cda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf0:	f043 0220 	orr.w	r2, r3, #32
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d00:	2301      	movs	r3, #1
 8003d02:	e007      	b.n	8003d14 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d0e:	2b80      	cmp	r3, #128	; 0x80
 8003d10:	d1c3      	bne.n	8003c9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	60f8      	str	r0, [r7, #12]
 8003d24:	60b9      	str	r1, [r7, #8]
 8003d26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d28:	e034      	b.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 f83e 	bl	8003dac <I2C_IsAcknowledgeFailed>
 8003d30:	4603      	mov	r3, r0
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d001      	beq.n	8003d3a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	e034      	b.n	8003da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d3a:	68bb      	ldr	r3, [r7, #8]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d40:	d028      	beq.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d42:	f7fe fc15 	bl	8002570 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	68ba      	ldr	r2, [r7, #8]
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d302      	bcc.n	8003d58 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d11d      	bne.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d016      	beq.n	8003d94 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	2220      	movs	r2, #32
 8003d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d80:	f043 0220 	orr.w	r2, r3, #32
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e007      	b.n	8003da4 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b04      	cmp	r3, #4
 8003da0:	d1c3      	bne.n	8003d2a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003da2:	2300      	movs	r3, #0
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}

08003dac <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003dac:	b480      	push	{r7}
 8003dae:	b083      	sub	sp, #12
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dc2:	d11b      	bne.n	8003dfc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dcc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003de8:	f043 0204 	orr.w	r2, r3, #4
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b086      	sub	sp, #24
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e272      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0301 	and.w	r3, r3, #1
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 8087 	beq.w	8003f36 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003e28:	4b92      	ldr	r3, [pc, #584]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003e2a:	685b      	ldr	r3, [r3, #4]
 8003e2c:	f003 030c 	and.w	r3, r3, #12
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d00c      	beq.n	8003e4e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003e34:	4b8f      	ldr	r3, [pc, #572]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f003 030c 	and.w	r3, r3, #12
 8003e3c:	2b08      	cmp	r3, #8
 8003e3e:	d112      	bne.n	8003e66 <HAL_RCC_OscConfig+0x5e>
 8003e40:	4b8c      	ldr	r3, [pc, #560]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e4c:	d10b      	bne.n	8003e66 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e4e:	4b89      	ldr	r3, [pc, #548]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d06c      	beq.n	8003f34 <HAL_RCC_OscConfig+0x12c>
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d168      	bne.n	8003f34 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e24c      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	685b      	ldr	r3, [r3, #4]
 8003e6a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e6e:	d106      	bne.n	8003e7e <HAL_RCC_OscConfig+0x76>
 8003e70:	4b80      	ldr	r3, [pc, #512]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	4a7f      	ldr	r2, [pc, #508]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003e76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e7a:	6013      	str	r3, [r2, #0]
 8003e7c:	e02e      	b.n	8003edc <HAL_RCC_OscConfig+0xd4>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10c      	bne.n	8003ea0 <HAL_RCC_OscConfig+0x98>
 8003e86:	4b7b      	ldr	r3, [pc, #492]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a7a      	ldr	r2, [pc, #488]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003e8c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e90:	6013      	str	r3, [r2, #0]
 8003e92:	4b78      	ldr	r3, [pc, #480]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a77      	ldr	r2, [pc, #476]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003e98:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e9c:	6013      	str	r3, [r2, #0]
 8003e9e:	e01d      	b.n	8003edc <HAL_RCC_OscConfig+0xd4>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	685b      	ldr	r3, [r3, #4]
 8003ea4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ea8:	d10c      	bne.n	8003ec4 <HAL_RCC_OscConfig+0xbc>
 8003eaa:	4b72      	ldr	r3, [pc, #456]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a71      	ldr	r2, [pc, #452]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003eb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003eb4:	6013      	str	r3, [r2, #0]
 8003eb6:	4b6f      	ldr	r3, [pc, #444]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a6e      	ldr	r2, [pc, #440]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003ebc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ec0:	6013      	str	r3, [r2, #0]
 8003ec2:	e00b      	b.n	8003edc <HAL_RCC_OscConfig+0xd4>
 8003ec4:	4b6b      	ldr	r3, [pc, #428]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a6a      	ldr	r2, [pc, #424]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003eca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ece:	6013      	str	r3, [r2, #0]
 8003ed0:	4b68      	ldr	r3, [pc, #416]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a67      	ldr	r2, [pc, #412]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003ed6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eda:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d013      	beq.n	8003f0c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ee4:	f7fe fb44 	bl	8002570 <HAL_GetTick>
 8003ee8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003eea:	e008      	b.n	8003efe <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003eec:	f7fe fb40 	bl	8002570 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	2b64      	cmp	r3, #100	; 0x64
 8003ef8:	d901      	bls.n	8003efe <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003efa:	2303      	movs	r3, #3
 8003efc:	e200      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	4b5d      	ldr	r3, [pc, #372]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d0f0      	beq.n	8003eec <HAL_RCC_OscConfig+0xe4>
 8003f0a:	e014      	b.n	8003f36 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f0c:	f7fe fb30 	bl	8002570 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f12:	e008      	b.n	8003f26 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003f14:	f7fe fb2c 	bl	8002570 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b64      	cmp	r3, #100	; 0x64
 8003f20:	d901      	bls.n	8003f26 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1ec      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f26:	4b53      	ldr	r3, [pc, #332]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d1f0      	bne.n	8003f14 <HAL_RCC_OscConfig+0x10c>
 8003f32:	e000      	b.n	8003f36 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d063      	beq.n	800400a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003f42:	4b4c      	ldr	r3, [pc, #304]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 030c 	and.w	r3, r3, #12
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00b      	beq.n	8003f66 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003f4e:	4b49      	ldr	r3, [pc, #292]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f003 030c 	and.w	r3, r3, #12
 8003f56:	2b08      	cmp	r3, #8
 8003f58:	d11c      	bne.n	8003f94 <HAL_RCC_OscConfig+0x18c>
 8003f5a:	4b46      	ldr	r3, [pc, #280]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d116      	bne.n	8003f94 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f66:	4b43      	ldr	r3, [pc, #268]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f003 0302 	and.w	r3, r3, #2
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d005      	beq.n	8003f7e <HAL_RCC_OscConfig+0x176>
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	2b01      	cmp	r3, #1
 8003f78:	d001      	beq.n	8003f7e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e1c0      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f7e:	4b3d      	ldr	r3, [pc, #244]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	695b      	ldr	r3, [r3, #20]
 8003f8a:	00db      	lsls	r3, r3, #3
 8003f8c:	4939      	ldr	r1, [pc, #228]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003f8e:	4313      	orrs	r3, r2
 8003f90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f92:	e03a      	b.n	800400a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	691b      	ldr	r3, [r3, #16]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d020      	beq.n	8003fde <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f9c:	4b36      	ldr	r3, [pc, #216]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fa2:	f7fe fae5 	bl	8002570 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fa8:	e008      	b.n	8003fbc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003faa:	f7fe fae1 	bl	8002570 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d901      	bls.n	8003fbc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003fb8:	2303      	movs	r3, #3
 8003fba:	e1a1      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fbc:	4b2d      	ldr	r3, [pc, #180]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d0f0      	beq.n	8003faa <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003fc8:	4b2a      	ldr	r3, [pc, #168]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	695b      	ldr	r3, [r3, #20]
 8003fd4:	00db      	lsls	r3, r3, #3
 8003fd6:	4927      	ldr	r1, [pc, #156]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	600b      	str	r3, [r1, #0]
 8003fdc:	e015      	b.n	800400a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003fde:	4b26      	ldr	r3, [pc, #152]	; (8004078 <HAL_RCC_OscConfig+0x270>)
 8003fe0:	2200      	movs	r2, #0
 8003fe2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe4:	f7fe fac4 	bl	8002570 <HAL_GetTick>
 8003fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003fea:	e008      	b.n	8003ffe <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003fec:	f7fe fac0 	bl	8002570 <HAL_GetTick>
 8003ff0:	4602      	mov	r2, r0
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	1ad3      	subs	r3, r2, r3
 8003ff6:	2b02      	cmp	r3, #2
 8003ff8:	d901      	bls.n	8003ffe <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e180      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ffe:	4b1d      	ldr	r3, [pc, #116]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f003 0302 	and.w	r3, r3, #2
 8004006:	2b00      	cmp	r3, #0
 8004008:	d1f0      	bne.n	8003fec <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b00      	cmp	r3, #0
 8004014:	d03a      	beq.n	800408c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	699b      	ldr	r3, [r3, #24]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d019      	beq.n	8004052 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <HAL_RCC_OscConfig+0x274>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004024:	f7fe faa4 	bl	8002570 <HAL_GetTick>
 8004028:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800402a:	e008      	b.n	800403e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800402c:	f7fe faa0 	bl	8002570 <HAL_GetTick>
 8004030:	4602      	mov	r2, r0
 8004032:	693b      	ldr	r3, [r7, #16]
 8004034:	1ad3      	subs	r3, r2, r3
 8004036:	2b02      	cmp	r3, #2
 8004038:	d901      	bls.n	800403e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800403a:	2303      	movs	r3, #3
 800403c:	e160      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800403e:	4b0d      	ldr	r3, [pc, #52]	; (8004074 <HAL_RCC_OscConfig+0x26c>)
 8004040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d0f0      	beq.n	800402c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800404a:	2001      	movs	r0, #1
 800404c:	f000 face 	bl	80045ec <RCC_Delay>
 8004050:	e01c      	b.n	800408c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004052:	4b0a      	ldr	r3, [pc, #40]	; (800407c <HAL_RCC_OscConfig+0x274>)
 8004054:	2200      	movs	r2, #0
 8004056:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004058:	f7fe fa8a 	bl	8002570 <HAL_GetTick>
 800405c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800405e:	e00f      	b.n	8004080 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004060:	f7fe fa86 	bl	8002570 <HAL_GetTick>
 8004064:	4602      	mov	r2, r0
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	2b02      	cmp	r3, #2
 800406c:	d908      	bls.n	8004080 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e146      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
 8004072:	bf00      	nop
 8004074:	40021000 	.word	0x40021000
 8004078:	42420000 	.word	0x42420000
 800407c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004080:	4b92      	ldr	r3, [pc, #584]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	f003 0302 	and.w	r3, r3, #2
 8004088:	2b00      	cmp	r3, #0
 800408a:	d1e9      	bne.n	8004060 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0304 	and.w	r3, r3, #4
 8004094:	2b00      	cmp	r3, #0
 8004096:	f000 80a6 	beq.w	80041e6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800409a:	2300      	movs	r3, #0
 800409c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800409e:	4b8b      	ldr	r3, [pc, #556]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d10d      	bne.n	80040c6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040aa:	4b88      	ldr	r3, [pc, #544]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	4a87      	ldr	r2, [pc, #540]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 80040b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040b4:	61d3      	str	r3, [r2, #28]
 80040b6:	4b85      	ldr	r3, [pc, #532]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 80040b8:	69db      	ldr	r3, [r3, #28]
 80040ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040c2:	2301      	movs	r3, #1
 80040c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040c6:	4b82      	ldr	r3, [pc, #520]	; (80042d0 <HAL_RCC_OscConfig+0x4c8>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d118      	bne.n	8004104 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040d2:	4b7f      	ldr	r3, [pc, #508]	; (80042d0 <HAL_RCC_OscConfig+0x4c8>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a7e      	ldr	r2, [pc, #504]	; (80042d0 <HAL_RCC_OscConfig+0x4c8>)
 80040d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80040de:	f7fe fa47 	bl	8002570 <HAL_GetTick>
 80040e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040e4:	e008      	b.n	80040f8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80040e6:	f7fe fa43 	bl	8002570 <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b64      	cmp	r3, #100	; 0x64
 80040f2:	d901      	bls.n	80040f8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e103      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040f8:	4b75      	ldr	r3, [pc, #468]	; (80042d0 <HAL_RCC_OscConfig+0x4c8>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004100:	2b00      	cmp	r3, #0
 8004102:	d0f0      	beq.n	80040e6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d106      	bne.n	800411a <HAL_RCC_OscConfig+0x312>
 800410c:	4b6f      	ldr	r3, [pc, #444]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 800410e:	6a1b      	ldr	r3, [r3, #32]
 8004110:	4a6e      	ldr	r2, [pc, #440]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004112:	f043 0301 	orr.w	r3, r3, #1
 8004116:	6213      	str	r3, [r2, #32]
 8004118:	e02d      	b.n	8004176 <HAL_RCC_OscConfig+0x36e>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	68db      	ldr	r3, [r3, #12]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d10c      	bne.n	800413c <HAL_RCC_OscConfig+0x334>
 8004122:	4b6a      	ldr	r3, [pc, #424]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	4a69      	ldr	r2, [pc, #420]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004128:	f023 0301 	bic.w	r3, r3, #1
 800412c:	6213      	str	r3, [r2, #32]
 800412e:	4b67      	ldr	r3, [pc, #412]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004130:	6a1b      	ldr	r3, [r3, #32]
 8004132:	4a66      	ldr	r2, [pc, #408]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004134:	f023 0304 	bic.w	r3, r3, #4
 8004138:	6213      	str	r3, [r2, #32]
 800413a:	e01c      	b.n	8004176 <HAL_RCC_OscConfig+0x36e>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	2b05      	cmp	r3, #5
 8004142:	d10c      	bne.n	800415e <HAL_RCC_OscConfig+0x356>
 8004144:	4b61      	ldr	r3, [pc, #388]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	4a60      	ldr	r2, [pc, #384]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 800414a:	f043 0304 	orr.w	r3, r3, #4
 800414e:	6213      	str	r3, [r2, #32]
 8004150:	4b5e      	ldr	r3, [pc, #376]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004152:	6a1b      	ldr	r3, [r3, #32]
 8004154:	4a5d      	ldr	r2, [pc, #372]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004156:	f043 0301 	orr.w	r3, r3, #1
 800415a:	6213      	str	r3, [r2, #32]
 800415c:	e00b      	b.n	8004176 <HAL_RCC_OscConfig+0x36e>
 800415e:	4b5b      	ldr	r3, [pc, #364]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	4a5a      	ldr	r2, [pc, #360]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004164:	f023 0301 	bic.w	r3, r3, #1
 8004168:	6213      	str	r3, [r2, #32]
 800416a:	4b58      	ldr	r3, [pc, #352]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	4a57      	ldr	r2, [pc, #348]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004170:	f023 0304 	bic.w	r3, r3, #4
 8004174:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	68db      	ldr	r3, [r3, #12]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d015      	beq.n	80041aa <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800417e:	f7fe f9f7 	bl	8002570 <HAL_GetTick>
 8004182:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004184:	e00a      	b.n	800419c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004186:	f7fe f9f3 	bl	8002570 <HAL_GetTick>
 800418a:	4602      	mov	r2, r0
 800418c:	693b      	ldr	r3, [r7, #16]
 800418e:	1ad3      	subs	r3, r2, r3
 8004190:	f241 3288 	movw	r2, #5000	; 0x1388
 8004194:	4293      	cmp	r3, r2
 8004196:	d901      	bls.n	800419c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004198:	2303      	movs	r3, #3
 800419a:	e0b1      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800419c:	4b4b      	ldr	r3, [pc, #300]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	f003 0302 	and.w	r3, r3, #2
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0ee      	beq.n	8004186 <HAL_RCC_OscConfig+0x37e>
 80041a8:	e014      	b.n	80041d4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041aa:	f7fe f9e1 	bl	8002570 <HAL_GetTick>
 80041ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b0:	e00a      	b.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041b2:	f7fe f9dd 	bl	8002570 <HAL_GetTick>
 80041b6:	4602      	mov	r2, r0
 80041b8:	693b      	ldr	r3, [r7, #16]
 80041ba:	1ad3      	subs	r3, r2, r3
 80041bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d901      	bls.n	80041c8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80041c4:	2303      	movs	r3, #3
 80041c6:	e09b      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041c8:	4b40      	ldr	r3, [pc, #256]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 80041ca:	6a1b      	ldr	r3, [r3, #32]
 80041cc:	f003 0302 	and.w	r3, r3, #2
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d1ee      	bne.n	80041b2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80041d4:	7dfb      	ldrb	r3, [r7, #23]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d105      	bne.n	80041e6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041da:	4b3c      	ldr	r3, [pc, #240]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	4a3b      	ldr	r2, [pc, #236]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 80041e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041e4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	69db      	ldr	r3, [r3, #28]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	f000 8087 	beq.w	80042fe <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80041f0:	4b36      	ldr	r3, [pc, #216]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f003 030c 	and.w	r3, r3, #12
 80041f8:	2b08      	cmp	r3, #8
 80041fa:	d061      	beq.n	80042c0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	69db      	ldr	r3, [r3, #28]
 8004200:	2b02      	cmp	r3, #2
 8004202:	d146      	bne.n	8004292 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004204:	4b33      	ldr	r3, [pc, #204]	; (80042d4 <HAL_RCC_OscConfig+0x4cc>)
 8004206:	2200      	movs	r2, #0
 8004208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800420a:	f7fe f9b1 	bl	8002570 <HAL_GetTick>
 800420e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004210:	e008      	b.n	8004224 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004212:	f7fe f9ad 	bl	8002570 <HAL_GetTick>
 8004216:	4602      	mov	r2, r0
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	1ad3      	subs	r3, r2, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d901      	bls.n	8004224 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004220:	2303      	movs	r3, #3
 8004222:	e06d      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004224:	4b29      	ldr	r3, [pc, #164]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d1f0      	bne.n	8004212 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004238:	d108      	bne.n	800424c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800423a:	4b24      	ldr	r3, [pc, #144]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	689b      	ldr	r3, [r3, #8]
 8004246:	4921      	ldr	r1, [pc, #132]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004248:	4313      	orrs	r3, r2
 800424a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800424c:	4b1f      	ldr	r3, [pc, #124]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a19      	ldr	r1, [r3, #32]
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425c:	430b      	orrs	r3, r1
 800425e:	491b      	ldr	r1, [pc, #108]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004260:	4313      	orrs	r3, r2
 8004262:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004264:	4b1b      	ldr	r3, [pc, #108]	; (80042d4 <HAL_RCC_OscConfig+0x4cc>)
 8004266:	2201      	movs	r2, #1
 8004268:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800426a:	f7fe f981 	bl	8002570 <HAL_GetTick>
 800426e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004270:	e008      	b.n	8004284 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004272:	f7fe f97d 	bl	8002570 <HAL_GetTick>
 8004276:	4602      	mov	r2, r0
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	1ad3      	subs	r3, r2, r3
 800427c:	2b02      	cmp	r3, #2
 800427e:	d901      	bls.n	8004284 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004280:	2303      	movs	r3, #3
 8004282:	e03d      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004284:	4b11      	ldr	r3, [pc, #68]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800428c:	2b00      	cmp	r3, #0
 800428e:	d0f0      	beq.n	8004272 <HAL_RCC_OscConfig+0x46a>
 8004290:	e035      	b.n	80042fe <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004292:	4b10      	ldr	r3, [pc, #64]	; (80042d4 <HAL_RCC_OscConfig+0x4cc>)
 8004294:	2200      	movs	r2, #0
 8004296:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004298:	f7fe f96a 	bl	8002570 <HAL_GetTick>
 800429c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800429e:	e008      	b.n	80042b2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042a0:	f7fe f966 	bl	8002570 <HAL_GetTick>
 80042a4:	4602      	mov	r2, r0
 80042a6:	693b      	ldr	r3, [r7, #16]
 80042a8:	1ad3      	subs	r3, r2, r3
 80042aa:	2b02      	cmp	r3, #2
 80042ac:	d901      	bls.n	80042b2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e026      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80042b2:	4b06      	ldr	r3, [pc, #24]	; (80042cc <HAL_RCC_OscConfig+0x4c4>)
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d1f0      	bne.n	80042a0 <HAL_RCC_OscConfig+0x498>
 80042be:	e01e      	b.n	80042fe <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	69db      	ldr	r3, [r3, #28]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d107      	bne.n	80042d8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80042c8:	2301      	movs	r3, #1
 80042ca:	e019      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
 80042cc:	40021000 	.word	0x40021000
 80042d0:	40007000 	.word	0x40007000
 80042d4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <HAL_RCC_OscConfig+0x500>)
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a1b      	ldr	r3, [r3, #32]
 80042e8:	429a      	cmp	r2, r3
 80042ea:	d106      	bne.n	80042fa <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3718      	adds	r7, #24
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000

0800430c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d101      	bne.n	8004320 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800431c:	2301      	movs	r3, #1
 800431e:	e0d0      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004320:	4b6a      	ldr	r3, [pc, #424]	; (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0307 	and.w	r3, r3, #7
 8004328:	683a      	ldr	r2, [r7, #0]
 800432a:	429a      	cmp	r2, r3
 800432c:	d910      	bls.n	8004350 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800432e:	4b67      	ldr	r3, [pc, #412]	; (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 0207 	bic.w	r2, r3, #7
 8004336:	4965      	ldr	r1, [pc, #404]	; (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	4313      	orrs	r3, r2
 800433c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800433e:	4b63      	ldr	r3, [pc, #396]	; (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f003 0307 	and.w	r3, r3, #7
 8004346:	683a      	ldr	r2, [r7, #0]
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e0b8      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f003 0302 	and.w	r3, r3, #2
 8004358:	2b00      	cmp	r3, #0
 800435a:	d020      	beq.n	800439e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d005      	beq.n	8004374 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004368:	4b59      	ldr	r3, [pc, #356]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a58      	ldr	r2, [pc, #352]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 800436e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004372:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d005      	beq.n	800438c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004380:	4b53      	ldr	r3, [pc, #332]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	4a52      	ldr	r2, [pc, #328]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004386:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800438a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800438c:	4b50      	ldr	r3, [pc, #320]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	494d      	ldr	r1, [pc, #308]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 800439a:	4313      	orrs	r3, r2
 800439c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 0301 	and.w	r3, r3, #1
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d040      	beq.n	800442c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	685b      	ldr	r3, [r3, #4]
 80043ae:	2b01      	cmp	r3, #1
 80043b0:	d107      	bne.n	80043c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043b2:	4b47      	ldr	r3, [pc, #284]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d115      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e07f      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	685b      	ldr	r3, [r3, #4]
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d107      	bne.n	80043da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043ca:	4b41      	ldr	r3, [pc, #260]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e073      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043da:	4b3d      	ldr	r3, [pc, #244]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 0302 	and.w	r3, r3, #2
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	e06b      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043ea:	4b39      	ldr	r3, [pc, #228]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 80043ec:	685b      	ldr	r3, [r3, #4]
 80043ee:	f023 0203 	bic.w	r2, r3, #3
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	685b      	ldr	r3, [r3, #4]
 80043f6:	4936      	ldr	r1, [pc, #216]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043fc:	f7fe f8b8 	bl	8002570 <HAL_GetTick>
 8004400:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004402:	e00a      	b.n	800441a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004404:	f7fe f8b4 	bl	8002570 <HAL_GetTick>
 8004408:	4602      	mov	r2, r0
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	1ad3      	subs	r3, r2, r3
 800440e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004412:	4293      	cmp	r3, r2
 8004414:	d901      	bls.n	800441a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004416:	2303      	movs	r3, #3
 8004418:	e053      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441a:	4b2d      	ldr	r3, [pc, #180]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 800441c:	685b      	ldr	r3, [r3, #4]
 800441e:	f003 020c 	and.w	r2, r3, #12
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	009b      	lsls	r3, r3, #2
 8004428:	429a      	cmp	r2, r3
 800442a:	d1eb      	bne.n	8004404 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800442c:	4b27      	ldr	r3, [pc, #156]	; (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f003 0307 	and.w	r3, r3, #7
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d210      	bcs.n	800445c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800443a:	4b24      	ldr	r3, [pc, #144]	; (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f023 0207 	bic.w	r2, r3, #7
 8004442:	4922      	ldr	r1, [pc, #136]	; (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	4313      	orrs	r3, r2
 8004448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444a:	4b20      	ldr	r3, [pc, #128]	; (80044cc <HAL_RCC_ClockConfig+0x1c0>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0307 	and.w	r3, r3, #7
 8004452:	683a      	ldr	r2, [r7, #0]
 8004454:	429a      	cmp	r2, r3
 8004456:	d001      	beq.n	800445c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004458:	2301      	movs	r3, #1
 800445a:	e032      	b.n	80044c2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b00      	cmp	r3, #0
 8004466:	d008      	beq.n	800447a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004468:	4b19      	ldr	r3, [pc, #100]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4916      	ldr	r1, [pc, #88]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004476:	4313      	orrs	r3, r2
 8004478:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0308 	and.w	r3, r3, #8
 8004482:	2b00      	cmp	r3, #0
 8004484:	d009      	beq.n	800449a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	691b      	ldr	r3, [r3, #16]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	490e      	ldr	r1, [pc, #56]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 8004496:	4313      	orrs	r3, r2
 8004498:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800449a:	f000 f821 	bl	80044e0 <HAL_RCC_GetSysClockFreq>
 800449e:	4602      	mov	r2, r0
 80044a0:	4b0b      	ldr	r3, [pc, #44]	; (80044d0 <HAL_RCC_ClockConfig+0x1c4>)
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	091b      	lsrs	r3, r3, #4
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	490a      	ldr	r1, [pc, #40]	; (80044d4 <HAL_RCC_ClockConfig+0x1c8>)
 80044ac:	5ccb      	ldrb	r3, [r1, r3]
 80044ae:	fa22 f303 	lsr.w	r3, r2, r3
 80044b2:	4a09      	ldr	r2, [pc, #36]	; (80044d8 <HAL_RCC_ClockConfig+0x1cc>)
 80044b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044b6:	4b09      	ldr	r3, [pc, #36]	; (80044dc <HAL_RCC_ClockConfig+0x1d0>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4618      	mov	r0, r3
 80044bc:	f7fe f816 	bl	80024ec <HAL_InitTick>

  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40022000 	.word	0x40022000
 80044d0:	40021000 	.word	0x40021000
 80044d4:	0800a900 	.word	0x0800a900
 80044d8:	20000020 	.word	0x20000020
 80044dc:	20000024 	.word	0x20000024

080044e0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044e0:	b480      	push	{r7}
 80044e2:	b087      	sub	sp, #28
 80044e4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	60fb      	str	r3, [r7, #12]
 80044ea:	2300      	movs	r3, #0
 80044ec:	60bb      	str	r3, [r7, #8]
 80044ee:	2300      	movs	r3, #0
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	2300      	movs	r3, #0
 80044f4:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80044f6:	2300      	movs	r3, #0
 80044f8:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80044fa:	4b1e      	ldr	r3, [pc, #120]	; (8004574 <HAL_RCC_GetSysClockFreq+0x94>)
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f003 030c 	and.w	r3, r3, #12
 8004506:	2b04      	cmp	r3, #4
 8004508:	d002      	beq.n	8004510 <HAL_RCC_GetSysClockFreq+0x30>
 800450a:	2b08      	cmp	r3, #8
 800450c:	d003      	beq.n	8004516 <HAL_RCC_GetSysClockFreq+0x36>
 800450e:	e027      	b.n	8004560 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004510:	4b19      	ldr	r3, [pc, #100]	; (8004578 <HAL_RCC_GetSysClockFreq+0x98>)
 8004512:	613b      	str	r3, [r7, #16]
      break;
 8004514:	e027      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	0c9b      	lsrs	r3, r3, #18
 800451a:	f003 030f 	and.w	r3, r3, #15
 800451e:	4a17      	ldr	r2, [pc, #92]	; (800457c <HAL_RCC_GetSysClockFreq+0x9c>)
 8004520:	5cd3      	ldrb	r3, [r2, r3]
 8004522:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d010      	beq.n	8004550 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800452e:	4b11      	ldr	r3, [pc, #68]	; (8004574 <HAL_RCC_GetSysClockFreq+0x94>)
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	0c5b      	lsrs	r3, r3, #17
 8004534:	f003 0301 	and.w	r3, r3, #1
 8004538:	4a11      	ldr	r2, [pc, #68]	; (8004580 <HAL_RCC_GetSysClockFreq+0xa0>)
 800453a:	5cd3      	ldrb	r3, [r2, r3]
 800453c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a0d      	ldr	r2, [pc, #52]	; (8004578 <HAL_RCC_GetSysClockFreq+0x98>)
 8004542:	fb03 f202 	mul.w	r2, r3, r2
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	fbb2 f3f3 	udiv	r3, r2, r3
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e004      	b.n	800455a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	4a0c      	ldr	r2, [pc, #48]	; (8004584 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004554:	fb02 f303 	mul.w	r3, r2, r3
 8004558:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800455a:	697b      	ldr	r3, [r7, #20]
 800455c:	613b      	str	r3, [r7, #16]
      break;
 800455e:	e002      	b.n	8004566 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004560:	4b05      	ldr	r3, [pc, #20]	; (8004578 <HAL_RCC_GetSysClockFreq+0x98>)
 8004562:	613b      	str	r3, [r7, #16]
      break;
 8004564:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004566:	693b      	ldr	r3, [r7, #16]
}
 8004568:	4618      	mov	r0, r3
 800456a:	371c      	adds	r7, #28
 800456c:	46bd      	mov	sp, r7
 800456e:	bc80      	pop	{r7}
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40021000 	.word	0x40021000
 8004578:	007a1200 	.word	0x007a1200
 800457c:	0800a918 	.word	0x0800a918
 8004580:	0800a928 	.word	0x0800a928
 8004584:	003d0900 	.word	0x003d0900

08004588 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004588:	b480      	push	{r7}
 800458a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800458c:	4b02      	ldr	r3, [pc, #8]	; (8004598 <HAL_RCC_GetHCLKFreq+0x10>)
 800458e:	681b      	ldr	r3, [r3, #0]
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	bc80      	pop	{r7}
 8004596:	4770      	bx	lr
 8004598:	20000020 	.word	0x20000020

0800459c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80045a0:	f7ff fff2 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045a4:	4602      	mov	r2, r0
 80045a6:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	0a1b      	lsrs	r3, r3, #8
 80045ac:	f003 0307 	and.w	r3, r3, #7
 80045b0:	4903      	ldr	r1, [pc, #12]	; (80045c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80045b2:	5ccb      	ldrb	r3, [r1, r3]
 80045b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	bd80      	pop	{r7, pc}
 80045bc:	40021000 	.word	0x40021000
 80045c0:	0800a910 	.word	0x0800a910

080045c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80045c8:	f7ff ffde 	bl	8004588 <HAL_RCC_GetHCLKFreq>
 80045cc:	4602      	mov	r2, r0
 80045ce:	4b05      	ldr	r3, [pc, #20]	; (80045e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	0adb      	lsrs	r3, r3, #11
 80045d4:	f003 0307 	and.w	r3, r3, #7
 80045d8:	4903      	ldr	r1, [pc, #12]	; (80045e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80045da:	5ccb      	ldrb	r3, [r1, r3]
 80045dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80045e0:	4618      	mov	r0, r3
 80045e2:	bd80      	pop	{r7, pc}
 80045e4:	40021000 	.word	0x40021000
 80045e8:	0800a910 	.word	0x0800a910

080045ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80045f4:	4b0a      	ldr	r3, [pc, #40]	; (8004620 <RCC_Delay+0x34>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	4a0a      	ldr	r2, [pc, #40]	; (8004624 <RCC_Delay+0x38>)
 80045fa:	fba2 2303 	umull	r2, r3, r2, r3
 80045fe:	0a5b      	lsrs	r3, r3, #9
 8004600:	687a      	ldr	r2, [r7, #4]
 8004602:	fb02 f303 	mul.w	r3, r2, r3
 8004606:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004608:	bf00      	nop
  }
  while (Delay --);
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1e5a      	subs	r2, r3, #1
 800460e:	60fa      	str	r2, [r7, #12]
 8004610:	2b00      	cmp	r3, #0
 8004612:	d1f9      	bne.n	8004608 <RCC_Delay+0x1c>
}
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr
 8004620:	20000020 	.word	0x20000020
 8004624:	10624dd3 	.word	0x10624dd3

08004628 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004630:	2300      	movs	r3, #0
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	2300      	movs	r3, #0
 8004636:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0301 	and.w	r3, r3, #1
 8004640:	2b00      	cmp	r3, #0
 8004642:	d07d      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004644:	2300      	movs	r3, #0
 8004646:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004648:	4b4f      	ldr	r3, [pc, #316]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800464a:	69db      	ldr	r3, [r3, #28]
 800464c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004650:	2b00      	cmp	r3, #0
 8004652:	d10d      	bne.n	8004670 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004654:	4b4c      	ldr	r3, [pc, #304]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	4a4b      	ldr	r2, [pc, #300]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800465a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800465e:	61d3      	str	r3, [r2, #28]
 8004660:	4b49      	ldr	r3, [pc, #292]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800466c:	2301      	movs	r3, #1
 800466e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	4b46      	ldr	r3, [pc, #280]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d118      	bne.n	80046ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800467c:	4b43      	ldr	r3, [pc, #268]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	4a42      	ldr	r2, [pc, #264]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004682:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004686:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004688:	f7fd ff72 	bl	8002570 <HAL_GetTick>
 800468c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800468e:	e008      	b.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004690:	f7fd ff6e 	bl	8002570 <HAL_GetTick>
 8004694:	4602      	mov	r2, r0
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	1ad3      	subs	r3, r2, r3
 800469a:	2b64      	cmp	r3, #100	; 0x64
 800469c:	d901      	bls.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800469e:	2303      	movs	r3, #3
 80046a0:	e06d      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a2:	4b3a      	ldr	r3, [pc, #232]	; (800478c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d0f0      	beq.n	8004690 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046ae:	4b36      	ldr	r3, [pc, #216]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046b0:	6a1b      	ldr	r3, [r3, #32]
 80046b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d02e      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d027      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046cc:	4b2e      	ldr	r3, [pc, #184]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046ce:	6a1b      	ldr	r3, [r3, #32]
 80046d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046d8:	2201      	movs	r2, #1
 80046da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046dc:	4b2c      	ldr	r3, [pc, #176]	; (8004790 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80046de:	2200      	movs	r2, #0
 80046e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80046e2:	4a29      	ldr	r2, [pc, #164]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	f003 0301 	and.w	r3, r3, #1
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d014      	beq.n	800471c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046f2:	f7fd ff3d 	bl	8002570 <HAL_GetTick>
 80046f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f8:	e00a      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046fa:	f7fd ff39 	bl	8002570 <HAL_GetTick>
 80046fe:	4602      	mov	r2, r0
 8004700:	693b      	ldr	r3, [r7, #16]
 8004702:	1ad3      	subs	r3, r2, r3
 8004704:	f241 3288 	movw	r2, #5000	; 0x1388
 8004708:	4293      	cmp	r3, r2
 800470a:	d901      	bls.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e036      	b.n	800477e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004710:	4b1d      	ldr	r3, [pc, #116]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004712:	6a1b      	ldr	r3, [r3, #32]
 8004714:	f003 0302 	and.w	r3, r3, #2
 8004718:	2b00      	cmp	r3, #0
 800471a:	d0ee      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800471c:	4b1a      	ldr	r3, [pc, #104]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	4917      	ldr	r1, [pc, #92]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800472a:	4313      	orrs	r3, r2
 800472c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800472e:	7dfb      	ldrb	r3, [r7, #23]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d105      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004734:	4b14      	ldr	r3, [pc, #80]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004736:	69db      	ldr	r3, [r3, #28]
 8004738:	4a13      	ldr	r2, [pc, #76]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800473a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f003 0302 	and.w	r3, r3, #2
 8004748:	2b00      	cmp	r3, #0
 800474a:	d008      	beq.n	800475e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800474c:	4b0e      	ldr	r3, [pc, #56]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	490b      	ldr	r1, [pc, #44]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800475a:	4313      	orrs	r3, r2
 800475c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	d008      	beq.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800476a:	4b07      	ldr	r3, [pc, #28]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	4904      	ldr	r1, [pc, #16]	; (8004788 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	3718      	adds	r7, #24
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
 8004786:	bf00      	nop
 8004788:	40021000 	.word	0x40021000
 800478c:	40007000 	.word	0x40007000
 8004790:	42420440 	.word	0x42420440

08004794 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e041      	b.n	800482a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d106      	bne.n	80047c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f7fd fcb2 	bl	8002124 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	3304      	adds	r3, #4
 80047d0:	4619      	mov	r1, r3
 80047d2:	4610      	mov	r0, r2
 80047d4:	f000 fab2 	bl	8004d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2201      	movs	r2, #1
 80047f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2201      	movs	r2, #1
 80047fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2201      	movs	r2, #1
 8004804:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2201      	movs	r2, #1
 8004824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004828:	2300      	movs	r3, #0
}
 800482a:	4618      	mov	r0, r3
 800482c:	3708      	adds	r7, #8
 800482e:	46bd      	mov	sp, r7
 8004830:	bd80      	pop	{r7, pc}

08004832 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b082      	sub	sp, #8
 8004836:	af00      	add	r7, sp, #0
 8004838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d101      	bne.n	8004844 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004840:	2301      	movs	r3, #1
 8004842:	e041      	b.n	80048c8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484a:	b2db      	uxtb	r3, r3
 800484c:	2b00      	cmp	r3, #0
 800484e:	d106      	bne.n	800485e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2200      	movs	r2, #0
 8004854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f000 f839 	bl	80048d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2202      	movs	r2, #2
 8004862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	3304      	adds	r3, #4
 800486e:	4619      	mov	r1, r3
 8004870:	4610      	mov	r0, r2
 8004872:	f000 fa63 	bl	8004d3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2201      	movs	r2, #1
 8004882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	2201      	movs	r2, #1
 800488a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2201      	movs	r2, #1
 8004892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2201      	movs	r2, #1
 800489a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2201      	movs	r2, #1
 80048a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2201      	movs	r2, #1
 80048aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2201      	movs	r2, #1
 80048b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	2201      	movs	r2, #1
 80048ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80048c6:	2300      	movs	r3, #0
}
 80048c8:	4618      	mov	r0, r3
 80048ca:	3708      	adds	r7, #8
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}

080048d0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b083      	sub	sp, #12
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80048d8:	bf00      	nop
 80048da:	370c      	adds	r7, #12
 80048dc:	46bd      	mov	sp, r7
 80048de:	bc80      	pop	{r7}
 80048e0:	4770      	bx	lr
	...

080048e4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b084      	sub	sp, #16
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	6078      	str	r0, [r7, #4]
 80048ec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d109      	bne.n	8004908 <HAL_TIM_PWM_Start+0x24>
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	bf14      	ite	ne
 8004900:	2301      	movne	r3, #1
 8004902:	2300      	moveq	r3, #0
 8004904:	b2db      	uxtb	r3, r3
 8004906:	e022      	b.n	800494e <HAL_TIM_PWM_Start+0x6a>
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	2b04      	cmp	r3, #4
 800490c:	d109      	bne.n	8004922 <HAL_TIM_PWM_Start+0x3e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b01      	cmp	r3, #1
 8004918:	bf14      	ite	ne
 800491a:	2301      	movne	r3, #1
 800491c:	2300      	moveq	r3, #0
 800491e:	b2db      	uxtb	r3, r3
 8004920:	e015      	b.n	800494e <HAL_TIM_PWM_Start+0x6a>
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	2b08      	cmp	r3, #8
 8004926:	d109      	bne.n	800493c <HAL_TIM_PWM_Start+0x58>
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800492e:	b2db      	uxtb	r3, r3
 8004930:	2b01      	cmp	r3, #1
 8004932:	bf14      	ite	ne
 8004934:	2301      	movne	r3, #1
 8004936:	2300      	moveq	r3, #0
 8004938:	b2db      	uxtb	r3, r3
 800493a:	e008      	b.n	800494e <HAL_TIM_PWM_Start+0x6a>
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004942:	b2db      	uxtb	r3, r3
 8004944:	2b01      	cmp	r3, #1
 8004946:	bf14      	ite	ne
 8004948:	2301      	movne	r3, #1
 800494a:	2300      	moveq	r3, #0
 800494c:	b2db      	uxtb	r3, r3
 800494e:	2b00      	cmp	r3, #0
 8004950:	d001      	beq.n	8004956 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e05e      	b.n	8004a14 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d104      	bne.n	8004966 <HAL_TIM_PWM_Start+0x82>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2202      	movs	r2, #2
 8004960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004964:	e013      	b.n	800498e <HAL_TIM_PWM_Start+0xaa>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b04      	cmp	r3, #4
 800496a:	d104      	bne.n	8004976 <HAL_TIM_PWM_Start+0x92>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2202      	movs	r2, #2
 8004970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004974:	e00b      	b.n	800498e <HAL_TIM_PWM_Start+0xaa>
 8004976:	683b      	ldr	r3, [r7, #0]
 8004978:	2b08      	cmp	r3, #8
 800497a:	d104      	bne.n	8004986 <HAL_TIM_PWM_Start+0xa2>
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2202      	movs	r2, #2
 8004980:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004984:	e003      	b.n	800498e <HAL_TIM_PWM_Start+0xaa>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2202      	movs	r2, #2
 800498a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	2201      	movs	r2, #1
 8004994:	6839      	ldr	r1, [r7, #0]
 8004996:	4618      	mov	r0, r3
 8004998:	f000 fc50 	bl	800523c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <HAL_TIM_PWM_Start+0x138>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d107      	bne.n	80049b6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80049b4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a18      	ldr	r2, [pc, #96]	; (8004a1c <HAL_TIM_PWM_Start+0x138>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d00e      	beq.n	80049de <HAL_TIM_PWM_Start+0xfa>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049c8:	d009      	beq.n	80049de <HAL_TIM_PWM_Start+0xfa>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	4a14      	ldr	r2, [pc, #80]	; (8004a20 <HAL_TIM_PWM_Start+0x13c>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d004      	beq.n	80049de <HAL_TIM_PWM_Start+0xfa>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	4a12      	ldr	r2, [pc, #72]	; (8004a24 <HAL_TIM_PWM_Start+0x140>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d111      	bne.n	8004a02 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 0307 	and.w	r3, r3, #7
 80049e8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	2b06      	cmp	r3, #6
 80049ee:	d010      	beq.n	8004a12 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f042 0201 	orr.w	r2, r2, #1
 80049fe:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a00:	e007      	b.n	8004a12 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f042 0201 	orr.w	r2, r2, #1
 8004a10:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a12:	2300      	movs	r3, #0
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}
 8004a1c:	40012c00 	.word	0x40012c00
 8004a20:	40000400 	.word	0x40000400
 8004a24:	40000800 	.word	0x40000800

08004a28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a34:	2300      	movs	r3, #0
 8004a36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a3e:	2b01      	cmp	r3, #1
 8004a40:	d101      	bne.n	8004a46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a42:	2302      	movs	r3, #2
 8004a44:	e0ae      	b.n	8004ba4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2201      	movs	r2, #1
 8004a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b0c      	cmp	r3, #12
 8004a52:	f200 809f 	bhi.w	8004b94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a56:	a201      	add	r2, pc, #4	; (adr r2, 8004a5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a5c:	08004a91 	.word	0x08004a91
 8004a60:	08004b95 	.word	0x08004b95
 8004a64:	08004b95 	.word	0x08004b95
 8004a68:	08004b95 	.word	0x08004b95
 8004a6c:	08004ad1 	.word	0x08004ad1
 8004a70:	08004b95 	.word	0x08004b95
 8004a74:	08004b95 	.word	0x08004b95
 8004a78:	08004b95 	.word	0x08004b95
 8004a7c:	08004b13 	.word	0x08004b13
 8004a80:	08004b95 	.word	0x08004b95
 8004a84:	08004b95 	.word	0x08004b95
 8004a88:	08004b95 	.word	0x08004b95
 8004a8c:	08004b53 	.word	0x08004b53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	4618      	mov	r0, r3
 8004a98:	f000 f9b2 	bl	8004e00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	699a      	ldr	r2, [r3, #24]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f042 0208 	orr.w	r2, r2, #8
 8004aaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	699a      	ldr	r2, [r3, #24]
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f022 0204 	bic.w	r2, r2, #4
 8004aba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6999      	ldr	r1, [r3, #24]
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	691a      	ldr	r2, [r3, #16]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	430a      	orrs	r2, r1
 8004acc:	619a      	str	r2, [r3, #24]
      break;
 8004ace:	e064      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68b9      	ldr	r1, [r7, #8]
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f000 f9f8 	bl	8004ecc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004aea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	699a      	ldr	r2, [r3, #24]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004afa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6999      	ldr	r1, [r3, #24]
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	021a      	lsls	r2, r3, #8
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	430a      	orrs	r2, r1
 8004b0e:	619a      	str	r2, [r3, #24]
      break;
 8004b10:	e043      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	68b9      	ldr	r1, [r7, #8]
 8004b18:	4618      	mov	r0, r3
 8004b1a:	f000 fa41 	bl	8004fa0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	69da      	ldr	r2, [r3, #28]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f042 0208 	orr.w	r2, r2, #8
 8004b2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	69da      	ldr	r2, [r3, #28]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f022 0204 	bic.w	r2, r2, #4
 8004b3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	69d9      	ldr	r1, [r3, #28]
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	691a      	ldr	r2, [r3, #16]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	430a      	orrs	r2, r1
 8004b4e:	61da      	str	r2, [r3, #28]
      break;
 8004b50:	e023      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	68b9      	ldr	r1, [r7, #8]
 8004b58:	4618      	mov	r0, r3
 8004b5a:	f000 fa8b 	bl	8005074 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69da      	ldr	r2, [r3, #28]
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	69d9      	ldr	r1, [r3, #28]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	021a      	lsls	r2, r3, #8
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	430a      	orrs	r2, r1
 8004b90:	61da      	str	r2, [r3, #28]
      break;
 8004b92:	e002      	b.n	8004b9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	75fb      	strb	r3, [r7, #23]
      break;
 8004b98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ba2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3718      	adds	r7, #24
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b084      	sub	sp, #16
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
 8004bb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d101      	bne.n	8004bc8 <HAL_TIM_ConfigClockSource+0x1c>
 8004bc4:	2302      	movs	r3, #2
 8004bc6:	e0b4      	b.n	8004d32 <HAL_TIM_ConfigClockSource+0x186>
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2201      	movs	r2, #1
 8004bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004be6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004bee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	68ba      	ldr	r2, [r7, #8]
 8004bf6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c00:	d03e      	beq.n	8004c80 <HAL_TIM_ConfigClockSource+0xd4>
 8004c02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c06:	f200 8087 	bhi.w	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c0e:	f000 8086 	beq.w	8004d1e <HAL_TIM_ConfigClockSource+0x172>
 8004c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c16:	d87f      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c18:	2b70      	cmp	r3, #112	; 0x70
 8004c1a:	d01a      	beq.n	8004c52 <HAL_TIM_ConfigClockSource+0xa6>
 8004c1c:	2b70      	cmp	r3, #112	; 0x70
 8004c1e:	d87b      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c20:	2b60      	cmp	r3, #96	; 0x60
 8004c22:	d050      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0x11a>
 8004c24:	2b60      	cmp	r3, #96	; 0x60
 8004c26:	d877      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c28:	2b50      	cmp	r3, #80	; 0x50
 8004c2a:	d03c      	beq.n	8004ca6 <HAL_TIM_ConfigClockSource+0xfa>
 8004c2c:	2b50      	cmp	r3, #80	; 0x50
 8004c2e:	d873      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c30:	2b40      	cmp	r3, #64	; 0x40
 8004c32:	d058      	beq.n	8004ce6 <HAL_TIM_ConfigClockSource+0x13a>
 8004c34:	2b40      	cmp	r3, #64	; 0x40
 8004c36:	d86f      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c38:	2b30      	cmp	r3, #48	; 0x30
 8004c3a:	d064      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c3c:	2b30      	cmp	r3, #48	; 0x30
 8004c3e:	d86b      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c40:	2b20      	cmp	r3, #32
 8004c42:	d060      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c44:	2b20      	cmp	r3, #32
 8004c46:	d867      	bhi.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d05c      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c4c:	2b10      	cmp	r3, #16
 8004c4e:	d05a      	beq.n	8004d06 <HAL_TIM_ConfigClockSource+0x15a>
 8004c50:	e062      	b.n	8004d18 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c56:	683b      	ldr	r3, [r7, #0]
 8004c58:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c62:	f000 facc 	bl	80051fe <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	689b      	ldr	r3, [r3, #8]
 8004c6c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004c74:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	68ba      	ldr	r2, [r7, #8]
 8004c7c:	609a      	str	r2, [r3, #8]
      break;
 8004c7e:	e04f      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004c8c:	683b      	ldr	r3, [r7, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004c90:	f000 fab5 	bl	80051fe <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	689a      	ldr	r2, [r3, #8]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ca2:	609a      	str	r2, [r3, #8]
      break;
 8004ca4:	e03c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004caa:	683b      	ldr	r3, [r7, #0]
 8004cac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	f000 fa2c 	bl	8005110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	2150      	movs	r1, #80	; 0x50
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f000 fa83 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004cc4:	e02c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	f000 fa4a 	bl	800516c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	2160      	movs	r1, #96	; 0x60
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f000 fa73 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004ce4:	e01c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004cf2:	461a      	mov	r2, r3
 8004cf4:	f000 fa0c 	bl	8005110 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2140      	movs	r1, #64	; 0x40
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f000 fa63 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004d04:	e00c      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	683b      	ldr	r3, [r7, #0]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f000 fa5a 	bl	80051ca <TIM_ITRx_SetConfig>
      break;
 8004d16:	e003      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e000      	b.n	8004d20 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d1e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2201      	movs	r2, #1
 8004d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
	...

08004d3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
 8004d44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	4a29      	ldr	r2, [pc, #164]	; (8004df4 <TIM_Base_SetConfig+0xb8>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d00b      	beq.n	8004d6c <TIM_Base_SetConfig+0x30>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d5a:	d007      	beq.n	8004d6c <TIM_Base_SetConfig+0x30>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	4a26      	ldr	r2, [pc, #152]	; (8004df8 <TIM_Base_SetConfig+0xbc>)
 8004d60:	4293      	cmp	r3, r2
 8004d62:	d003      	beq.n	8004d6c <TIM_Base_SetConfig+0x30>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	4a25      	ldr	r2, [pc, #148]	; (8004dfc <TIM_Base_SetConfig+0xc0>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d108      	bne.n	8004d7e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	68fa      	ldr	r2, [r7, #12]
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	4a1c      	ldr	r2, [pc, #112]	; (8004df4 <TIM_Base_SetConfig+0xb8>)
 8004d82:	4293      	cmp	r3, r2
 8004d84:	d00b      	beq.n	8004d9e <TIM_Base_SetConfig+0x62>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d8c:	d007      	beq.n	8004d9e <TIM_Base_SetConfig+0x62>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a19      	ldr	r2, [pc, #100]	; (8004df8 <TIM_Base_SetConfig+0xbc>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d003      	beq.n	8004d9e <TIM_Base_SetConfig+0x62>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	4a18      	ldr	r2, [pc, #96]	; (8004dfc <TIM_Base_SetConfig+0xc0>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d108      	bne.n	8004db0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004da6:	683b      	ldr	r3, [r7, #0]
 8004da8:	68db      	ldr	r3, [r3, #12]
 8004daa:	68fa      	ldr	r2, [r7, #12]
 8004dac:	4313      	orrs	r3, r2
 8004dae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	695b      	ldr	r3, [r3, #20]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	68fa      	ldr	r2, [r7, #12]
 8004dc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	689a      	ldr	r2, [r3, #8]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	4a07      	ldr	r2, [pc, #28]	; (8004df4 <TIM_Base_SetConfig+0xb8>)
 8004dd8:	4293      	cmp	r3, r2
 8004dda:	d103      	bne.n	8004de4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ddc:	683b      	ldr	r3, [r7, #0]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	615a      	str	r2, [r3, #20]
}
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	40012c00 	.word	0x40012c00
 8004df8:	40000400 	.word	0x40000400
 8004dfc:	40000800 	.word	0x40000800

08004e00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e00:	b480      	push	{r7}
 8004e02:	b087      	sub	sp, #28
 8004e04:	af00      	add	r7, sp, #0
 8004e06:	6078      	str	r0, [r7, #4]
 8004e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6a1b      	ldr	r3, [r3, #32]
 8004e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6a1b      	ldr	r3, [r3, #32]
 8004e14:	f023 0201 	bic.w	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	699b      	ldr	r3, [r3, #24]
 8004e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	f023 0303 	bic.w	r3, r3, #3
 8004e36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e42:	697b      	ldr	r3, [r7, #20]
 8004e44:	f023 0302 	bic.w	r3, r3, #2
 8004e48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	697a      	ldr	r2, [r7, #20]
 8004e50:	4313      	orrs	r3, r2
 8004e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	4a1c      	ldr	r2, [pc, #112]	; (8004ec8 <TIM_OC1_SetConfig+0xc8>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d10c      	bne.n	8004e76 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f023 0308 	bic.w	r3, r3, #8
 8004e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	68db      	ldr	r3, [r3, #12]
 8004e68:	697a      	ldr	r2, [r7, #20]
 8004e6a:	4313      	orrs	r3, r2
 8004e6c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	f023 0304 	bic.w	r3, r3, #4
 8004e74:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	4a13      	ldr	r2, [pc, #76]	; (8004ec8 <TIM_OC1_SetConfig+0xc8>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d111      	bne.n	8004ea2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	695b      	ldr	r3, [r3, #20]
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	4313      	orrs	r3, r2
 8004e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	693a      	ldr	r2, [r7, #16]
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	693a      	ldr	r2, [r7, #16]
 8004ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	685a      	ldr	r2, [r3, #4]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	697a      	ldr	r2, [r7, #20]
 8004eba:	621a      	str	r2, [r3, #32]
}
 8004ebc:	bf00      	nop
 8004ebe:	371c      	adds	r7, #28
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	bc80      	pop	{r7}
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40012c00 	.word	0x40012c00

08004ecc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ecc:	b480      	push	{r7}
 8004ece:	b087      	sub	sp, #28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a1b      	ldr	r3, [r3, #32]
 8004ee0:	f023 0210 	bic.w	r2, r3, #16
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	699b      	ldr	r3, [r3, #24]
 8004ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004f02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	021b      	lsls	r3, r3, #8
 8004f0a:	68fa      	ldr	r2, [r7, #12]
 8004f0c:	4313      	orrs	r3, r2
 8004f0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	f023 0320 	bic.w	r3, r3, #32
 8004f16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	689b      	ldr	r3, [r3, #8]
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	697a      	ldr	r2, [r7, #20]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	4a1d      	ldr	r2, [pc, #116]	; (8004f9c <TIM_OC2_SetConfig+0xd0>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d10d      	bne.n	8004f48 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004f2c:	697b      	ldr	r3, [r7, #20]
 8004f2e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f32:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	011b      	lsls	r3, r3, #4
 8004f3a:	697a      	ldr	r2, [r7, #20]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f46:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	4a14      	ldr	r2, [pc, #80]	; (8004f9c <TIM_OC2_SetConfig+0xd0>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d113      	bne.n	8004f78 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004f56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	695b      	ldr	r3, [r3, #20]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	693a      	ldr	r2, [r7, #16]
 8004f68:	4313      	orrs	r3, r2
 8004f6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	699b      	ldr	r3, [r3, #24]
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	693a      	ldr	r2, [r7, #16]
 8004f74:	4313      	orrs	r3, r2
 8004f76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	68fa      	ldr	r2, [r7, #12]
 8004f82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	697a      	ldr	r2, [r7, #20]
 8004f90:	621a      	str	r2, [r3, #32]
}
 8004f92:	bf00      	nop
 8004f94:	371c      	adds	r7, #28
 8004f96:	46bd      	mov	sp, r7
 8004f98:	bc80      	pop	{r7}
 8004f9a:	4770      	bx	lr
 8004f9c:	40012c00 	.word	0x40012c00

08004fa0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fa0:	b480      	push	{r7}
 8004fa2:	b087      	sub	sp, #28
 8004fa4:	af00      	add	r7, sp, #0
 8004fa6:	6078      	str	r0, [r7, #4]
 8004fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	6a1b      	ldr	r3, [r3, #32]
 8004fb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	69db      	ldr	r3, [r3, #28]
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f023 0303 	bic.w	r3, r3, #3
 8004fd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	4313      	orrs	r3, r2
 8004fe0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004fe8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	689b      	ldr	r3, [r3, #8]
 8004fee:	021b      	lsls	r3, r3, #8
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <TIM_OC3_SetConfig+0xd0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d10d      	bne.n	800501a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005004:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	021b      	lsls	r3, r3, #8
 800500c:	697a      	ldr	r2, [r7, #20]
 800500e:	4313      	orrs	r3, r2
 8005010:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005018:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	4a14      	ldr	r2, [pc, #80]	; (8005070 <TIM_OC3_SetConfig+0xd0>)
 800501e:	4293      	cmp	r3, r2
 8005020:	d113      	bne.n	800504a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005028:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005030:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	011b      	lsls	r3, r3, #4
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	4313      	orrs	r3, r2
 800503c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	699b      	ldr	r3, [r3, #24]
 8005042:	011b      	lsls	r3, r3, #4
 8005044:	693a      	ldr	r2, [r7, #16]
 8005046:	4313      	orrs	r3, r2
 8005048:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68fa      	ldr	r2, [r7, #12]
 8005054:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	697a      	ldr	r2, [r7, #20]
 8005062:	621a      	str	r2, [r3, #32]
}
 8005064:	bf00      	nop
 8005066:	371c      	adds	r7, #28
 8005068:	46bd      	mov	sp, r7
 800506a:	bc80      	pop	{r7}
 800506c:	4770      	bx	lr
 800506e:	bf00      	nop
 8005070:	40012c00 	.word	0x40012c00

08005074 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6a1b      	ldr	r3, [r3, #32]
 8005088:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	69db      	ldr	r3, [r3, #28]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	021b      	lsls	r3, r3, #8
 80050b2:	68fa      	ldr	r2, [r7, #12]
 80050b4:	4313      	orrs	r3, r2
 80050b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050be:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	031b      	lsls	r3, r3, #12
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a0f      	ldr	r2, [pc, #60]	; (800510c <TIM_OC4_SetConfig+0x98>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d109      	bne.n	80050e8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80050d4:	697b      	ldr	r3, [r7, #20]
 80050d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	695b      	ldr	r3, [r3, #20]
 80050e0:	019b      	lsls	r3, r3, #6
 80050e2:	697a      	ldr	r2, [r7, #20]
 80050e4:	4313      	orrs	r3, r2
 80050e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	697a      	ldr	r2, [r7, #20]
 80050ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	68fa      	ldr	r2, [r7, #12]
 80050f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	685a      	ldr	r2, [r3, #4]
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	693a      	ldr	r2, [r7, #16]
 8005100:	621a      	str	r2, [r3, #32]
}
 8005102:	bf00      	nop
 8005104:	371c      	adds	r7, #28
 8005106:	46bd      	mov	sp, r7
 8005108:	bc80      	pop	{r7}
 800510a:	4770      	bx	lr
 800510c:	40012c00 	.word	0x40012c00

08005110 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005110:	b480      	push	{r7}
 8005112:	b087      	sub	sp, #28
 8005114:	af00      	add	r7, sp, #0
 8005116:	60f8      	str	r0, [r7, #12]
 8005118:	60b9      	str	r1, [r7, #8]
 800511a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	6a1b      	ldr	r3, [r3, #32]
 8005126:	f023 0201 	bic.w	r2, r3, #1
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	699b      	ldr	r3, [r3, #24]
 8005132:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800513a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	011b      	lsls	r3, r3, #4
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	f023 030a 	bic.w	r3, r3, #10
 800514c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800514e:	697a      	ldr	r2, [r7, #20]
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	4313      	orrs	r3, r2
 8005154:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	697a      	ldr	r2, [r7, #20]
 8005160:	621a      	str	r2, [r3, #32]
}
 8005162:	bf00      	nop
 8005164:	371c      	adds	r7, #28
 8005166:	46bd      	mov	sp, r7
 8005168:	bc80      	pop	{r7}
 800516a:	4770      	bx	lr

0800516c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800516c:	b480      	push	{r7}
 800516e:	b087      	sub	sp, #28
 8005170:	af00      	add	r7, sp, #0
 8005172:	60f8      	str	r0, [r7, #12]
 8005174:	60b9      	str	r1, [r7, #8]
 8005176:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a1b      	ldr	r3, [r3, #32]
 800517c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6a1b      	ldr	r3, [r3, #32]
 8005182:	f023 0210 	bic.w	r2, r3, #16
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	699b      	ldr	r3, [r3, #24]
 800518e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005196:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	031b      	lsls	r3, r3, #12
 800519c:	693a      	ldr	r2, [r7, #16]
 800519e:	4313      	orrs	r3, r2
 80051a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80051a8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	011b      	lsls	r3, r3, #4
 80051ae:	697a      	ldr	r2, [r7, #20]
 80051b0:	4313      	orrs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	697a      	ldr	r2, [r7, #20]
 80051be:	621a      	str	r2, [r3, #32]
}
 80051c0:	bf00      	nop
 80051c2:	371c      	adds	r7, #28
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bc80      	pop	{r7}
 80051c8:	4770      	bx	lr

080051ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	689b      	ldr	r3, [r3, #8]
 80051d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80051e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f043 0307 	orr.w	r3, r3, #7
 80051ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	609a      	str	r2, [r3, #8]
}
 80051f4:	bf00      	nop
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bc80      	pop	{r7}
 80051fc:	4770      	bx	lr

080051fe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80051fe:	b480      	push	{r7}
 8005200:	b087      	sub	sp, #28
 8005202:	af00      	add	r7, sp, #0
 8005204:	60f8      	str	r0, [r7, #12]
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	689b      	ldr	r3, [r3, #8]
 8005210:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005212:	697b      	ldr	r3, [r7, #20]
 8005214:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005218:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	021a      	lsls	r2, r3, #8
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	431a      	orrs	r2, r3
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	4313      	orrs	r3, r2
 8005226:	697a      	ldr	r2, [r7, #20]
 8005228:	4313      	orrs	r3, r2
 800522a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	609a      	str	r2, [r3, #8]
}
 8005232:	bf00      	nop
 8005234:	371c      	adds	r7, #28
 8005236:	46bd      	mov	sp, r7
 8005238:	bc80      	pop	{r7}
 800523a:	4770      	bx	lr

0800523c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800523c:	b480      	push	{r7}
 800523e:	b087      	sub	sp, #28
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	f003 031f 	and.w	r3, r3, #31
 800524e:	2201      	movs	r2, #1
 8005250:	fa02 f303 	lsl.w	r3, r2, r3
 8005254:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1a      	ldr	r2, [r3, #32]
 800525a:	697b      	ldr	r3, [r7, #20]
 800525c:	43db      	mvns	r3, r3
 800525e:	401a      	ands	r2, r3
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6a1a      	ldr	r2, [r3, #32]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f003 031f 	and.w	r3, r3, #31
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	fa01 f303 	lsl.w	r3, r1, r3
 8005274:	431a      	orrs	r2, r3
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	621a      	str	r2, [r3, #32]
}
 800527a:	bf00      	nop
 800527c:	371c      	adds	r7, #28
 800527e:	46bd      	mov	sp, r7
 8005280:	bc80      	pop	{r7}
 8005282:	4770      	bx	lr

08005284 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005284:	b480      	push	{r7}
 8005286:	b085      	sub	sp, #20
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
 800528c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005294:	2b01      	cmp	r3, #1
 8005296:	d101      	bne.n	800529c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005298:	2302      	movs	r3, #2
 800529a:	e046      	b.n	800532a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2201      	movs	r2, #1
 80052a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2202      	movs	r2, #2
 80052a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052c4:	683b      	ldr	r3, [r7, #0]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4a16      	ldr	r2, [pc, #88]	; (8005334 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d00e      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052e8:	d009      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a12      	ldr	r2, [pc, #72]	; (8005338 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d004      	beq.n	80052fe <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	4a10      	ldr	r2, [pc, #64]	; (800533c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d10c      	bne.n	8005318 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052fe:	68bb      	ldr	r3, [r7, #8]
 8005300:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005304:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4313      	orrs	r3, r2
 800530e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68ba      	ldr	r2, [r7, #8]
 8005316:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2201      	movs	r2, #1
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	bc80      	pop	{r7}
 8005332:	4770      	bx	lr
 8005334:	40012c00 	.word	0x40012c00
 8005338:	40000400 	.word	0x40000400
 800533c:	40000800 	.word	0x40000800

08005340 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2b00      	cmp	r3, #0
 800534c:	d101      	bne.n	8005352 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e042      	b.n	80053d8 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d106      	bne.n	800536c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f7fc ff2e 	bl	80021c8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2224      	movs	r2, #36	; 0x24
 8005370:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	68da      	ldr	r2, [r3, #12]
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005382:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	f000 fcd5 	bl	8005d34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	691a      	ldr	r2, [r3, #16]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005398:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	695a      	ldr	r2, [r3, #20]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80053a8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	68da      	ldr	r2, [r3, #12]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053b8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2220      	movs	r2, #32
 80053c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	2220      	movs	r2, #32
 80053cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80053d6:	2300      	movs	r3, #0
}
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b084      	sub	sp, #16
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	4613      	mov	r3, r2
 80053ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80053f4:	b2db      	uxtb	r3, r3
 80053f6:	2b20      	cmp	r3, #32
 80053f8:	d112      	bne.n	8005420 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d002      	beq.n	8005406 <HAL_UART_Receive_IT+0x26>
 8005400:	88fb      	ldrh	r3, [r7, #6]
 8005402:	2b00      	cmp	r3, #0
 8005404:	d101      	bne.n	800540a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e00b      	b.n	8005422 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	2200      	movs	r2, #0
 800540e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005410:	88fb      	ldrh	r3, [r7, #6]
 8005412:	461a      	mov	r2, r3
 8005414:	68b9      	ldr	r1, [r7, #8]
 8005416:	68f8      	ldr	r0, [r7, #12]
 8005418:	f000 fab7 	bl	800598a <UART_Start_Receive_IT>
 800541c:	4603      	mov	r3, r0
 800541e:	e000      	b.n	8005422 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005420:	2302      	movs	r3, #2
  }
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
	...

0800542c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b0ba      	sub	sp, #232	; 0xe8
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8005452:	2300      	movs	r3, #0
 8005454:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8005458:	2300      	movs	r3, #0
 800545a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005462:	f003 030f 	and.w	r3, r3, #15
 8005466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800546a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800546e:	2b00      	cmp	r3, #0
 8005470:	d10f      	bne.n	8005492 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <HAL_UART_IRQHandler+0x66>
 800547e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fb93 	bl	8005bb6 <UART_Receive_IT>
      return;
 8005490:	e25b      	b.n	800594a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005492:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005496:	2b00      	cmp	r3, #0
 8005498:	f000 80de 	beq.w	8005658 <HAL_UART_IRQHandler+0x22c>
 800549c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054a0:	f003 0301 	and.w	r3, r3, #1
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d106      	bne.n	80054b6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80054a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054ac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	f000 80d1 	beq.w	8005658 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80054b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054ba:	f003 0301 	and.w	r3, r3, #1
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d00b      	beq.n	80054da <HAL_UART_IRQHandler+0xae>
 80054c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d005      	beq.n	80054da <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	f043 0201 	orr.w	r2, r3, #1
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d00b      	beq.n	80054fe <HAL_UART_IRQHandler+0xd2>
 80054e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054ea:	f003 0301 	and.w	r3, r3, #1
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d005      	beq.n	80054fe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054f6:	f043 0202 	orr.w	r2, r3, #2
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80054fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d00b      	beq.n	8005522 <HAL_UART_IRQHandler+0xf6>
 800550a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800550e:	f003 0301 	and.w	r3, r3, #1
 8005512:	2b00      	cmp	r3, #0
 8005514:	d005      	beq.n	8005522 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800551a:	f043 0204 	orr.w	r2, r3, #4
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005522:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005526:	f003 0308 	and.w	r3, r3, #8
 800552a:	2b00      	cmp	r3, #0
 800552c:	d011      	beq.n	8005552 <HAL_UART_IRQHandler+0x126>
 800552e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005532:	f003 0320 	and.w	r3, r3, #32
 8005536:	2b00      	cmp	r3, #0
 8005538:	d105      	bne.n	8005546 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800553a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800553e:	f003 0301 	and.w	r3, r3, #1
 8005542:	2b00      	cmp	r3, #0
 8005544:	d005      	beq.n	8005552 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800554a:	f043 0208 	orr.w	r2, r3, #8
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005556:	2b00      	cmp	r3, #0
 8005558:	f000 81f2 	beq.w	8005940 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800555c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005560:	f003 0320 	and.w	r3, r3, #32
 8005564:	2b00      	cmp	r3, #0
 8005566:	d008      	beq.n	800557a <HAL_UART_IRQHandler+0x14e>
 8005568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800556c:	f003 0320 	and.w	r3, r3, #32
 8005570:	2b00      	cmp	r3, #0
 8005572:	d002      	beq.n	800557a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 fb1e 	bl	8005bb6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	695b      	ldr	r3, [r3, #20]
 8005580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005584:	2b00      	cmp	r3, #0
 8005586:	bf14      	ite	ne
 8005588:	2301      	movne	r3, #1
 800558a:	2300      	moveq	r3, #0
 800558c:	b2db      	uxtb	r3, r3
 800558e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005596:	f003 0308 	and.w	r3, r3, #8
 800559a:	2b00      	cmp	r3, #0
 800559c:	d103      	bne.n	80055a6 <HAL_UART_IRQHandler+0x17a>
 800559e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d04f      	beq.n	8005646 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 fa28 	bl	80059fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d041      	beq.n	800563e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	3314      	adds	r3, #20
 80055c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80055d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80055d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	3314      	adds	r3, #20
 80055e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80055e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80055ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80055f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80055f6:	e841 2300 	strex	r3, r2, [r1]
 80055fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80055fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005602:	2b00      	cmp	r3, #0
 8005604:	d1d9      	bne.n	80055ba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800560a:	2b00      	cmp	r3, #0
 800560c:	d013      	beq.n	8005636 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005612:	4a7e      	ldr	r2, [pc, #504]	; (800580c <HAL_UART_IRQHandler+0x3e0>)
 8005614:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800561a:	4618      	mov	r0, r3
 800561c:	f7fd fd1c 	bl	8003058 <HAL_DMA_Abort_IT>
 8005620:	4603      	mov	r3, r0
 8005622:	2b00      	cmp	r3, #0
 8005624:	d016      	beq.n	8005654 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800562a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562c:	687a      	ldr	r2, [r7, #4]
 800562e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8005630:	4610      	mov	r0, r2
 8005632:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005634:	e00e      	b.n	8005654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005636:	6878      	ldr	r0, [r7, #4]
 8005638:	f000 f993 	bl	8005962 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800563c:	e00a      	b.n	8005654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800563e:	6878      	ldr	r0, [r7, #4]
 8005640:	f000 f98f 	bl	8005962 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005644:	e006      	b.n	8005654 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f98b 	bl	8005962 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8005652:	e175      	b.n	8005940 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005654:	bf00      	nop
    return;
 8005656:	e173      	b.n	8005940 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800565c:	2b01      	cmp	r3, #1
 800565e:	f040 814f 	bne.w	8005900 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2b00      	cmp	r3, #0
 800566c:	f000 8148 	beq.w	8005900 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005670:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005674:	f003 0310 	and.w	r3, r3, #16
 8005678:	2b00      	cmp	r3, #0
 800567a:	f000 8141 	beq.w	8005900 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800567e:	2300      	movs	r3, #0
 8005680:	60bb      	str	r3, [r7, #8]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	60bb      	str	r3, [r7, #8]
 8005692:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	695b      	ldr	r3, [r3, #20]
 800569a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800569e:	2b00      	cmp	r3, #0
 80056a0:	f000 80b6 	beq.w	8005810 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80056b0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8145 	beq.w	8005944 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056c2:	429a      	cmp	r2, r3
 80056c4:	f080 813e 	bcs.w	8005944 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80056ce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	2b20      	cmp	r3, #32
 80056d8:	f000 8088 	beq.w	80057ec <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	330c      	adds	r3, #12
 80056e2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056ea:	e853 3f00 	ldrex	r3, [r3]
 80056ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80056f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80056f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056fa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	330c      	adds	r3, #12
 8005704:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005708:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800570c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005710:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005714:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005718:	e841 2300 	strex	r3, r2, [r1]
 800571c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005720:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005724:	2b00      	cmp	r3, #0
 8005726:	d1d9      	bne.n	80056dc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	3314      	adds	r3, #20
 800572e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005730:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005732:	e853 3f00 	ldrex	r3, [r3]
 8005736:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005738:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800573a:	f023 0301 	bic.w	r3, r3, #1
 800573e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	3314      	adds	r3, #20
 8005748:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800574c:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005750:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8005754:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005758:	e841 2300 	strex	r3, r2, [r1]
 800575c:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800575e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005760:	2b00      	cmp	r3, #0
 8005762:	d1e1      	bne.n	8005728 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	3314      	adds	r3, #20
 800576a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800576c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800576e:	e853 3f00 	ldrex	r3, [r3]
 8005772:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005776:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800577a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	3314      	adds	r3, #20
 8005784:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005788:	66fa      	str	r2, [r7, #108]	; 0x6c
 800578a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800578e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005790:	e841 2300 	strex	r3, r2, [r1]
 8005794:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005796:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1e3      	bne.n	8005764 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2220      	movs	r2, #32
 80057a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	330c      	adds	r3, #12
 80057b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057b4:	e853 3f00 	ldrex	r3, [r3]
 80057b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80057ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80057bc:	f023 0310 	bic.w	r3, r3, #16
 80057c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	330c      	adds	r3, #12
 80057ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80057ce:	65ba      	str	r2, [r7, #88]	; 0x58
 80057d0:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80057d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80057d6:	e841 2300 	strex	r3, r2, [r1]
 80057da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80057dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1e3      	bne.n	80057aa <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fd fbfb 	bl	8002fe2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2202      	movs	r2, #2
 80057f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80057fa:	b29b      	uxth	r3, r3
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	b29b      	uxth	r3, r3
 8005800:	4619      	mov	r1, r3
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f8b6 	bl	8005974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005808:	e09c      	b.n	8005944 <HAL_UART_IRQHandler+0x518>
 800580a:	bf00      	nop
 800580c:	08005ac1 	.word	0x08005ac1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005818:	b29b      	uxth	r3, r3
 800581a:	1ad3      	subs	r3, r2, r3
 800581c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005824:	b29b      	uxth	r3, r3
 8005826:	2b00      	cmp	r3, #0
 8005828:	f000 808e 	beq.w	8005948 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800582c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005830:	2b00      	cmp	r3, #0
 8005832:	f000 8089 	beq.w	8005948 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	330c      	adds	r3, #12
 800583c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	e853 3f00 	ldrex	r3, [r3]
 8005844:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800584c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	330c      	adds	r3, #12
 8005856:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800585a:	647a      	str	r2, [r7, #68]	; 0x44
 800585c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005860:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005862:	e841 2300 	strex	r3, r2, [r1]
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d1e3      	bne.n	8005836 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	3314      	adds	r3, #20
 8005874:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	e853 3f00 	ldrex	r3, [r3]
 800587c:	623b      	str	r3, [r7, #32]
   return(result);
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	f023 0301 	bic.w	r3, r3, #1
 8005884:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	3314      	adds	r3, #20
 800588e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005892:	633a      	str	r2, [r7, #48]	; 0x30
 8005894:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005896:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005898:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800589a:	e841 2300 	strex	r3, r2, [r1]
 800589e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80058a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d1e3      	bne.n	800586e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2220      	movs	r2, #32
 80058aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2200      	movs	r2, #0
 80058b2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	330c      	adds	r3, #12
 80058ba:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	e853 3f00 	ldrex	r3, [r3]
 80058c2:	60fb      	str	r3, [r7, #12]
   return(result);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0310 	bic.w	r3, r3, #16
 80058ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	330c      	adds	r3, #12
 80058d4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80058d8:	61fa      	str	r2, [r7, #28]
 80058da:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058dc:	69b9      	ldr	r1, [r7, #24]
 80058de:	69fa      	ldr	r2, [r7, #28]
 80058e0:	e841 2300 	strex	r3, r2, [r1]
 80058e4:	617b      	str	r3, [r7, #20]
   return(result);
 80058e6:	697b      	ldr	r3, [r7, #20]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e3      	bne.n	80058b4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2202      	movs	r2, #2
 80058f0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80058f2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80058f6:	4619      	mov	r1, r3
 80058f8:	6878      	ldr	r0, [r7, #4]
 80058fa:	f000 f83b 	bl	8005974 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058fe:	e023      	b.n	8005948 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005900:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005904:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005908:	2b00      	cmp	r3, #0
 800590a:	d009      	beq.n	8005920 <HAL_UART_IRQHandler+0x4f4>
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005914:	2b00      	cmp	r3, #0
 8005916:	d003      	beq.n	8005920 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f000 f8e5 	bl	8005ae8 <UART_Transmit_IT>
    return;
 800591e:	e014      	b.n	800594a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005920:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005928:	2b00      	cmp	r3, #0
 800592a:	d00e      	beq.n	800594a <HAL_UART_IRQHandler+0x51e>
 800592c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005934:	2b00      	cmp	r3, #0
 8005936:	d008      	beq.n	800594a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 f924 	bl	8005b86 <UART_EndTransmit_IT>
    return;
 800593e:	e004      	b.n	800594a <HAL_UART_IRQHandler+0x51e>
    return;
 8005940:	bf00      	nop
 8005942:	e002      	b.n	800594a <HAL_UART_IRQHandler+0x51e>
      return;
 8005944:	bf00      	nop
 8005946:	e000      	b.n	800594a <HAL_UART_IRQHandler+0x51e>
      return;
 8005948:	bf00      	nop
  }
}
 800594a:	37e8      	adds	r7, #232	; 0xe8
 800594c:	46bd      	mov	sp, r7
 800594e:	bd80      	pop	{r7, pc}

08005950 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005950:	b480      	push	{r7}
 8005952:	b083      	sub	sp, #12
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005958:	bf00      	nop
 800595a:	370c      	adds	r7, #12
 800595c:	46bd      	mov	sp, r7
 800595e:	bc80      	pop	{r7}
 8005960:	4770      	bx	lr

08005962 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005962:	b480      	push	{r7}
 8005964:	b083      	sub	sp, #12
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800596a:	bf00      	nop
 800596c:	370c      	adds	r7, #12
 800596e:	46bd      	mov	sp, r7
 8005970:	bc80      	pop	{r7}
 8005972:	4770      	bx	lr

08005974 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	460b      	mov	r3, r1
 800597e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005980:	bf00      	nop
 8005982:	370c      	adds	r7, #12
 8005984:	46bd      	mov	sp, r7
 8005986:	bc80      	pop	{r7}
 8005988:	4770      	bx	lr

0800598a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	60f8      	str	r0, [r7, #12]
 8005992:	60b9      	str	r1, [r7, #8]
 8005994:	4613      	mov	r3, r2
 8005996:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	88fa      	ldrh	r2, [r7, #6]
 80059a2:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	88fa      	ldrh	r2, [r7, #6]
 80059a8:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2222      	movs	r2, #34	; 0x22
 80059b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d007      	beq.n	80059d0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059ce:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695a      	ldr	r2, [r3, #20]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0201 	orr.w	r2, r2, #1
 80059de:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	68da      	ldr	r2, [r3, #12]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0220 	orr.w	r2, r2, #32
 80059ee:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80059f0:	2300      	movs	r3, #0
}
 80059f2:	4618      	mov	r0, r3
 80059f4:	3714      	adds	r7, #20
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bc80      	pop	{r7}
 80059fa:	4770      	bx	lr

080059fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80059fc:	b480      	push	{r7}
 80059fe:	b095      	sub	sp, #84	; 0x54
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	330c      	adds	r3, #12
 8005a0a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a0e:	e853 3f00 	ldrex	r3, [r3]
 8005a12:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	330c      	adds	r3, #12
 8005a22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a24:	643a      	str	r2, [r7, #64]	; 0x40
 8005a26:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e5      	bne.n	8005a04 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	3314      	adds	r3, #20
 8005a3e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	e853 3f00 	ldrex	r3, [r3]
 8005a46:	61fb      	str	r3, [r7, #28]
   return(result);
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	3314      	adds	r3, #20
 8005a56:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a58:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005a5e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005a60:	e841 2300 	strex	r3, r2, [r1]
 8005a64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d1e5      	bne.n	8005a38 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a70:	2b01      	cmp	r3, #1
 8005a72:	d119      	bne.n	8005aa8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	e853 3f00 	ldrex	r3, [r3]
 8005a82:	60bb      	str	r3, [r7, #8]
   return(result);
 8005a84:	68bb      	ldr	r3, [r7, #8]
 8005a86:	f023 0310 	bic.w	r3, r3, #16
 8005a8a:	647b      	str	r3, [r7, #68]	; 0x44
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	330c      	adds	r3, #12
 8005a92:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005a94:	61ba      	str	r2, [r7, #24]
 8005a96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a98:	6979      	ldr	r1, [r7, #20]
 8005a9a:	69ba      	ldr	r2, [r7, #24]
 8005a9c:	e841 2300 	strex	r3, r2, [r1]
 8005aa0:	613b      	str	r3, [r7, #16]
   return(result);
 8005aa2:	693b      	ldr	r3, [r7, #16]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d1e5      	bne.n	8005a74 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ab6:	bf00      	nop
 8005ab8:	3754      	adds	r7, #84	; 0x54
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bc80      	pop	{r7}
 8005abe:	4770      	bx	lr

08005ac0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005ac0:	b580      	push	{r7, lr}
 8005ac2:	b084      	sub	sp, #16
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005acc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f7ff ff41 	bl	8005962 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005ae0:	bf00      	nop
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b21      	cmp	r3, #33	; 0x21
 8005afa:	d13e      	bne.n	8005b7a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b04:	d114      	bne.n	8005b30 <UART_Transmit_IT+0x48>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d110      	bne.n	8005b30 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6a1b      	ldr	r3, [r3, #32]
 8005b12:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	881b      	ldrh	r3, [r3, #0]
 8005b18:	461a      	mov	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b22:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	1c9a      	adds	r2, r3, #2
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	621a      	str	r2, [r3, #32]
 8005b2e:	e008      	b.n	8005b42 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a1b      	ldr	r3, [r3, #32]
 8005b34:	1c59      	adds	r1, r3, #1
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	6211      	str	r1, [r2, #32]
 8005b3a:	781a      	ldrb	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29b      	uxth	r3, r3
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4619      	mov	r1, r3
 8005b50:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10f      	bne.n	8005b76 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	68da      	ldr	r2, [r3, #12]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005b64:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	68da      	ldr	r2, [r3, #12]
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005b74:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e000      	b.n	8005b7c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005b7a:	2302      	movs	r3, #2
  }
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bc80      	pop	{r7}
 8005b84:	4770      	bx	lr

08005b86 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005b86:	b580      	push	{r7, lr}
 8005b88:	b082      	sub	sp, #8
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2220      	movs	r2, #32
 8005ba2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005ba6:	6878      	ldr	r0, [r7, #4]
 8005ba8:	f7ff fed2 	bl	8005950 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005bac:	2300      	movs	r3, #0
}
 8005bae:	4618      	mov	r0, r3
 8005bb0:	3708      	adds	r7, #8
 8005bb2:	46bd      	mov	sp, r7
 8005bb4:	bd80      	pop	{r7, pc}

08005bb6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005bb6:	b580      	push	{r7, lr}
 8005bb8:	b08c      	sub	sp, #48	; 0x30
 8005bba:	af00      	add	r7, sp, #0
 8005bbc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	2b22      	cmp	r3, #34	; 0x22
 8005bc8:	f040 80ae 	bne.w	8005d28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005bd4:	d117      	bne.n	8005c06 <UART_Receive_IT+0x50>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d113      	bne.n	8005c06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005be6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	685b      	ldr	r3, [r3, #4]
 8005bee:	b29b      	uxth	r3, r3
 8005bf0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bf4:	b29a      	uxth	r2, r3
 8005bf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bfe:	1c9a      	adds	r2, r3, #2
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	629a      	str	r2, [r3, #40]	; 0x28
 8005c04:	e026      	b.n	8005c54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c18:	d007      	beq.n	8005c2a <UART_Receive_IT+0x74>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d10a      	bne.n	8005c38 <UART_Receive_IT+0x82>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	691b      	ldr	r3, [r3, #16]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d106      	bne.n	8005c38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	b2da      	uxtb	r2, r3
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	701a      	strb	r2, [r3, #0]
 8005c36:	e008      	b.n	8005c4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c44:	b2da      	uxtb	r2, r3
 8005c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c4e:	1c5a      	adds	r2, r3, #1
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005c58:	b29b      	uxth	r3, r3
 8005c5a:	3b01      	subs	r3, #1
 8005c5c:	b29b      	uxth	r3, r3
 8005c5e:	687a      	ldr	r2, [r7, #4]
 8005c60:	4619      	mov	r1, r3
 8005c62:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d15d      	bne.n	8005d24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	68da      	ldr	r2, [r3, #12]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0220 	bic.w	r2, r2, #32
 8005c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	68da      	ldr	r2, [r3, #12]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	695a      	ldr	r2, [r3, #20]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f022 0201 	bic.w	r2, r2, #1
 8005c96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2220      	movs	r2, #32
 8005c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	d135      	bne.n	8005d1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	330c      	adds	r3, #12
 8005cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	e853 3f00 	ldrex	r3, [r3]
 8005cc2:	613b      	str	r3, [r7, #16]
   return(result);
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	f023 0310 	bic.w	r3, r3, #16
 8005cca:	627b      	str	r3, [r7, #36]	; 0x24
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	330c      	adds	r3, #12
 8005cd2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cd4:	623a      	str	r2, [r7, #32]
 8005cd6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd8:	69f9      	ldr	r1, [r7, #28]
 8005cda:	6a3a      	ldr	r2, [r7, #32]
 8005cdc:	e841 2300 	strex	r3, r2, [r1]
 8005ce0:	61bb      	str	r3, [r7, #24]
   return(result);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1e5      	bne.n	8005cb4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f003 0310 	and.w	r3, r3, #16
 8005cf2:	2b10      	cmp	r3, #16
 8005cf4:	d10a      	bne.n	8005d0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	60fb      	str	r3, [r7, #12]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	60fb      	str	r3, [r7, #12]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d10:	4619      	mov	r1, r3
 8005d12:	6878      	ldr	r0, [r7, #4]
 8005d14:	f7ff fe2e 	bl	8005974 <HAL_UARTEx_RxEventCallback>
 8005d18:	e002      	b.n	8005d20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d1a:	6878      	ldr	r0, [r7, #4]
 8005d1c:	f7fb fe24 	bl	8001968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d20:	2300      	movs	r3, #0
 8005d22:	e002      	b.n	8005d2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005d24:	2300      	movs	r3, #0
 8005d26:	e000      	b.n	8005d2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005d28:	2302      	movs	r3, #2
  }
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3730      	adds	r7, #48	; 0x30
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
	...

08005d34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d34:	b580      	push	{r7, lr}
 8005d36:	b084      	sub	sp, #16
 8005d38:	af00      	add	r7, sp, #0
 8005d3a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	68da      	ldr	r2, [r3, #12]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	430a      	orrs	r2, r1
 8005d50:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	689a      	ldr	r2, [r3, #8]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	431a      	orrs	r2, r3
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005d6e:	f023 030c 	bic.w	r3, r3, #12
 8005d72:	687a      	ldr	r2, [r7, #4]
 8005d74:	6812      	ldr	r2, [r2, #0]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	430b      	orrs	r3, r1
 8005d7a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	695b      	ldr	r3, [r3, #20]
 8005d82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	699a      	ldr	r2, [r3, #24]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	430a      	orrs	r2, r1
 8005d90:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	4a2c      	ldr	r2, [pc, #176]	; (8005e48 <UART_SetConfig+0x114>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d103      	bne.n	8005da4 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005d9c:	f7fe fc12 	bl	80045c4 <HAL_RCC_GetPCLK2Freq>
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	e002      	b.n	8005daa <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005da4:	f7fe fbfa 	bl	800459c <HAL_RCC_GetPCLK1Freq>
 8005da8:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005daa:	68fa      	ldr	r2, [r7, #12]
 8005dac:	4613      	mov	r3, r2
 8005dae:	009b      	lsls	r3, r3, #2
 8005db0:	4413      	add	r3, r2
 8005db2:	009a      	lsls	r2, r3, #2
 8005db4:	441a      	add	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	009b      	lsls	r3, r3, #2
 8005dbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005dc0:	4a22      	ldr	r2, [pc, #136]	; (8005e4c <UART_SetConfig+0x118>)
 8005dc2:	fba2 2303 	umull	r2, r3, r2, r3
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	0119      	lsls	r1, r3, #4
 8005dca:	68fa      	ldr	r2, [r7, #12]
 8005dcc:	4613      	mov	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	4413      	add	r3, r2
 8005dd2:	009a      	lsls	r2, r3, #2
 8005dd4:	441a      	add	r2, r3
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	685b      	ldr	r3, [r3, #4]
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8005de0:	4b1a      	ldr	r3, [pc, #104]	; (8005e4c <UART_SetConfig+0x118>)
 8005de2:	fba3 0302 	umull	r0, r3, r3, r2
 8005de6:	095b      	lsrs	r3, r3, #5
 8005de8:	2064      	movs	r0, #100	; 0x64
 8005dea:	fb00 f303 	mul.w	r3, r0, r3
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	011b      	lsls	r3, r3, #4
 8005df2:	3332      	adds	r3, #50	; 0x32
 8005df4:	4a15      	ldr	r2, [pc, #84]	; (8005e4c <UART_SetConfig+0x118>)
 8005df6:	fba2 2303 	umull	r2, r3, r2, r3
 8005dfa:	095b      	lsrs	r3, r3, #5
 8005dfc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e00:	4419      	add	r1, r3
 8005e02:	68fa      	ldr	r2, [r7, #12]
 8005e04:	4613      	mov	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	009a      	lsls	r2, r3, #2
 8005e0c:	441a      	add	r2, r3
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	fbb2 f2f3 	udiv	r2, r2, r3
 8005e18:	4b0c      	ldr	r3, [pc, #48]	; (8005e4c <UART_SetConfig+0x118>)
 8005e1a:	fba3 0302 	umull	r0, r3, r3, r2
 8005e1e:	095b      	lsrs	r3, r3, #5
 8005e20:	2064      	movs	r0, #100	; 0x64
 8005e22:	fb00 f303 	mul.w	r3, r0, r3
 8005e26:	1ad3      	subs	r3, r2, r3
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	3332      	adds	r3, #50	; 0x32
 8005e2c:	4a07      	ldr	r2, [pc, #28]	; (8005e4c <UART_SetConfig+0x118>)
 8005e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	f003 020f 	and.w	r2, r3, #15
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	440a      	add	r2, r1
 8005e3e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005e40:	bf00      	nop
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}
 8005e48:	40013800 	.word	0x40013800
 8005e4c:	51eb851f 	.word	0x51eb851f

08005e50 <__cvt>:
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e56:	461f      	mov	r7, r3
 8005e58:	bfbb      	ittet	lt
 8005e5a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8005e5e:	461f      	movlt	r7, r3
 8005e60:	2300      	movge	r3, #0
 8005e62:	232d      	movlt	r3, #45	; 0x2d
 8005e64:	b088      	sub	sp, #32
 8005e66:	4614      	mov	r4, r2
 8005e68:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005e6a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8005e6c:	7013      	strb	r3, [r2, #0]
 8005e6e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005e70:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8005e74:	f023 0820 	bic.w	r8, r3, #32
 8005e78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005e7c:	d005      	beq.n	8005e8a <__cvt+0x3a>
 8005e7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8005e82:	d100      	bne.n	8005e86 <__cvt+0x36>
 8005e84:	3501      	adds	r5, #1
 8005e86:	2302      	movs	r3, #2
 8005e88:	e000      	b.n	8005e8c <__cvt+0x3c>
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	aa07      	add	r2, sp, #28
 8005e8e:	9204      	str	r2, [sp, #16]
 8005e90:	aa06      	add	r2, sp, #24
 8005e92:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005e96:	e9cd 3500 	strd	r3, r5, [sp]
 8005e9a:	4622      	mov	r2, r4
 8005e9c:	463b      	mov	r3, r7
 8005e9e:	f000 fe7f 	bl	8006ba0 <_dtoa_r>
 8005ea2:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	d102      	bne.n	8005eb0 <__cvt+0x60>
 8005eaa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005eac:	07db      	lsls	r3, r3, #31
 8005eae:	d522      	bpl.n	8005ef6 <__cvt+0xa6>
 8005eb0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005eb4:	eb06 0905 	add.w	r9, r6, r5
 8005eb8:	d110      	bne.n	8005edc <__cvt+0x8c>
 8005eba:	7833      	ldrb	r3, [r6, #0]
 8005ebc:	2b30      	cmp	r3, #48	; 0x30
 8005ebe:	d10a      	bne.n	8005ed6 <__cvt+0x86>
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	2300      	movs	r3, #0
 8005ec4:	4620      	mov	r0, r4
 8005ec6:	4639      	mov	r1, r7
 8005ec8:	f7fa fd6e 	bl	80009a8 <__aeabi_dcmpeq>
 8005ecc:	b918      	cbnz	r0, 8005ed6 <__cvt+0x86>
 8005ece:	f1c5 0501 	rsb	r5, r5, #1
 8005ed2:	f8ca 5000 	str.w	r5, [sl]
 8005ed6:	f8da 3000 	ldr.w	r3, [sl]
 8005eda:	4499      	add	r9, r3
 8005edc:	2200      	movs	r2, #0
 8005ede:	2300      	movs	r3, #0
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa fd60 	bl	80009a8 <__aeabi_dcmpeq>
 8005ee8:	b108      	cbz	r0, 8005eee <__cvt+0x9e>
 8005eea:	f8cd 901c 	str.w	r9, [sp, #28]
 8005eee:	2230      	movs	r2, #48	; 0x30
 8005ef0:	9b07      	ldr	r3, [sp, #28]
 8005ef2:	454b      	cmp	r3, r9
 8005ef4:	d307      	bcc.n	8005f06 <__cvt+0xb6>
 8005ef6:	4630      	mov	r0, r6
 8005ef8:	9b07      	ldr	r3, [sp, #28]
 8005efa:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005efc:	1b9b      	subs	r3, r3, r6
 8005efe:	6013      	str	r3, [r2, #0]
 8005f00:	b008      	add	sp, #32
 8005f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f06:	1c59      	adds	r1, r3, #1
 8005f08:	9107      	str	r1, [sp, #28]
 8005f0a:	701a      	strb	r2, [r3, #0]
 8005f0c:	e7f0      	b.n	8005ef0 <__cvt+0xa0>

08005f0e <__exponent>:
 8005f0e:	4603      	mov	r3, r0
 8005f10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005f12:	2900      	cmp	r1, #0
 8005f14:	f803 2b02 	strb.w	r2, [r3], #2
 8005f18:	bfb6      	itet	lt
 8005f1a:	222d      	movlt	r2, #45	; 0x2d
 8005f1c:	222b      	movge	r2, #43	; 0x2b
 8005f1e:	4249      	neglt	r1, r1
 8005f20:	2909      	cmp	r1, #9
 8005f22:	7042      	strb	r2, [r0, #1]
 8005f24:	dd2a      	ble.n	8005f7c <__exponent+0x6e>
 8005f26:	f10d 0207 	add.w	r2, sp, #7
 8005f2a:	4617      	mov	r7, r2
 8005f2c:	260a      	movs	r6, #10
 8005f2e:	fb91 f5f6 	sdiv	r5, r1, r6
 8005f32:	4694      	mov	ip, r2
 8005f34:	fb06 1415 	mls	r4, r6, r5, r1
 8005f38:	3430      	adds	r4, #48	; 0x30
 8005f3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8005f3e:	460c      	mov	r4, r1
 8005f40:	2c63      	cmp	r4, #99	; 0x63
 8005f42:	4629      	mov	r1, r5
 8005f44:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005f48:	dcf1      	bgt.n	8005f2e <__exponent+0x20>
 8005f4a:	3130      	adds	r1, #48	; 0x30
 8005f4c:	f1ac 0402 	sub.w	r4, ip, #2
 8005f50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8005f54:	4622      	mov	r2, r4
 8005f56:	1c41      	adds	r1, r0, #1
 8005f58:	42ba      	cmp	r2, r7
 8005f5a:	d30a      	bcc.n	8005f72 <__exponent+0x64>
 8005f5c:	f10d 0209 	add.w	r2, sp, #9
 8005f60:	eba2 020c 	sub.w	r2, r2, ip
 8005f64:	42bc      	cmp	r4, r7
 8005f66:	bf88      	it	hi
 8005f68:	2200      	movhi	r2, #0
 8005f6a:	4413      	add	r3, r2
 8005f6c:	1a18      	subs	r0, r3, r0
 8005f6e:	b003      	add	sp, #12
 8005f70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005f76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8005f7a:	e7ed      	b.n	8005f58 <__exponent+0x4a>
 8005f7c:	2330      	movs	r3, #48	; 0x30
 8005f7e:	3130      	adds	r1, #48	; 0x30
 8005f80:	7083      	strb	r3, [r0, #2]
 8005f82:	70c1      	strb	r1, [r0, #3]
 8005f84:	1d03      	adds	r3, r0, #4
 8005f86:	e7f1      	b.n	8005f6c <__exponent+0x5e>

08005f88 <_printf_float>:
 8005f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f8c:	b091      	sub	sp, #68	; 0x44
 8005f8e:	460c      	mov	r4, r1
 8005f90:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005f94:	4616      	mov	r6, r2
 8005f96:	461f      	mov	r7, r3
 8005f98:	4605      	mov	r5, r0
 8005f9a:	f000 fce5 	bl	8006968 <_localeconv_r>
 8005f9e:	6803      	ldr	r3, [r0, #0]
 8005fa0:	4618      	mov	r0, r3
 8005fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8005fa4:	f7fa f8d4 	bl	8000150 <strlen>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	930e      	str	r3, [sp, #56]	; 0x38
 8005fac:	f8d8 3000 	ldr.w	r3, [r8]
 8005fb0:	900a      	str	r0, [sp, #40]	; 0x28
 8005fb2:	3307      	adds	r3, #7
 8005fb4:	f023 0307 	bic.w	r3, r3, #7
 8005fb8:	f103 0208 	add.w	r2, r3, #8
 8005fbc:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005fc0:	f8d4 b000 	ldr.w	fp, [r4]
 8005fc4:	f8c8 2000 	str.w	r2, [r8]
 8005fc8:	e9d3 a800 	ldrd	sl, r8, [r3]
 8005fcc:	4652      	mov	r2, sl
 8005fce:	4643      	mov	r3, r8
 8005fd0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005fd4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 8005fd8:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fda:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fde:	4650      	mov	r0, sl
 8005fe0:	4b9c      	ldr	r3, [pc, #624]	; (8006254 <_printf_float+0x2cc>)
 8005fe2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005fe4:	f7fa fd12 	bl	8000a0c <__aeabi_dcmpun>
 8005fe8:	bb70      	cbnz	r0, 8006048 <_printf_float+0xc0>
 8005fea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005fee:	4650      	mov	r0, sl
 8005ff0:	4b98      	ldr	r3, [pc, #608]	; (8006254 <_printf_float+0x2cc>)
 8005ff2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005ff4:	f7fa fcec 	bl	80009d0 <__aeabi_dcmple>
 8005ff8:	bb30      	cbnz	r0, 8006048 <_printf_float+0xc0>
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	2300      	movs	r3, #0
 8005ffe:	4650      	mov	r0, sl
 8006000:	4641      	mov	r1, r8
 8006002:	f7fa fcdb 	bl	80009bc <__aeabi_dcmplt>
 8006006:	b110      	cbz	r0, 800600e <_printf_float+0x86>
 8006008:	232d      	movs	r3, #45	; 0x2d
 800600a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800600e:	4a92      	ldr	r2, [pc, #584]	; (8006258 <_printf_float+0x2d0>)
 8006010:	4b92      	ldr	r3, [pc, #584]	; (800625c <_printf_float+0x2d4>)
 8006012:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8006016:	bf94      	ite	ls
 8006018:	4690      	movls	r8, r2
 800601a:	4698      	movhi	r8, r3
 800601c:	2303      	movs	r3, #3
 800601e:	f04f 0a00 	mov.w	sl, #0
 8006022:	6123      	str	r3, [r4, #16]
 8006024:	f02b 0304 	bic.w	r3, fp, #4
 8006028:	6023      	str	r3, [r4, #0]
 800602a:	4633      	mov	r3, r6
 800602c:	4621      	mov	r1, r4
 800602e:	4628      	mov	r0, r5
 8006030:	9700      	str	r7, [sp, #0]
 8006032:	aa0f      	add	r2, sp, #60	; 0x3c
 8006034:	f000 f9d6 	bl	80063e4 <_printf_common>
 8006038:	3001      	adds	r0, #1
 800603a:	f040 8090 	bne.w	800615e <_printf_float+0x1d6>
 800603e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006042:	b011      	add	sp, #68	; 0x44
 8006044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006048:	4652      	mov	r2, sl
 800604a:	4643      	mov	r3, r8
 800604c:	4650      	mov	r0, sl
 800604e:	4641      	mov	r1, r8
 8006050:	f7fa fcdc 	bl	8000a0c <__aeabi_dcmpun>
 8006054:	b148      	cbz	r0, 800606a <_printf_float+0xe2>
 8006056:	f1b8 0f00 	cmp.w	r8, #0
 800605a:	bfb8      	it	lt
 800605c:	232d      	movlt	r3, #45	; 0x2d
 800605e:	4a80      	ldr	r2, [pc, #512]	; (8006260 <_printf_float+0x2d8>)
 8006060:	bfb8      	it	lt
 8006062:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006066:	4b7f      	ldr	r3, [pc, #508]	; (8006264 <_printf_float+0x2dc>)
 8006068:	e7d3      	b.n	8006012 <_printf_float+0x8a>
 800606a:	6863      	ldr	r3, [r4, #4]
 800606c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006070:	1c5a      	adds	r2, r3, #1
 8006072:	d142      	bne.n	80060fa <_printf_float+0x172>
 8006074:	2306      	movs	r3, #6
 8006076:	6063      	str	r3, [r4, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	9206      	str	r2, [sp, #24]
 800607c:	aa0e      	add	r2, sp, #56	; 0x38
 800607e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8006082:	aa0d      	add	r2, sp, #52	; 0x34
 8006084:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8006088:	9203      	str	r2, [sp, #12]
 800608a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800608e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8006092:	6023      	str	r3, [r4, #0]
 8006094:	6863      	ldr	r3, [r4, #4]
 8006096:	4652      	mov	r2, sl
 8006098:	9300      	str	r3, [sp, #0]
 800609a:	4628      	mov	r0, r5
 800609c:	4643      	mov	r3, r8
 800609e:	910b      	str	r1, [sp, #44]	; 0x2c
 80060a0:	f7ff fed6 	bl	8005e50 <__cvt>
 80060a4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80060a6:	4680      	mov	r8, r0
 80060a8:	2947      	cmp	r1, #71	; 0x47
 80060aa:	990d      	ldr	r1, [sp, #52]	; 0x34
 80060ac:	d108      	bne.n	80060c0 <_printf_float+0x138>
 80060ae:	1cc8      	adds	r0, r1, #3
 80060b0:	db02      	blt.n	80060b8 <_printf_float+0x130>
 80060b2:	6863      	ldr	r3, [r4, #4]
 80060b4:	4299      	cmp	r1, r3
 80060b6:	dd40      	ble.n	800613a <_printf_float+0x1b2>
 80060b8:	f1a9 0902 	sub.w	r9, r9, #2
 80060bc:	fa5f f989 	uxtb.w	r9, r9
 80060c0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80060c4:	d81f      	bhi.n	8006106 <_printf_float+0x17e>
 80060c6:	464a      	mov	r2, r9
 80060c8:	3901      	subs	r1, #1
 80060ca:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80060ce:	910d      	str	r1, [sp, #52]	; 0x34
 80060d0:	f7ff ff1d 	bl	8005f0e <__exponent>
 80060d4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80060d6:	4682      	mov	sl, r0
 80060d8:	1813      	adds	r3, r2, r0
 80060da:	2a01      	cmp	r2, #1
 80060dc:	6123      	str	r3, [r4, #16]
 80060de:	dc02      	bgt.n	80060e6 <_printf_float+0x15e>
 80060e0:	6822      	ldr	r2, [r4, #0]
 80060e2:	07d2      	lsls	r2, r2, #31
 80060e4:	d501      	bpl.n	80060ea <_printf_float+0x162>
 80060e6:	3301      	adds	r3, #1
 80060e8:	6123      	str	r3, [r4, #16]
 80060ea:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d09b      	beq.n	800602a <_printf_float+0xa2>
 80060f2:	232d      	movs	r3, #45	; 0x2d
 80060f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060f8:	e797      	b.n	800602a <_printf_float+0xa2>
 80060fa:	2947      	cmp	r1, #71	; 0x47
 80060fc:	d1bc      	bne.n	8006078 <_printf_float+0xf0>
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d1ba      	bne.n	8006078 <_printf_float+0xf0>
 8006102:	2301      	movs	r3, #1
 8006104:	e7b7      	b.n	8006076 <_printf_float+0xee>
 8006106:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800610a:	d118      	bne.n	800613e <_printf_float+0x1b6>
 800610c:	2900      	cmp	r1, #0
 800610e:	6863      	ldr	r3, [r4, #4]
 8006110:	dd0b      	ble.n	800612a <_printf_float+0x1a2>
 8006112:	6121      	str	r1, [r4, #16]
 8006114:	b913      	cbnz	r3, 800611c <_printf_float+0x194>
 8006116:	6822      	ldr	r2, [r4, #0]
 8006118:	07d0      	lsls	r0, r2, #31
 800611a:	d502      	bpl.n	8006122 <_printf_float+0x19a>
 800611c:	3301      	adds	r3, #1
 800611e:	440b      	add	r3, r1
 8006120:	6123      	str	r3, [r4, #16]
 8006122:	f04f 0a00 	mov.w	sl, #0
 8006126:	65a1      	str	r1, [r4, #88]	; 0x58
 8006128:	e7df      	b.n	80060ea <_printf_float+0x162>
 800612a:	b913      	cbnz	r3, 8006132 <_printf_float+0x1aa>
 800612c:	6822      	ldr	r2, [r4, #0]
 800612e:	07d2      	lsls	r2, r2, #31
 8006130:	d501      	bpl.n	8006136 <_printf_float+0x1ae>
 8006132:	3302      	adds	r3, #2
 8006134:	e7f4      	b.n	8006120 <_printf_float+0x198>
 8006136:	2301      	movs	r3, #1
 8006138:	e7f2      	b.n	8006120 <_printf_float+0x198>
 800613a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800613e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006140:	4299      	cmp	r1, r3
 8006142:	db05      	blt.n	8006150 <_printf_float+0x1c8>
 8006144:	6823      	ldr	r3, [r4, #0]
 8006146:	6121      	str	r1, [r4, #16]
 8006148:	07d8      	lsls	r0, r3, #31
 800614a:	d5ea      	bpl.n	8006122 <_printf_float+0x19a>
 800614c:	1c4b      	adds	r3, r1, #1
 800614e:	e7e7      	b.n	8006120 <_printf_float+0x198>
 8006150:	2900      	cmp	r1, #0
 8006152:	bfcc      	ite	gt
 8006154:	2201      	movgt	r2, #1
 8006156:	f1c1 0202 	rsble	r2, r1, #2
 800615a:	4413      	add	r3, r2
 800615c:	e7e0      	b.n	8006120 <_printf_float+0x198>
 800615e:	6823      	ldr	r3, [r4, #0]
 8006160:	055a      	lsls	r2, r3, #21
 8006162:	d407      	bmi.n	8006174 <_printf_float+0x1ec>
 8006164:	6923      	ldr	r3, [r4, #16]
 8006166:	4642      	mov	r2, r8
 8006168:	4631      	mov	r1, r6
 800616a:	4628      	mov	r0, r5
 800616c:	47b8      	blx	r7
 800616e:	3001      	adds	r0, #1
 8006170:	d12b      	bne.n	80061ca <_printf_float+0x242>
 8006172:	e764      	b.n	800603e <_printf_float+0xb6>
 8006174:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006178:	f240 80dd 	bls.w	8006336 <_printf_float+0x3ae>
 800617c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006180:	2200      	movs	r2, #0
 8006182:	2300      	movs	r3, #0
 8006184:	f7fa fc10 	bl	80009a8 <__aeabi_dcmpeq>
 8006188:	2800      	cmp	r0, #0
 800618a:	d033      	beq.n	80061f4 <_printf_float+0x26c>
 800618c:	2301      	movs	r3, #1
 800618e:	4631      	mov	r1, r6
 8006190:	4628      	mov	r0, r5
 8006192:	4a35      	ldr	r2, [pc, #212]	; (8006268 <_printf_float+0x2e0>)
 8006194:	47b8      	blx	r7
 8006196:	3001      	adds	r0, #1
 8006198:	f43f af51 	beq.w	800603e <_printf_float+0xb6>
 800619c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80061a0:	429a      	cmp	r2, r3
 80061a2:	db02      	blt.n	80061aa <_printf_float+0x222>
 80061a4:	6823      	ldr	r3, [r4, #0]
 80061a6:	07d8      	lsls	r0, r3, #31
 80061a8:	d50f      	bpl.n	80061ca <_printf_float+0x242>
 80061aa:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80061ae:	4631      	mov	r1, r6
 80061b0:	4628      	mov	r0, r5
 80061b2:	47b8      	blx	r7
 80061b4:	3001      	adds	r0, #1
 80061b6:	f43f af42 	beq.w	800603e <_printf_float+0xb6>
 80061ba:	f04f 0800 	mov.w	r8, #0
 80061be:	f104 091a 	add.w	r9, r4, #26
 80061c2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80061c4:	3b01      	subs	r3, #1
 80061c6:	4543      	cmp	r3, r8
 80061c8:	dc09      	bgt.n	80061de <_printf_float+0x256>
 80061ca:	6823      	ldr	r3, [r4, #0]
 80061cc:	079b      	lsls	r3, r3, #30
 80061ce:	f100 8104 	bmi.w	80063da <_printf_float+0x452>
 80061d2:	68e0      	ldr	r0, [r4, #12]
 80061d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80061d6:	4298      	cmp	r0, r3
 80061d8:	bfb8      	it	lt
 80061da:	4618      	movlt	r0, r3
 80061dc:	e731      	b.n	8006042 <_printf_float+0xba>
 80061de:	2301      	movs	r3, #1
 80061e0:	464a      	mov	r2, r9
 80061e2:	4631      	mov	r1, r6
 80061e4:	4628      	mov	r0, r5
 80061e6:	47b8      	blx	r7
 80061e8:	3001      	adds	r0, #1
 80061ea:	f43f af28 	beq.w	800603e <_printf_float+0xb6>
 80061ee:	f108 0801 	add.w	r8, r8, #1
 80061f2:	e7e6      	b.n	80061c2 <_printf_float+0x23a>
 80061f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dc38      	bgt.n	800626c <_printf_float+0x2e4>
 80061fa:	2301      	movs	r3, #1
 80061fc:	4631      	mov	r1, r6
 80061fe:	4628      	mov	r0, r5
 8006200:	4a19      	ldr	r2, [pc, #100]	; (8006268 <_printf_float+0x2e0>)
 8006202:	47b8      	blx	r7
 8006204:	3001      	adds	r0, #1
 8006206:	f43f af1a 	beq.w	800603e <_printf_float+0xb6>
 800620a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800620e:	4313      	orrs	r3, r2
 8006210:	d102      	bne.n	8006218 <_printf_float+0x290>
 8006212:	6823      	ldr	r3, [r4, #0]
 8006214:	07d9      	lsls	r1, r3, #31
 8006216:	d5d8      	bpl.n	80061ca <_printf_float+0x242>
 8006218:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800621c:	4631      	mov	r1, r6
 800621e:	4628      	mov	r0, r5
 8006220:	47b8      	blx	r7
 8006222:	3001      	adds	r0, #1
 8006224:	f43f af0b 	beq.w	800603e <_printf_float+0xb6>
 8006228:	f04f 0900 	mov.w	r9, #0
 800622c:	f104 0a1a 	add.w	sl, r4, #26
 8006230:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006232:	425b      	negs	r3, r3
 8006234:	454b      	cmp	r3, r9
 8006236:	dc01      	bgt.n	800623c <_printf_float+0x2b4>
 8006238:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800623a:	e794      	b.n	8006166 <_printf_float+0x1de>
 800623c:	2301      	movs	r3, #1
 800623e:	4652      	mov	r2, sl
 8006240:	4631      	mov	r1, r6
 8006242:	4628      	mov	r0, r5
 8006244:	47b8      	blx	r7
 8006246:	3001      	adds	r0, #1
 8006248:	f43f aef9 	beq.w	800603e <_printf_float+0xb6>
 800624c:	f109 0901 	add.w	r9, r9, #1
 8006250:	e7ee      	b.n	8006230 <_printf_float+0x2a8>
 8006252:	bf00      	nop
 8006254:	7fefffff 	.word	0x7fefffff
 8006258:	0800a92a 	.word	0x0800a92a
 800625c:	0800a92e 	.word	0x0800a92e
 8006260:	0800a932 	.word	0x0800a932
 8006264:	0800a936 	.word	0x0800a936
 8006268:	0800a93a 	.word	0x0800a93a
 800626c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800626e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006270:	429a      	cmp	r2, r3
 8006272:	bfa8      	it	ge
 8006274:	461a      	movge	r2, r3
 8006276:	2a00      	cmp	r2, #0
 8006278:	4691      	mov	r9, r2
 800627a:	dc37      	bgt.n	80062ec <_printf_float+0x364>
 800627c:	f04f 0b00 	mov.w	fp, #0
 8006280:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006284:	f104 021a 	add.w	r2, r4, #26
 8006288:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800628c:	ebaa 0309 	sub.w	r3, sl, r9
 8006290:	455b      	cmp	r3, fp
 8006292:	dc33      	bgt.n	80062fc <_printf_float+0x374>
 8006294:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8006298:	429a      	cmp	r2, r3
 800629a:	db3b      	blt.n	8006314 <_printf_float+0x38c>
 800629c:	6823      	ldr	r3, [r4, #0]
 800629e:	07da      	lsls	r2, r3, #31
 80062a0:	d438      	bmi.n	8006314 <_printf_float+0x38c>
 80062a2:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80062a6:	eba2 0903 	sub.w	r9, r2, r3
 80062aa:	eba2 020a 	sub.w	r2, r2, sl
 80062ae:	4591      	cmp	r9, r2
 80062b0:	bfa8      	it	ge
 80062b2:	4691      	movge	r9, r2
 80062b4:	f1b9 0f00 	cmp.w	r9, #0
 80062b8:	dc34      	bgt.n	8006324 <_printf_float+0x39c>
 80062ba:	f04f 0800 	mov.w	r8, #0
 80062be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80062c2:	f104 0a1a 	add.w	sl, r4, #26
 80062c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	eba3 0309 	sub.w	r3, r3, r9
 80062d0:	4543      	cmp	r3, r8
 80062d2:	f77f af7a 	ble.w	80061ca <_printf_float+0x242>
 80062d6:	2301      	movs	r3, #1
 80062d8:	4652      	mov	r2, sl
 80062da:	4631      	mov	r1, r6
 80062dc:	4628      	mov	r0, r5
 80062de:	47b8      	blx	r7
 80062e0:	3001      	adds	r0, #1
 80062e2:	f43f aeac 	beq.w	800603e <_printf_float+0xb6>
 80062e6:	f108 0801 	add.w	r8, r8, #1
 80062ea:	e7ec      	b.n	80062c6 <_printf_float+0x33e>
 80062ec:	4613      	mov	r3, r2
 80062ee:	4631      	mov	r1, r6
 80062f0:	4642      	mov	r2, r8
 80062f2:	4628      	mov	r0, r5
 80062f4:	47b8      	blx	r7
 80062f6:	3001      	adds	r0, #1
 80062f8:	d1c0      	bne.n	800627c <_printf_float+0x2f4>
 80062fa:	e6a0      	b.n	800603e <_printf_float+0xb6>
 80062fc:	2301      	movs	r3, #1
 80062fe:	4631      	mov	r1, r6
 8006300:	4628      	mov	r0, r5
 8006302:	920b      	str	r2, [sp, #44]	; 0x2c
 8006304:	47b8      	blx	r7
 8006306:	3001      	adds	r0, #1
 8006308:	f43f ae99 	beq.w	800603e <_printf_float+0xb6>
 800630c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800630e:	f10b 0b01 	add.w	fp, fp, #1
 8006312:	e7b9      	b.n	8006288 <_printf_float+0x300>
 8006314:	4631      	mov	r1, r6
 8006316:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800631a:	4628      	mov	r0, r5
 800631c:	47b8      	blx	r7
 800631e:	3001      	adds	r0, #1
 8006320:	d1bf      	bne.n	80062a2 <_printf_float+0x31a>
 8006322:	e68c      	b.n	800603e <_printf_float+0xb6>
 8006324:	464b      	mov	r3, r9
 8006326:	4631      	mov	r1, r6
 8006328:	4628      	mov	r0, r5
 800632a:	eb08 020a 	add.w	r2, r8, sl
 800632e:	47b8      	blx	r7
 8006330:	3001      	adds	r0, #1
 8006332:	d1c2      	bne.n	80062ba <_printf_float+0x332>
 8006334:	e683      	b.n	800603e <_printf_float+0xb6>
 8006336:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006338:	2a01      	cmp	r2, #1
 800633a:	dc01      	bgt.n	8006340 <_printf_float+0x3b8>
 800633c:	07db      	lsls	r3, r3, #31
 800633e:	d539      	bpl.n	80063b4 <_printf_float+0x42c>
 8006340:	2301      	movs	r3, #1
 8006342:	4642      	mov	r2, r8
 8006344:	4631      	mov	r1, r6
 8006346:	4628      	mov	r0, r5
 8006348:	47b8      	blx	r7
 800634a:	3001      	adds	r0, #1
 800634c:	f43f ae77 	beq.w	800603e <_printf_float+0xb6>
 8006350:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8006354:	4631      	mov	r1, r6
 8006356:	4628      	mov	r0, r5
 8006358:	47b8      	blx	r7
 800635a:	3001      	adds	r0, #1
 800635c:	f43f ae6f 	beq.w	800603e <_printf_float+0xb6>
 8006360:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8006364:	2200      	movs	r2, #0
 8006366:	2300      	movs	r3, #0
 8006368:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800636c:	f7fa fb1c 	bl	80009a8 <__aeabi_dcmpeq>
 8006370:	b9d8      	cbnz	r0, 80063aa <_printf_float+0x422>
 8006372:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
 8006376:	f108 0201 	add.w	r2, r8, #1
 800637a:	4631      	mov	r1, r6
 800637c:	4628      	mov	r0, r5
 800637e:	47b8      	blx	r7
 8006380:	3001      	adds	r0, #1
 8006382:	d10e      	bne.n	80063a2 <_printf_float+0x41a>
 8006384:	e65b      	b.n	800603e <_printf_float+0xb6>
 8006386:	2301      	movs	r3, #1
 8006388:	464a      	mov	r2, r9
 800638a:	4631      	mov	r1, r6
 800638c:	4628      	mov	r0, r5
 800638e:	47b8      	blx	r7
 8006390:	3001      	adds	r0, #1
 8006392:	f43f ae54 	beq.w	800603e <_printf_float+0xb6>
 8006396:	f108 0801 	add.w	r8, r8, #1
 800639a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800639c:	3b01      	subs	r3, #1
 800639e:	4543      	cmp	r3, r8
 80063a0:	dcf1      	bgt.n	8006386 <_printf_float+0x3fe>
 80063a2:	4653      	mov	r3, sl
 80063a4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80063a8:	e6de      	b.n	8006168 <_printf_float+0x1e0>
 80063aa:	f04f 0800 	mov.w	r8, #0
 80063ae:	f104 091a 	add.w	r9, r4, #26
 80063b2:	e7f2      	b.n	800639a <_printf_float+0x412>
 80063b4:	2301      	movs	r3, #1
 80063b6:	4642      	mov	r2, r8
 80063b8:	e7df      	b.n	800637a <_printf_float+0x3f2>
 80063ba:	2301      	movs	r3, #1
 80063bc:	464a      	mov	r2, r9
 80063be:	4631      	mov	r1, r6
 80063c0:	4628      	mov	r0, r5
 80063c2:	47b8      	blx	r7
 80063c4:	3001      	adds	r0, #1
 80063c6:	f43f ae3a 	beq.w	800603e <_printf_float+0xb6>
 80063ca:	f108 0801 	add.w	r8, r8, #1
 80063ce:	68e3      	ldr	r3, [r4, #12]
 80063d0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80063d2:	1a5b      	subs	r3, r3, r1
 80063d4:	4543      	cmp	r3, r8
 80063d6:	dcf0      	bgt.n	80063ba <_printf_float+0x432>
 80063d8:	e6fb      	b.n	80061d2 <_printf_float+0x24a>
 80063da:	f04f 0800 	mov.w	r8, #0
 80063de:	f104 0919 	add.w	r9, r4, #25
 80063e2:	e7f4      	b.n	80063ce <_printf_float+0x446>

080063e4 <_printf_common>:
 80063e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80063e8:	4616      	mov	r6, r2
 80063ea:	4699      	mov	r9, r3
 80063ec:	688a      	ldr	r2, [r1, #8]
 80063ee:	690b      	ldr	r3, [r1, #16]
 80063f0:	4607      	mov	r7, r0
 80063f2:	4293      	cmp	r3, r2
 80063f4:	bfb8      	it	lt
 80063f6:	4613      	movlt	r3, r2
 80063f8:	6033      	str	r3, [r6, #0]
 80063fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80063fe:	460c      	mov	r4, r1
 8006400:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006404:	b10a      	cbz	r2, 800640a <_printf_common+0x26>
 8006406:	3301      	adds	r3, #1
 8006408:	6033      	str	r3, [r6, #0]
 800640a:	6823      	ldr	r3, [r4, #0]
 800640c:	0699      	lsls	r1, r3, #26
 800640e:	bf42      	ittt	mi
 8006410:	6833      	ldrmi	r3, [r6, #0]
 8006412:	3302      	addmi	r3, #2
 8006414:	6033      	strmi	r3, [r6, #0]
 8006416:	6825      	ldr	r5, [r4, #0]
 8006418:	f015 0506 	ands.w	r5, r5, #6
 800641c:	d106      	bne.n	800642c <_printf_common+0x48>
 800641e:	f104 0a19 	add.w	sl, r4, #25
 8006422:	68e3      	ldr	r3, [r4, #12]
 8006424:	6832      	ldr	r2, [r6, #0]
 8006426:	1a9b      	subs	r3, r3, r2
 8006428:	42ab      	cmp	r3, r5
 800642a:	dc2b      	bgt.n	8006484 <_printf_common+0xa0>
 800642c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006430:	1e13      	subs	r3, r2, #0
 8006432:	6822      	ldr	r2, [r4, #0]
 8006434:	bf18      	it	ne
 8006436:	2301      	movne	r3, #1
 8006438:	0692      	lsls	r2, r2, #26
 800643a:	d430      	bmi.n	800649e <_printf_common+0xba>
 800643c:	4649      	mov	r1, r9
 800643e:	4638      	mov	r0, r7
 8006440:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006444:	47c0      	blx	r8
 8006446:	3001      	adds	r0, #1
 8006448:	d023      	beq.n	8006492 <_printf_common+0xae>
 800644a:	6823      	ldr	r3, [r4, #0]
 800644c:	6922      	ldr	r2, [r4, #16]
 800644e:	f003 0306 	and.w	r3, r3, #6
 8006452:	2b04      	cmp	r3, #4
 8006454:	bf14      	ite	ne
 8006456:	2500      	movne	r5, #0
 8006458:	6833      	ldreq	r3, [r6, #0]
 800645a:	f04f 0600 	mov.w	r6, #0
 800645e:	bf08      	it	eq
 8006460:	68e5      	ldreq	r5, [r4, #12]
 8006462:	f104 041a 	add.w	r4, r4, #26
 8006466:	bf08      	it	eq
 8006468:	1aed      	subeq	r5, r5, r3
 800646a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800646e:	bf08      	it	eq
 8006470:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006474:	4293      	cmp	r3, r2
 8006476:	bfc4      	itt	gt
 8006478:	1a9b      	subgt	r3, r3, r2
 800647a:	18ed      	addgt	r5, r5, r3
 800647c:	42b5      	cmp	r5, r6
 800647e:	d11a      	bne.n	80064b6 <_printf_common+0xd2>
 8006480:	2000      	movs	r0, #0
 8006482:	e008      	b.n	8006496 <_printf_common+0xb2>
 8006484:	2301      	movs	r3, #1
 8006486:	4652      	mov	r2, sl
 8006488:	4649      	mov	r1, r9
 800648a:	4638      	mov	r0, r7
 800648c:	47c0      	blx	r8
 800648e:	3001      	adds	r0, #1
 8006490:	d103      	bne.n	800649a <_printf_common+0xb6>
 8006492:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800649a:	3501      	adds	r5, #1
 800649c:	e7c1      	b.n	8006422 <_printf_common+0x3e>
 800649e:	2030      	movs	r0, #48	; 0x30
 80064a0:	18e1      	adds	r1, r4, r3
 80064a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80064ac:	4422      	add	r2, r4
 80064ae:	3302      	adds	r3, #2
 80064b0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80064b4:	e7c2      	b.n	800643c <_printf_common+0x58>
 80064b6:	2301      	movs	r3, #1
 80064b8:	4622      	mov	r2, r4
 80064ba:	4649      	mov	r1, r9
 80064bc:	4638      	mov	r0, r7
 80064be:	47c0      	blx	r8
 80064c0:	3001      	adds	r0, #1
 80064c2:	d0e6      	beq.n	8006492 <_printf_common+0xae>
 80064c4:	3601      	adds	r6, #1
 80064c6:	e7d9      	b.n	800647c <_printf_common+0x98>

080064c8 <_printf_i>:
 80064c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80064cc:	7e0f      	ldrb	r7, [r1, #24]
 80064ce:	4691      	mov	r9, r2
 80064d0:	2f78      	cmp	r7, #120	; 0x78
 80064d2:	4680      	mov	r8, r0
 80064d4:	460c      	mov	r4, r1
 80064d6:	469a      	mov	sl, r3
 80064d8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80064da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80064de:	d807      	bhi.n	80064f0 <_printf_i+0x28>
 80064e0:	2f62      	cmp	r7, #98	; 0x62
 80064e2:	d80a      	bhi.n	80064fa <_printf_i+0x32>
 80064e4:	2f00      	cmp	r7, #0
 80064e6:	f000 80d5 	beq.w	8006694 <_printf_i+0x1cc>
 80064ea:	2f58      	cmp	r7, #88	; 0x58
 80064ec:	f000 80c1 	beq.w	8006672 <_printf_i+0x1aa>
 80064f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80064f8:	e03a      	b.n	8006570 <_printf_i+0xa8>
 80064fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80064fe:	2b15      	cmp	r3, #21
 8006500:	d8f6      	bhi.n	80064f0 <_printf_i+0x28>
 8006502:	a101      	add	r1, pc, #4	; (adr r1, 8006508 <_printf_i+0x40>)
 8006504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006508:	08006561 	.word	0x08006561
 800650c:	08006575 	.word	0x08006575
 8006510:	080064f1 	.word	0x080064f1
 8006514:	080064f1 	.word	0x080064f1
 8006518:	080064f1 	.word	0x080064f1
 800651c:	080064f1 	.word	0x080064f1
 8006520:	08006575 	.word	0x08006575
 8006524:	080064f1 	.word	0x080064f1
 8006528:	080064f1 	.word	0x080064f1
 800652c:	080064f1 	.word	0x080064f1
 8006530:	080064f1 	.word	0x080064f1
 8006534:	0800667b 	.word	0x0800667b
 8006538:	080065a1 	.word	0x080065a1
 800653c:	08006635 	.word	0x08006635
 8006540:	080064f1 	.word	0x080064f1
 8006544:	080064f1 	.word	0x080064f1
 8006548:	0800669d 	.word	0x0800669d
 800654c:	080064f1 	.word	0x080064f1
 8006550:	080065a1 	.word	0x080065a1
 8006554:	080064f1 	.word	0x080064f1
 8006558:	080064f1 	.word	0x080064f1
 800655c:	0800663d 	.word	0x0800663d
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	1d1a      	adds	r2, r3, #4
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	602a      	str	r2, [r5, #0]
 8006568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800656c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006570:	2301      	movs	r3, #1
 8006572:	e0a0      	b.n	80066b6 <_printf_i+0x1ee>
 8006574:	6820      	ldr	r0, [r4, #0]
 8006576:	682b      	ldr	r3, [r5, #0]
 8006578:	0607      	lsls	r7, r0, #24
 800657a:	f103 0104 	add.w	r1, r3, #4
 800657e:	6029      	str	r1, [r5, #0]
 8006580:	d501      	bpl.n	8006586 <_printf_i+0xbe>
 8006582:	681e      	ldr	r6, [r3, #0]
 8006584:	e003      	b.n	800658e <_printf_i+0xc6>
 8006586:	0646      	lsls	r6, r0, #25
 8006588:	d5fb      	bpl.n	8006582 <_printf_i+0xba>
 800658a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800658e:	2e00      	cmp	r6, #0
 8006590:	da03      	bge.n	800659a <_printf_i+0xd2>
 8006592:	232d      	movs	r3, #45	; 0x2d
 8006594:	4276      	negs	r6, r6
 8006596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800659a:	230a      	movs	r3, #10
 800659c:	4859      	ldr	r0, [pc, #356]	; (8006704 <_printf_i+0x23c>)
 800659e:	e012      	b.n	80065c6 <_printf_i+0xfe>
 80065a0:	682b      	ldr	r3, [r5, #0]
 80065a2:	6820      	ldr	r0, [r4, #0]
 80065a4:	1d19      	adds	r1, r3, #4
 80065a6:	6029      	str	r1, [r5, #0]
 80065a8:	0605      	lsls	r5, r0, #24
 80065aa:	d501      	bpl.n	80065b0 <_printf_i+0xe8>
 80065ac:	681e      	ldr	r6, [r3, #0]
 80065ae:	e002      	b.n	80065b6 <_printf_i+0xee>
 80065b0:	0641      	lsls	r1, r0, #25
 80065b2:	d5fb      	bpl.n	80065ac <_printf_i+0xe4>
 80065b4:	881e      	ldrh	r6, [r3, #0]
 80065b6:	2f6f      	cmp	r7, #111	; 0x6f
 80065b8:	bf0c      	ite	eq
 80065ba:	2308      	moveq	r3, #8
 80065bc:	230a      	movne	r3, #10
 80065be:	4851      	ldr	r0, [pc, #324]	; (8006704 <_printf_i+0x23c>)
 80065c0:	2100      	movs	r1, #0
 80065c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80065c6:	6865      	ldr	r5, [r4, #4]
 80065c8:	2d00      	cmp	r5, #0
 80065ca:	bfa8      	it	ge
 80065cc:	6821      	ldrge	r1, [r4, #0]
 80065ce:	60a5      	str	r5, [r4, #8]
 80065d0:	bfa4      	itt	ge
 80065d2:	f021 0104 	bicge.w	r1, r1, #4
 80065d6:	6021      	strge	r1, [r4, #0]
 80065d8:	b90e      	cbnz	r6, 80065de <_printf_i+0x116>
 80065da:	2d00      	cmp	r5, #0
 80065dc:	d04b      	beq.n	8006676 <_printf_i+0x1ae>
 80065de:	4615      	mov	r5, r2
 80065e0:	fbb6 f1f3 	udiv	r1, r6, r3
 80065e4:	fb03 6711 	mls	r7, r3, r1, r6
 80065e8:	5dc7      	ldrb	r7, [r0, r7]
 80065ea:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80065ee:	4637      	mov	r7, r6
 80065f0:	42bb      	cmp	r3, r7
 80065f2:	460e      	mov	r6, r1
 80065f4:	d9f4      	bls.n	80065e0 <_printf_i+0x118>
 80065f6:	2b08      	cmp	r3, #8
 80065f8:	d10b      	bne.n	8006612 <_printf_i+0x14a>
 80065fa:	6823      	ldr	r3, [r4, #0]
 80065fc:	07de      	lsls	r6, r3, #31
 80065fe:	d508      	bpl.n	8006612 <_printf_i+0x14a>
 8006600:	6923      	ldr	r3, [r4, #16]
 8006602:	6861      	ldr	r1, [r4, #4]
 8006604:	4299      	cmp	r1, r3
 8006606:	bfde      	ittt	le
 8006608:	2330      	movle	r3, #48	; 0x30
 800660a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800660e:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006612:	1b52      	subs	r2, r2, r5
 8006614:	6122      	str	r2, [r4, #16]
 8006616:	464b      	mov	r3, r9
 8006618:	4621      	mov	r1, r4
 800661a:	4640      	mov	r0, r8
 800661c:	f8cd a000 	str.w	sl, [sp]
 8006620:	aa03      	add	r2, sp, #12
 8006622:	f7ff fedf 	bl	80063e4 <_printf_common>
 8006626:	3001      	adds	r0, #1
 8006628:	d14a      	bne.n	80066c0 <_printf_i+0x1f8>
 800662a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800662e:	b004      	add	sp, #16
 8006630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006634:	6823      	ldr	r3, [r4, #0]
 8006636:	f043 0320 	orr.w	r3, r3, #32
 800663a:	6023      	str	r3, [r4, #0]
 800663c:	2778      	movs	r7, #120	; 0x78
 800663e:	4832      	ldr	r0, [pc, #200]	; (8006708 <_printf_i+0x240>)
 8006640:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006644:	6823      	ldr	r3, [r4, #0]
 8006646:	6829      	ldr	r1, [r5, #0]
 8006648:	061f      	lsls	r7, r3, #24
 800664a:	f851 6b04 	ldr.w	r6, [r1], #4
 800664e:	d402      	bmi.n	8006656 <_printf_i+0x18e>
 8006650:	065f      	lsls	r7, r3, #25
 8006652:	bf48      	it	mi
 8006654:	b2b6      	uxthmi	r6, r6
 8006656:	07df      	lsls	r7, r3, #31
 8006658:	bf48      	it	mi
 800665a:	f043 0320 	orrmi.w	r3, r3, #32
 800665e:	6029      	str	r1, [r5, #0]
 8006660:	bf48      	it	mi
 8006662:	6023      	strmi	r3, [r4, #0]
 8006664:	b91e      	cbnz	r6, 800666e <_printf_i+0x1a6>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	f023 0320 	bic.w	r3, r3, #32
 800666c:	6023      	str	r3, [r4, #0]
 800666e:	2310      	movs	r3, #16
 8006670:	e7a6      	b.n	80065c0 <_printf_i+0xf8>
 8006672:	4824      	ldr	r0, [pc, #144]	; (8006704 <_printf_i+0x23c>)
 8006674:	e7e4      	b.n	8006640 <_printf_i+0x178>
 8006676:	4615      	mov	r5, r2
 8006678:	e7bd      	b.n	80065f6 <_printf_i+0x12e>
 800667a:	682b      	ldr	r3, [r5, #0]
 800667c:	6826      	ldr	r6, [r4, #0]
 800667e:	1d18      	adds	r0, r3, #4
 8006680:	6961      	ldr	r1, [r4, #20]
 8006682:	6028      	str	r0, [r5, #0]
 8006684:	0635      	lsls	r5, r6, #24
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	d501      	bpl.n	800668e <_printf_i+0x1c6>
 800668a:	6019      	str	r1, [r3, #0]
 800668c:	e002      	b.n	8006694 <_printf_i+0x1cc>
 800668e:	0670      	lsls	r0, r6, #25
 8006690:	d5fb      	bpl.n	800668a <_printf_i+0x1c2>
 8006692:	8019      	strh	r1, [r3, #0]
 8006694:	2300      	movs	r3, #0
 8006696:	4615      	mov	r5, r2
 8006698:	6123      	str	r3, [r4, #16]
 800669a:	e7bc      	b.n	8006616 <_printf_i+0x14e>
 800669c:	682b      	ldr	r3, [r5, #0]
 800669e:	2100      	movs	r1, #0
 80066a0:	1d1a      	adds	r2, r3, #4
 80066a2:	602a      	str	r2, [r5, #0]
 80066a4:	681d      	ldr	r5, [r3, #0]
 80066a6:	6862      	ldr	r2, [r4, #4]
 80066a8:	4628      	mov	r0, r5
 80066aa:	f000 f9d4 	bl	8006a56 <memchr>
 80066ae:	b108      	cbz	r0, 80066b4 <_printf_i+0x1ec>
 80066b0:	1b40      	subs	r0, r0, r5
 80066b2:	6060      	str	r0, [r4, #4]
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	6123      	str	r3, [r4, #16]
 80066b8:	2300      	movs	r3, #0
 80066ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066be:	e7aa      	b.n	8006616 <_printf_i+0x14e>
 80066c0:	462a      	mov	r2, r5
 80066c2:	4649      	mov	r1, r9
 80066c4:	4640      	mov	r0, r8
 80066c6:	6923      	ldr	r3, [r4, #16]
 80066c8:	47d0      	blx	sl
 80066ca:	3001      	adds	r0, #1
 80066cc:	d0ad      	beq.n	800662a <_printf_i+0x162>
 80066ce:	6823      	ldr	r3, [r4, #0]
 80066d0:	079b      	lsls	r3, r3, #30
 80066d2:	d413      	bmi.n	80066fc <_printf_i+0x234>
 80066d4:	68e0      	ldr	r0, [r4, #12]
 80066d6:	9b03      	ldr	r3, [sp, #12]
 80066d8:	4298      	cmp	r0, r3
 80066da:	bfb8      	it	lt
 80066dc:	4618      	movlt	r0, r3
 80066de:	e7a6      	b.n	800662e <_printf_i+0x166>
 80066e0:	2301      	movs	r3, #1
 80066e2:	4632      	mov	r2, r6
 80066e4:	4649      	mov	r1, r9
 80066e6:	4640      	mov	r0, r8
 80066e8:	47d0      	blx	sl
 80066ea:	3001      	adds	r0, #1
 80066ec:	d09d      	beq.n	800662a <_printf_i+0x162>
 80066ee:	3501      	adds	r5, #1
 80066f0:	68e3      	ldr	r3, [r4, #12]
 80066f2:	9903      	ldr	r1, [sp, #12]
 80066f4:	1a5b      	subs	r3, r3, r1
 80066f6:	42ab      	cmp	r3, r5
 80066f8:	dcf2      	bgt.n	80066e0 <_printf_i+0x218>
 80066fa:	e7eb      	b.n	80066d4 <_printf_i+0x20c>
 80066fc:	2500      	movs	r5, #0
 80066fe:	f104 0619 	add.w	r6, r4, #25
 8006702:	e7f5      	b.n	80066f0 <_printf_i+0x228>
 8006704:	0800a93c 	.word	0x0800a93c
 8006708:	0800a94d 	.word	0x0800a94d

0800670c <std>:
 800670c:	2300      	movs	r3, #0
 800670e:	b510      	push	{r4, lr}
 8006710:	4604      	mov	r4, r0
 8006712:	e9c0 3300 	strd	r3, r3, [r0]
 8006716:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800671a:	6083      	str	r3, [r0, #8]
 800671c:	8181      	strh	r1, [r0, #12]
 800671e:	6643      	str	r3, [r0, #100]	; 0x64
 8006720:	81c2      	strh	r2, [r0, #14]
 8006722:	6183      	str	r3, [r0, #24]
 8006724:	4619      	mov	r1, r3
 8006726:	2208      	movs	r2, #8
 8006728:	305c      	adds	r0, #92	; 0x5c
 800672a:	f000 f914 	bl	8006956 <memset>
 800672e:	4b0d      	ldr	r3, [pc, #52]	; (8006764 <std+0x58>)
 8006730:	6224      	str	r4, [r4, #32]
 8006732:	6263      	str	r3, [r4, #36]	; 0x24
 8006734:	4b0c      	ldr	r3, [pc, #48]	; (8006768 <std+0x5c>)
 8006736:	62a3      	str	r3, [r4, #40]	; 0x28
 8006738:	4b0c      	ldr	r3, [pc, #48]	; (800676c <std+0x60>)
 800673a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800673c:	4b0c      	ldr	r3, [pc, #48]	; (8006770 <std+0x64>)
 800673e:	6323      	str	r3, [r4, #48]	; 0x30
 8006740:	4b0c      	ldr	r3, [pc, #48]	; (8006774 <std+0x68>)
 8006742:	429c      	cmp	r4, r3
 8006744:	d006      	beq.n	8006754 <std+0x48>
 8006746:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800674a:	4294      	cmp	r4, r2
 800674c:	d002      	beq.n	8006754 <std+0x48>
 800674e:	33d0      	adds	r3, #208	; 0xd0
 8006750:	429c      	cmp	r4, r3
 8006752:	d105      	bne.n	8006760 <std+0x54>
 8006754:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006758:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800675c:	f000 b978 	b.w	8006a50 <__retarget_lock_init_recursive>
 8006760:	bd10      	pop	{r4, pc}
 8006762:	bf00      	nop
 8006764:	080068d1 	.word	0x080068d1
 8006768:	080068f3 	.word	0x080068f3
 800676c:	0800692b 	.word	0x0800692b
 8006770:	0800694f 	.word	0x0800694f
 8006774:	2000073c 	.word	0x2000073c

08006778 <stdio_exit_handler>:
 8006778:	4a02      	ldr	r2, [pc, #8]	; (8006784 <stdio_exit_handler+0xc>)
 800677a:	4903      	ldr	r1, [pc, #12]	; (8006788 <stdio_exit_handler+0x10>)
 800677c:	4803      	ldr	r0, [pc, #12]	; (800678c <stdio_exit_handler+0x14>)
 800677e:	f000 b869 	b.w	8006854 <_fwalk_sglue>
 8006782:	bf00      	nop
 8006784:	2000002c 	.word	0x2000002c
 8006788:	08008405 	.word	0x08008405
 800678c:	20000038 	.word	0x20000038

08006790 <cleanup_stdio>:
 8006790:	6841      	ldr	r1, [r0, #4]
 8006792:	4b0c      	ldr	r3, [pc, #48]	; (80067c4 <cleanup_stdio+0x34>)
 8006794:	b510      	push	{r4, lr}
 8006796:	4299      	cmp	r1, r3
 8006798:	4604      	mov	r4, r0
 800679a:	d001      	beq.n	80067a0 <cleanup_stdio+0x10>
 800679c:	f001 fe32 	bl	8008404 <_fflush_r>
 80067a0:	68a1      	ldr	r1, [r4, #8]
 80067a2:	4b09      	ldr	r3, [pc, #36]	; (80067c8 <cleanup_stdio+0x38>)
 80067a4:	4299      	cmp	r1, r3
 80067a6:	d002      	beq.n	80067ae <cleanup_stdio+0x1e>
 80067a8:	4620      	mov	r0, r4
 80067aa:	f001 fe2b 	bl	8008404 <_fflush_r>
 80067ae:	68e1      	ldr	r1, [r4, #12]
 80067b0:	4b06      	ldr	r3, [pc, #24]	; (80067cc <cleanup_stdio+0x3c>)
 80067b2:	4299      	cmp	r1, r3
 80067b4:	d004      	beq.n	80067c0 <cleanup_stdio+0x30>
 80067b6:	4620      	mov	r0, r4
 80067b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067bc:	f001 be22 	b.w	8008404 <_fflush_r>
 80067c0:	bd10      	pop	{r4, pc}
 80067c2:	bf00      	nop
 80067c4:	2000073c 	.word	0x2000073c
 80067c8:	200007a4 	.word	0x200007a4
 80067cc:	2000080c 	.word	0x2000080c

080067d0 <global_stdio_init.part.0>:
 80067d0:	b510      	push	{r4, lr}
 80067d2:	4b0b      	ldr	r3, [pc, #44]	; (8006800 <global_stdio_init.part.0+0x30>)
 80067d4:	4c0b      	ldr	r4, [pc, #44]	; (8006804 <global_stdio_init.part.0+0x34>)
 80067d6:	4a0c      	ldr	r2, [pc, #48]	; (8006808 <global_stdio_init.part.0+0x38>)
 80067d8:	4620      	mov	r0, r4
 80067da:	601a      	str	r2, [r3, #0]
 80067dc:	2104      	movs	r1, #4
 80067de:	2200      	movs	r2, #0
 80067e0:	f7ff ff94 	bl	800670c <std>
 80067e4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80067e8:	2201      	movs	r2, #1
 80067ea:	2109      	movs	r1, #9
 80067ec:	f7ff ff8e 	bl	800670c <std>
 80067f0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80067f4:	2202      	movs	r2, #2
 80067f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80067fa:	2112      	movs	r1, #18
 80067fc:	f7ff bf86 	b.w	800670c <std>
 8006800:	20000874 	.word	0x20000874
 8006804:	2000073c 	.word	0x2000073c
 8006808:	08006779 	.word	0x08006779

0800680c <__sfp_lock_acquire>:
 800680c:	4801      	ldr	r0, [pc, #4]	; (8006814 <__sfp_lock_acquire+0x8>)
 800680e:	f000 b920 	b.w	8006a52 <__retarget_lock_acquire_recursive>
 8006812:	bf00      	nop
 8006814:	2000087d 	.word	0x2000087d

08006818 <__sfp_lock_release>:
 8006818:	4801      	ldr	r0, [pc, #4]	; (8006820 <__sfp_lock_release+0x8>)
 800681a:	f000 b91b 	b.w	8006a54 <__retarget_lock_release_recursive>
 800681e:	bf00      	nop
 8006820:	2000087d 	.word	0x2000087d

08006824 <__sinit>:
 8006824:	b510      	push	{r4, lr}
 8006826:	4604      	mov	r4, r0
 8006828:	f7ff fff0 	bl	800680c <__sfp_lock_acquire>
 800682c:	6a23      	ldr	r3, [r4, #32]
 800682e:	b11b      	cbz	r3, 8006838 <__sinit+0x14>
 8006830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006834:	f7ff bff0 	b.w	8006818 <__sfp_lock_release>
 8006838:	4b04      	ldr	r3, [pc, #16]	; (800684c <__sinit+0x28>)
 800683a:	6223      	str	r3, [r4, #32]
 800683c:	4b04      	ldr	r3, [pc, #16]	; (8006850 <__sinit+0x2c>)
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d1f5      	bne.n	8006830 <__sinit+0xc>
 8006844:	f7ff ffc4 	bl	80067d0 <global_stdio_init.part.0>
 8006848:	e7f2      	b.n	8006830 <__sinit+0xc>
 800684a:	bf00      	nop
 800684c:	08006791 	.word	0x08006791
 8006850:	20000874 	.word	0x20000874

08006854 <_fwalk_sglue>:
 8006854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006858:	4607      	mov	r7, r0
 800685a:	4688      	mov	r8, r1
 800685c:	4614      	mov	r4, r2
 800685e:	2600      	movs	r6, #0
 8006860:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006864:	f1b9 0901 	subs.w	r9, r9, #1
 8006868:	d505      	bpl.n	8006876 <_fwalk_sglue+0x22>
 800686a:	6824      	ldr	r4, [r4, #0]
 800686c:	2c00      	cmp	r4, #0
 800686e:	d1f7      	bne.n	8006860 <_fwalk_sglue+0xc>
 8006870:	4630      	mov	r0, r6
 8006872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006876:	89ab      	ldrh	r3, [r5, #12]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d907      	bls.n	800688c <_fwalk_sglue+0x38>
 800687c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006880:	3301      	adds	r3, #1
 8006882:	d003      	beq.n	800688c <_fwalk_sglue+0x38>
 8006884:	4629      	mov	r1, r5
 8006886:	4638      	mov	r0, r7
 8006888:	47c0      	blx	r8
 800688a:	4306      	orrs	r6, r0
 800688c:	3568      	adds	r5, #104	; 0x68
 800688e:	e7e9      	b.n	8006864 <_fwalk_sglue+0x10>

08006890 <siprintf>:
 8006890:	b40e      	push	{r1, r2, r3}
 8006892:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006896:	b500      	push	{lr}
 8006898:	b09c      	sub	sp, #112	; 0x70
 800689a:	ab1d      	add	r3, sp, #116	; 0x74
 800689c:	9002      	str	r0, [sp, #8]
 800689e:	9006      	str	r0, [sp, #24]
 80068a0:	9107      	str	r1, [sp, #28]
 80068a2:	9104      	str	r1, [sp, #16]
 80068a4:	4808      	ldr	r0, [pc, #32]	; (80068c8 <siprintf+0x38>)
 80068a6:	4909      	ldr	r1, [pc, #36]	; (80068cc <siprintf+0x3c>)
 80068a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80068ac:	9105      	str	r1, [sp, #20]
 80068ae:	6800      	ldr	r0, [r0, #0]
 80068b0:	a902      	add	r1, sp, #8
 80068b2:	9301      	str	r3, [sp, #4]
 80068b4:	f001 fc26 	bl	8008104 <_svfiprintf_r>
 80068b8:	2200      	movs	r2, #0
 80068ba:	9b02      	ldr	r3, [sp, #8]
 80068bc:	701a      	strb	r2, [r3, #0]
 80068be:	b01c      	add	sp, #112	; 0x70
 80068c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80068c4:	b003      	add	sp, #12
 80068c6:	4770      	bx	lr
 80068c8:	20000084 	.word	0x20000084
 80068cc:	ffff0208 	.word	0xffff0208

080068d0 <__sread>:
 80068d0:	b510      	push	{r4, lr}
 80068d2:	460c      	mov	r4, r1
 80068d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068d8:	f000 f86c 	bl	80069b4 <_read_r>
 80068dc:	2800      	cmp	r0, #0
 80068de:	bfab      	itete	ge
 80068e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80068e2:	89a3      	ldrhlt	r3, [r4, #12]
 80068e4:	181b      	addge	r3, r3, r0
 80068e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80068ea:	bfac      	ite	ge
 80068ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80068ee:	81a3      	strhlt	r3, [r4, #12]
 80068f0:	bd10      	pop	{r4, pc}

080068f2 <__swrite>:
 80068f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80068f6:	461f      	mov	r7, r3
 80068f8:	898b      	ldrh	r3, [r1, #12]
 80068fa:	4605      	mov	r5, r0
 80068fc:	05db      	lsls	r3, r3, #23
 80068fe:	460c      	mov	r4, r1
 8006900:	4616      	mov	r6, r2
 8006902:	d505      	bpl.n	8006910 <__swrite+0x1e>
 8006904:	2302      	movs	r3, #2
 8006906:	2200      	movs	r2, #0
 8006908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800690c:	f000 f840 	bl	8006990 <_lseek_r>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	4632      	mov	r2, r6
 8006914:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006918:	81a3      	strh	r3, [r4, #12]
 800691a:	4628      	mov	r0, r5
 800691c:	463b      	mov	r3, r7
 800691e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006922:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006926:	f000 b857 	b.w	80069d8 <_write_r>

0800692a <__sseek>:
 800692a:	b510      	push	{r4, lr}
 800692c:	460c      	mov	r4, r1
 800692e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006932:	f000 f82d 	bl	8006990 <_lseek_r>
 8006936:	1c43      	adds	r3, r0, #1
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	bf15      	itete	ne
 800693c:	6560      	strne	r0, [r4, #84]	; 0x54
 800693e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006942:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006946:	81a3      	strheq	r3, [r4, #12]
 8006948:	bf18      	it	ne
 800694a:	81a3      	strhne	r3, [r4, #12]
 800694c:	bd10      	pop	{r4, pc}

0800694e <__sclose>:
 800694e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006952:	f000 b80d 	b.w	8006970 <_close_r>

08006956 <memset>:
 8006956:	4603      	mov	r3, r0
 8006958:	4402      	add	r2, r0
 800695a:	4293      	cmp	r3, r2
 800695c:	d100      	bne.n	8006960 <memset+0xa>
 800695e:	4770      	bx	lr
 8006960:	f803 1b01 	strb.w	r1, [r3], #1
 8006964:	e7f9      	b.n	800695a <memset+0x4>
	...

08006968 <_localeconv_r>:
 8006968:	4800      	ldr	r0, [pc, #0]	; (800696c <_localeconv_r+0x4>)
 800696a:	4770      	bx	lr
 800696c:	20000178 	.word	0x20000178

08006970 <_close_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	2300      	movs	r3, #0
 8006974:	4d05      	ldr	r5, [pc, #20]	; (800698c <_close_r+0x1c>)
 8006976:	4604      	mov	r4, r0
 8006978:	4608      	mov	r0, r1
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	f7fb fd0e 	bl	800239c <_close>
 8006980:	1c43      	adds	r3, r0, #1
 8006982:	d102      	bne.n	800698a <_close_r+0x1a>
 8006984:	682b      	ldr	r3, [r5, #0]
 8006986:	b103      	cbz	r3, 800698a <_close_r+0x1a>
 8006988:	6023      	str	r3, [r4, #0]
 800698a:	bd38      	pop	{r3, r4, r5, pc}
 800698c:	20000878 	.word	0x20000878

08006990 <_lseek_r>:
 8006990:	b538      	push	{r3, r4, r5, lr}
 8006992:	4604      	mov	r4, r0
 8006994:	4608      	mov	r0, r1
 8006996:	4611      	mov	r1, r2
 8006998:	2200      	movs	r2, #0
 800699a:	4d05      	ldr	r5, [pc, #20]	; (80069b0 <_lseek_r+0x20>)
 800699c:	602a      	str	r2, [r5, #0]
 800699e:	461a      	mov	r2, r3
 80069a0:	f7fb fd20 	bl	80023e4 <_lseek>
 80069a4:	1c43      	adds	r3, r0, #1
 80069a6:	d102      	bne.n	80069ae <_lseek_r+0x1e>
 80069a8:	682b      	ldr	r3, [r5, #0]
 80069aa:	b103      	cbz	r3, 80069ae <_lseek_r+0x1e>
 80069ac:	6023      	str	r3, [r4, #0]
 80069ae:	bd38      	pop	{r3, r4, r5, pc}
 80069b0:	20000878 	.word	0x20000878

080069b4 <_read_r>:
 80069b4:	b538      	push	{r3, r4, r5, lr}
 80069b6:	4604      	mov	r4, r0
 80069b8:	4608      	mov	r0, r1
 80069ba:	4611      	mov	r1, r2
 80069bc:	2200      	movs	r2, #0
 80069be:	4d05      	ldr	r5, [pc, #20]	; (80069d4 <_read_r+0x20>)
 80069c0:	602a      	str	r2, [r5, #0]
 80069c2:	461a      	mov	r2, r3
 80069c4:	f7fb fcb1 	bl	800232a <_read>
 80069c8:	1c43      	adds	r3, r0, #1
 80069ca:	d102      	bne.n	80069d2 <_read_r+0x1e>
 80069cc:	682b      	ldr	r3, [r5, #0]
 80069ce:	b103      	cbz	r3, 80069d2 <_read_r+0x1e>
 80069d0:	6023      	str	r3, [r4, #0]
 80069d2:	bd38      	pop	{r3, r4, r5, pc}
 80069d4:	20000878 	.word	0x20000878

080069d8 <_write_r>:
 80069d8:	b538      	push	{r3, r4, r5, lr}
 80069da:	4604      	mov	r4, r0
 80069dc:	4608      	mov	r0, r1
 80069de:	4611      	mov	r1, r2
 80069e0:	2200      	movs	r2, #0
 80069e2:	4d05      	ldr	r5, [pc, #20]	; (80069f8 <_write_r+0x20>)
 80069e4:	602a      	str	r2, [r5, #0]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f7fb fcbc 	bl	8002364 <_write>
 80069ec:	1c43      	adds	r3, r0, #1
 80069ee:	d102      	bne.n	80069f6 <_write_r+0x1e>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	b103      	cbz	r3, 80069f6 <_write_r+0x1e>
 80069f4:	6023      	str	r3, [r4, #0]
 80069f6:	bd38      	pop	{r3, r4, r5, pc}
 80069f8:	20000878 	.word	0x20000878

080069fc <__errno>:
 80069fc:	4b01      	ldr	r3, [pc, #4]	; (8006a04 <__errno+0x8>)
 80069fe:	6818      	ldr	r0, [r3, #0]
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	20000084 	.word	0x20000084

08006a08 <__libc_init_array>:
 8006a08:	b570      	push	{r4, r5, r6, lr}
 8006a0a:	2600      	movs	r6, #0
 8006a0c:	4d0c      	ldr	r5, [pc, #48]	; (8006a40 <__libc_init_array+0x38>)
 8006a0e:	4c0d      	ldr	r4, [pc, #52]	; (8006a44 <__libc_init_array+0x3c>)
 8006a10:	1b64      	subs	r4, r4, r5
 8006a12:	10a4      	asrs	r4, r4, #2
 8006a14:	42a6      	cmp	r6, r4
 8006a16:	d109      	bne.n	8006a2c <__libc_init_array+0x24>
 8006a18:	f002 f886 	bl	8008b28 <_init>
 8006a1c:	2600      	movs	r6, #0
 8006a1e:	4d0a      	ldr	r5, [pc, #40]	; (8006a48 <__libc_init_array+0x40>)
 8006a20:	4c0a      	ldr	r4, [pc, #40]	; (8006a4c <__libc_init_array+0x44>)
 8006a22:	1b64      	subs	r4, r4, r5
 8006a24:	10a4      	asrs	r4, r4, #2
 8006a26:	42a6      	cmp	r6, r4
 8006a28:	d105      	bne.n	8006a36 <__libc_init_array+0x2e>
 8006a2a:	bd70      	pop	{r4, r5, r6, pc}
 8006a2c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a30:	4798      	blx	r3
 8006a32:	3601      	adds	r6, #1
 8006a34:	e7ee      	b.n	8006a14 <__libc_init_array+0xc>
 8006a36:	f855 3b04 	ldr.w	r3, [r5], #4
 8006a3a:	4798      	blx	r3
 8006a3c:	3601      	adds	r6, #1
 8006a3e:	e7f2      	b.n	8006a26 <__libc_init_array+0x1e>
 8006a40:	0800ac9c 	.word	0x0800ac9c
 8006a44:	0800ac9c 	.word	0x0800ac9c
 8006a48:	0800ac9c 	.word	0x0800ac9c
 8006a4c:	0800aca0 	.word	0x0800aca0

08006a50 <__retarget_lock_init_recursive>:
 8006a50:	4770      	bx	lr

08006a52 <__retarget_lock_acquire_recursive>:
 8006a52:	4770      	bx	lr

08006a54 <__retarget_lock_release_recursive>:
 8006a54:	4770      	bx	lr

08006a56 <memchr>:
 8006a56:	4603      	mov	r3, r0
 8006a58:	b510      	push	{r4, lr}
 8006a5a:	b2c9      	uxtb	r1, r1
 8006a5c:	4402      	add	r2, r0
 8006a5e:	4293      	cmp	r3, r2
 8006a60:	4618      	mov	r0, r3
 8006a62:	d101      	bne.n	8006a68 <memchr+0x12>
 8006a64:	2000      	movs	r0, #0
 8006a66:	e003      	b.n	8006a70 <memchr+0x1a>
 8006a68:	7804      	ldrb	r4, [r0, #0]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	428c      	cmp	r4, r1
 8006a6e:	d1f6      	bne.n	8006a5e <memchr+0x8>
 8006a70:	bd10      	pop	{r4, pc}

08006a72 <memcpy>:
 8006a72:	440a      	add	r2, r1
 8006a74:	4291      	cmp	r1, r2
 8006a76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006a7a:	d100      	bne.n	8006a7e <memcpy+0xc>
 8006a7c:	4770      	bx	lr
 8006a7e:	b510      	push	{r4, lr}
 8006a80:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a84:	4291      	cmp	r1, r2
 8006a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a8a:	d1f9      	bne.n	8006a80 <memcpy+0xe>
 8006a8c:	bd10      	pop	{r4, pc}

08006a8e <quorem>:
 8006a8e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a92:	6903      	ldr	r3, [r0, #16]
 8006a94:	690c      	ldr	r4, [r1, #16]
 8006a96:	4607      	mov	r7, r0
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	db7f      	blt.n	8006b9c <quorem+0x10e>
 8006a9c:	3c01      	subs	r4, #1
 8006a9e:	f100 0514 	add.w	r5, r0, #20
 8006aa2:	f101 0814 	add.w	r8, r1, #20
 8006aa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006aaa:	9301      	str	r3, [sp, #4]
 8006aac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006ab0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	429a      	cmp	r2, r3
 8006ab8:	fbb2 f6f3 	udiv	r6, r2, r3
 8006abc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006ac0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006ac4:	d331      	bcc.n	8006b2a <quorem+0x9c>
 8006ac6:	f04f 0e00 	mov.w	lr, #0
 8006aca:	4640      	mov	r0, r8
 8006acc:	46ac      	mov	ip, r5
 8006ace:	46f2      	mov	sl, lr
 8006ad0:	f850 2b04 	ldr.w	r2, [r0], #4
 8006ad4:	b293      	uxth	r3, r2
 8006ad6:	fb06 e303 	mla	r3, r6, r3, lr
 8006ada:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006ade:	0c1a      	lsrs	r2, r3, #16
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	fb06 220e 	mla	r2, r6, lr, r2
 8006ae6:	ebaa 0303 	sub.w	r3, sl, r3
 8006aea:	f8dc a000 	ldr.w	sl, [ip]
 8006aee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006af2:	fa1f fa8a 	uxth.w	sl, sl
 8006af6:	4453      	add	r3, sl
 8006af8:	f8dc a000 	ldr.w	sl, [ip]
 8006afc:	b292      	uxth	r2, r2
 8006afe:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006b02:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b06:	b29b      	uxth	r3, r3
 8006b08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b0c:	4581      	cmp	r9, r0
 8006b0e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006b12:	f84c 3b04 	str.w	r3, [ip], #4
 8006b16:	d2db      	bcs.n	8006ad0 <quorem+0x42>
 8006b18:	f855 300b 	ldr.w	r3, [r5, fp]
 8006b1c:	b92b      	cbnz	r3, 8006b2a <quorem+0x9c>
 8006b1e:	9b01      	ldr	r3, [sp, #4]
 8006b20:	3b04      	subs	r3, #4
 8006b22:	429d      	cmp	r5, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	d32d      	bcc.n	8006b84 <quorem+0xf6>
 8006b28:	613c      	str	r4, [r7, #16]
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	f001 f992 	bl	8007e54 <__mcmp>
 8006b30:	2800      	cmp	r0, #0
 8006b32:	db23      	blt.n	8006b7c <quorem+0xee>
 8006b34:	4629      	mov	r1, r5
 8006b36:	2000      	movs	r0, #0
 8006b38:	3601      	adds	r6, #1
 8006b3a:	f858 2b04 	ldr.w	r2, [r8], #4
 8006b3e:	f8d1 c000 	ldr.w	ip, [r1]
 8006b42:	b293      	uxth	r3, r2
 8006b44:	1ac3      	subs	r3, r0, r3
 8006b46:	0c12      	lsrs	r2, r2, #16
 8006b48:	fa1f f08c 	uxth.w	r0, ip
 8006b4c:	4403      	add	r3, r0
 8006b4e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8006b52:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006b56:	b29b      	uxth	r3, r3
 8006b58:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006b5c:	45c1      	cmp	r9, r8
 8006b5e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006b62:	f841 3b04 	str.w	r3, [r1], #4
 8006b66:	d2e8      	bcs.n	8006b3a <quorem+0xac>
 8006b68:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006b6c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006b70:	b922      	cbnz	r2, 8006b7c <quorem+0xee>
 8006b72:	3b04      	subs	r3, #4
 8006b74:	429d      	cmp	r5, r3
 8006b76:	461a      	mov	r2, r3
 8006b78:	d30a      	bcc.n	8006b90 <quorem+0x102>
 8006b7a:	613c      	str	r4, [r7, #16]
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	b003      	add	sp, #12
 8006b80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b84:	6812      	ldr	r2, [r2, #0]
 8006b86:	3b04      	subs	r3, #4
 8006b88:	2a00      	cmp	r2, #0
 8006b8a:	d1cd      	bne.n	8006b28 <quorem+0x9a>
 8006b8c:	3c01      	subs	r4, #1
 8006b8e:	e7c8      	b.n	8006b22 <quorem+0x94>
 8006b90:	6812      	ldr	r2, [r2, #0]
 8006b92:	3b04      	subs	r3, #4
 8006b94:	2a00      	cmp	r2, #0
 8006b96:	d1f0      	bne.n	8006b7a <quorem+0xec>
 8006b98:	3c01      	subs	r4, #1
 8006b9a:	e7eb      	b.n	8006b74 <quorem+0xe6>
 8006b9c:	2000      	movs	r0, #0
 8006b9e:	e7ee      	b.n	8006b7e <quorem+0xf0>

08006ba0 <_dtoa_r>:
 8006ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	461f      	mov	r7, r3
 8006ba8:	69c4      	ldr	r4, [r0, #28]
 8006baa:	b099      	sub	sp, #100	; 0x64
 8006bac:	4605      	mov	r5, r0
 8006bae:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8006bb2:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8006bb6:	b974      	cbnz	r4, 8006bd6 <_dtoa_r+0x36>
 8006bb8:	2010      	movs	r0, #16
 8006bba:	f000 fe1d 	bl	80077f8 <malloc>
 8006bbe:	4602      	mov	r2, r0
 8006bc0:	61e8      	str	r0, [r5, #28]
 8006bc2:	b920      	cbnz	r0, 8006bce <_dtoa_r+0x2e>
 8006bc4:	21ef      	movs	r1, #239	; 0xef
 8006bc6:	4bac      	ldr	r3, [pc, #688]	; (8006e78 <_dtoa_r+0x2d8>)
 8006bc8:	48ac      	ldr	r0, [pc, #688]	; (8006e7c <_dtoa_r+0x2dc>)
 8006bca:	f001 fc6d 	bl	80084a8 <__assert_func>
 8006bce:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006bd2:	6004      	str	r4, [r0, #0]
 8006bd4:	60c4      	str	r4, [r0, #12]
 8006bd6:	69eb      	ldr	r3, [r5, #28]
 8006bd8:	6819      	ldr	r1, [r3, #0]
 8006bda:	b151      	cbz	r1, 8006bf2 <_dtoa_r+0x52>
 8006bdc:	685a      	ldr	r2, [r3, #4]
 8006bde:	2301      	movs	r3, #1
 8006be0:	4093      	lsls	r3, r2
 8006be2:	604a      	str	r2, [r1, #4]
 8006be4:	608b      	str	r3, [r1, #8]
 8006be6:	4628      	mov	r0, r5
 8006be8:	f000 fefa 	bl	80079e0 <_Bfree>
 8006bec:	2200      	movs	r2, #0
 8006bee:	69eb      	ldr	r3, [r5, #28]
 8006bf0:	601a      	str	r2, [r3, #0]
 8006bf2:	1e3b      	subs	r3, r7, #0
 8006bf4:	bfaf      	iteee	ge
 8006bf6:	2300      	movge	r3, #0
 8006bf8:	2201      	movlt	r2, #1
 8006bfa:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006bfe:	9305      	strlt	r3, [sp, #20]
 8006c00:	bfa8      	it	ge
 8006c02:	f8c8 3000 	strge.w	r3, [r8]
 8006c06:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8006c0a:	4b9d      	ldr	r3, [pc, #628]	; (8006e80 <_dtoa_r+0x2e0>)
 8006c0c:	bfb8      	it	lt
 8006c0e:	f8c8 2000 	strlt.w	r2, [r8]
 8006c12:	ea33 0309 	bics.w	r3, r3, r9
 8006c16:	d119      	bne.n	8006c4c <_dtoa_r+0xac>
 8006c18:	f242 730f 	movw	r3, #9999	; 0x270f
 8006c1c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c1e:	6013      	str	r3, [r2, #0]
 8006c20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006c24:	4333      	orrs	r3, r6
 8006c26:	f000 8589 	beq.w	800773c <_dtoa_r+0xb9c>
 8006c2a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c2c:	b953      	cbnz	r3, 8006c44 <_dtoa_r+0xa4>
 8006c2e:	4b95      	ldr	r3, [pc, #596]	; (8006e84 <_dtoa_r+0x2e4>)
 8006c30:	e023      	b.n	8006c7a <_dtoa_r+0xda>
 8006c32:	4b95      	ldr	r3, [pc, #596]	; (8006e88 <_dtoa_r+0x2e8>)
 8006c34:	9303      	str	r3, [sp, #12]
 8006c36:	3308      	adds	r3, #8
 8006c38:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	9803      	ldr	r0, [sp, #12]
 8006c3e:	b019      	add	sp, #100	; 0x64
 8006c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c44:	4b8f      	ldr	r3, [pc, #572]	; (8006e84 <_dtoa_r+0x2e4>)
 8006c46:	9303      	str	r3, [sp, #12]
 8006c48:	3303      	adds	r3, #3
 8006c4a:	e7f5      	b.n	8006c38 <_dtoa_r+0x98>
 8006c4c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006c50:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8006c54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	f7f9 fea4 	bl	80009a8 <__aeabi_dcmpeq>
 8006c60:	4680      	mov	r8, r0
 8006c62:	b160      	cbz	r0, 8006c7e <_dtoa_r+0xde>
 8006c64:	2301      	movs	r3, #1
 8006c66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8006c68:	6013      	str	r3, [r2, #0]
 8006c6a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	f000 8562 	beq.w	8007736 <_dtoa_r+0xb96>
 8006c72:	4b86      	ldr	r3, [pc, #536]	; (8006e8c <_dtoa_r+0x2ec>)
 8006c74:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8006c76:	6013      	str	r3, [r2, #0]
 8006c78:	3b01      	subs	r3, #1
 8006c7a:	9303      	str	r3, [sp, #12]
 8006c7c:	e7de      	b.n	8006c3c <_dtoa_r+0x9c>
 8006c7e:	ab16      	add	r3, sp, #88	; 0x58
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	ab17      	add	r3, sp, #92	; 0x5c
 8006c84:	9300      	str	r3, [sp, #0]
 8006c86:	4628      	mov	r0, r5
 8006c88:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8006c8c:	f001 f98a 	bl	8007fa4 <__d2b>
 8006c90:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8006c94:	4682      	mov	sl, r0
 8006c96:	2c00      	cmp	r4, #0
 8006c98:	d07e      	beq.n	8006d98 <_dtoa_r+0x1f8>
 8006c9a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006c9e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006ca0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8006ca4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ca8:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8006cac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006cb0:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8006cb4:	4619      	mov	r1, r3
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	4b75      	ldr	r3, [pc, #468]	; (8006e90 <_dtoa_r+0x2f0>)
 8006cba:	f7f9 fa55 	bl	8000168 <__aeabi_dsub>
 8006cbe:	a368      	add	r3, pc, #416	; (adr r3, 8006e60 <_dtoa_r+0x2c0>)
 8006cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc4:	f7f9 fc08 	bl	80004d8 <__aeabi_dmul>
 8006cc8:	a367      	add	r3, pc, #412	; (adr r3, 8006e68 <_dtoa_r+0x2c8>)
 8006cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cce:	f7f9 fa4d 	bl	800016c <__adddf3>
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	460f      	mov	r7, r1
 8006cd8:	f7f9 fb94 	bl	8000404 <__aeabi_i2d>
 8006cdc:	a364      	add	r3, pc, #400	; (adr r3, 8006e70 <_dtoa_r+0x2d0>)
 8006cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ce2:	f7f9 fbf9 	bl	80004d8 <__aeabi_dmul>
 8006ce6:	4602      	mov	r2, r0
 8006ce8:	460b      	mov	r3, r1
 8006cea:	4630      	mov	r0, r6
 8006cec:	4639      	mov	r1, r7
 8006cee:	f7f9 fa3d 	bl	800016c <__adddf3>
 8006cf2:	4606      	mov	r6, r0
 8006cf4:	460f      	mov	r7, r1
 8006cf6:	f7f9 fe9f 	bl	8000a38 <__aeabi_d2iz>
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4683      	mov	fp, r0
 8006cfe:	2300      	movs	r3, #0
 8006d00:	4630      	mov	r0, r6
 8006d02:	4639      	mov	r1, r7
 8006d04:	f7f9 fe5a 	bl	80009bc <__aeabi_dcmplt>
 8006d08:	b148      	cbz	r0, 8006d1e <_dtoa_r+0x17e>
 8006d0a:	4658      	mov	r0, fp
 8006d0c:	f7f9 fb7a 	bl	8000404 <__aeabi_i2d>
 8006d10:	4632      	mov	r2, r6
 8006d12:	463b      	mov	r3, r7
 8006d14:	f7f9 fe48 	bl	80009a8 <__aeabi_dcmpeq>
 8006d18:	b908      	cbnz	r0, 8006d1e <_dtoa_r+0x17e>
 8006d1a:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006d1e:	f1bb 0f16 	cmp.w	fp, #22
 8006d22:	d857      	bhi.n	8006dd4 <_dtoa_r+0x234>
 8006d24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006d28:	4b5a      	ldr	r3, [pc, #360]	; (8006e94 <_dtoa_r+0x2f4>)
 8006d2a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8006d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d32:	f7f9 fe43 	bl	80009bc <__aeabi_dcmplt>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	d04e      	beq.n	8006dd8 <_dtoa_r+0x238>
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 8006d40:	930f      	str	r3, [sp, #60]	; 0x3c
 8006d42:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8006d44:	1b1b      	subs	r3, r3, r4
 8006d46:	1e5a      	subs	r2, r3, #1
 8006d48:	bf46      	itte	mi
 8006d4a:	f1c3 0901 	rsbmi	r9, r3, #1
 8006d4e:	2300      	movmi	r3, #0
 8006d50:	f04f 0900 	movpl.w	r9, #0
 8006d54:	9209      	str	r2, [sp, #36]	; 0x24
 8006d56:	bf48      	it	mi
 8006d58:	9309      	strmi	r3, [sp, #36]	; 0x24
 8006d5a:	f1bb 0f00 	cmp.w	fp, #0
 8006d5e:	db3d      	blt.n	8006ddc <_dtoa_r+0x23c>
 8006d60:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d62:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8006d66:	445b      	add	r3, fp
 8006d68:	9309      	str	r3, [sp, #36]	; 0x24
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	930a      	str	r3, [sp, #40]	; 0x28
 8006d6e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d70:	2b09      	cmp	r3, #9
 8006d72:	d867      	bhi.n	8006e44 <_dtoa_r+0x2a4>
 8006d74:	2b05      	cmp	r3, #5
 8006d76:	bfc4      	itt	gt
 8006d78:	3b04      	subgt	r3, #4
 8006d7a:	9322      	strgt	r3, [sp, #136]	; 0x88
 8006d7c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006d7e:	bfc8      	it	gt
 8006d80:	2400      	movgt	r4, #0
 8006d82:	f1a3 0302 	sub.w	r3, r3, #2
 8006d86:	bfd8      	it	le
 8006d88:	2401      	movle	r4, #1
 8006d8a:	2b03      	cmp	r3, #3
 8006d8c:	f200 8086 	bhi.w	8006e9c <_dtoa_r+0x2fc>
 8006d90:	e8df f003 	tbb	[pc, r3]
 8006d94:	5637392c 	.word	0x5637392c
 8006d98:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8006d9c:	441c      	add	r4, r3
 8006d9e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8006da2:	2b20      	cmp	r3, #32
 8006da4:	bfc1      	itttt	gt
 8006da6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006daa:	fa09 f903 	lslgt.w	r9, r9, r3
 8006dae:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8006db2:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006db6:	bfd6      	itet	le
 8006db8:	f1c3 0320 	rsble	r3, r3, #32
 8006dbc:	ea49 0003 	orrgt.w	r0, r9, r3
 8006dc0:	fa06 f003 	lslle.w	r0, r6, r3
 8006dc4:	f7f9 fb0e 	bl	80003e4 <__aeabi_ui2d>
 8006dc8:	2201      	movs	r2, #1
 8006dca:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006dce:	3c01      	subs	r4, #1
 8006dd0:	9213      	str	r2, [sp, #76]	; 0x4c
 8006dd2:	e76f      	b.n	8006cb4 <_dtoa_r+0x114>
 8006dd4:	2301      	movs	r3, #1
 8006dd6:	e7b3      	b.n	8006d40 <_dtoa_r+0x1a0>
 8006dd8:	900f      	str	r0, [sp, #60]	; 0x3c
 8006dda:	e7b2      	b.n	8006d42 <_dtoa_r+0x1a2>
 8006ddc:	f1cb 0300 	rsb	r3, fp, #0
 8006de0:	930a      	str	r3, [sp, #40]	; 0x28
 8006de2:	2300      	movs	r3, #0
 8006de4:	eba9 090b 	sub.w	r9, r9, fp
 8006de8:	930e      	str	r3, [sp, #56]	; 0x38
 8006dea:	e7c0      	b.n	8006d6e <_dtoa_r+0x1ce>
 8006dec:	2300      	movs	r3, #0
 8006dee:	930b      	str	r3, [sp, #44]	; 0x2c
 8006df0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	dc55      	bgt.n	8006ea2 <_dtoa_r+0x302>
 8006df6:	2301      	movs	r3, #1
 8006df8:	461a      	mov	r2, r3
 8006dfa:	9306      	str	r3, [sp, #24]
 8006dfc:	9308      	str	r3, [sp, #32]
 8006dfe:	9223      	str	r2, [sp, #140]	; 0x8c
 8006e00:	e00b      	b.n	8006e1a <_dtoa_r+0x27a>
 8006e02:	2301      	movs	r3, #1
 8006e04:	e7f3      	b.n	8006dee <_dtoa_r+0x24e>
 8006e06:	2300      	movs	r3, #0
 8006e08:	930b      	str	r3, [sp, #44]	; 0x2c
 8006e0a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006e0c:	445b      	add	r3, fp
 8006e0e:	9306      	str	r3, [sp, #24]
 8006e10:	3301      	adds	r3, #1
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	9308      	str	r3, [sp, #32]
 8006e16:	bfb8      	it	lt
 8006e18:	2301      	movlt	r3, #1
 8006e1a:	2100      	movs	r1, #0
 8006e1c:	2204      	movs	r2, #4
 8006e1e:	69e8      	ldr	r0, [r5, #28]
 8006e20:	f102 0614 	add.w	r6, r2, #20
 8006e24:	429e      	cmp	r6, r3
 8006e26:	d940      	bls.n	8006eaa <_dtoa_r+0x30a>
 8006e28:	6041      	str	r1, [r0, #4]
 8006e2a:	4628      	mov	r0, r5
 8006e2c:	f000 fd98 	bl	8007960 <_Balloc>
 8006e30:	9003      	str	r0, [sp, #12]
 8006e32:	2800      	cmp	r0, #0
 8006e34:	d13c      	bne.n	8006eb0 <_dtoa_r+0x310>
 8006e36:	4602      	mov	r2, r0
 8006e38:	f240 11af 	movw	r1, #431	; 0x1af
 8006e3c:	4b16      	ldr	r3, [pc, #88]	; (8006e98 <_dtoa_r+0x2f8>)
 8006e3e:	e6c3      	b.n	8006bc8 <_dtoa_r+0x28>
 8006e40:	2301      	movs	r3, #1
 8006e42:	e7e1      	b.n	8006e08 <_dtoa_r+0x268>
 8006e44:	2401      	movs	r4, #1
 8006e46:	2300      	movs	r3, #0
 8006e48:	940b      	str	r4, [sp, #44]	; 0x2c
 8006e4a:	9322      	str	r3, [sp, #136]	; 0x88
 8006e4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006e50:	2200      	movs	r2, #0
 8006e52:	9306      	str	r3, [sp, #24]
 8006e54:	9308      	str	r3, [sp, #32]
 8006e56:	2312      	movs	r3, #18
 8006e58:	e7d1      	b.n	8006dfe <_dtoa_r+0x25e>
 8006e5a:	bf00      	nop
 8006e5c:	f3af 8000 	nop.w
 8006e60:	636f4361 	.word	0x636f4361
 8006e64:	3fd287a7 	.word	0x3fd287a7
 8006e68:	8b60c8b3 	.word	0x8b60c8b3
 8006e6c:	3fc68a28 	.word	0x3fc68a28
 8006e70:	509f79fb 	.word	0x509f79fb
 8006e74:	3fd34413 	.word	0x3fd34413
 8006e78:	0800a96b 	.word	0x0800a96b
 8006e7c:	0800a982 	.word	0x0800a982
 8006e80:	7ff00000 	.word	0x7ff00000
 8006e84:	0800a967 	.word	0x0800a967
 8006e88:	0800a95e 	.word	0x0800a95e
 8006e8c:	0800a93b 	.word	0x0800a93b
 8006e90:	3ff80000 	.word	0x3ff80000
 8006e94:	0800aa70 	.word	0x0800aa70
 8006e98:	0800a9da 	.word	0x0800a9da
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006ea0:	e7d4      	b.n	8006e4c <_dtoa_r+0x2ac>
 8006ea2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8006ea4:	9306      	str	r3, [sp, #24]
 8006ea6:	9308      	str	r3, [sp, #32]
 8006ea8:	e7b7      	b.n	8006e1a <_dtoa_r+0x27a>
 8006eaa:	3101      	adds	r1, #1
 8006eac:	0052      	lsls	r2, r2, #1
 8006eae:	e7b7      	b.n	8006e20 <_dtoa_r+0x280>
 8006eb0:	69eb      	ldr	r3, [r5, #28]
 8006eb2:	9a03      	ldr	r2, [sp, #12]
 8006eb4:	601a      	str	r2, [r3, #0]
 8006eb6:	9b08      	ldr	r3, [sp, #32]
 8006eb8:	2b0e      	cmp	r3, #14
 8006eba:	f200 80a8 	bhi.w	800700e <_dtoa_r+0x46e>
 8006ebe:	2c00      	cmp	r4, #0
 8006ec0:	f000 80a5 	beq.w	800700e <_dtoa_r+0x46e>
 8006ec4:	f1bb 0f00 	cmp.w	fp, #0
 8006ec8:	dd34      	ble.n	8006f34 <_dtoa_r+0x394>
 8006eca:	4b9a      	ldr	r3, [pc, #616]	; (8007134 <_dtoa_r+0x594>)
 8006ecc:	f00b 020f 	and.w	r2, fp, #15
 8006ed0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006ed4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006ed8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006edc:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006ee0:	ea4f 142b 	mov.w	r4, fp, asr #4
 8006ee4:	d016      	beq.n	8006f14 <_dtoa_r+0x374>
 8006ee6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006eea:	4b93      	ldr	r3, [pc, #588]	; (8007138 <_dtoa_r+0x598>)
 8006eec:	2703      	movs	r7, #3
 8006eee:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006ef2:	f7f9 fc1b 	bl	800072c <__aeabi_ddiv>
 8006ef6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006efa:	f004 040f 	and.w	r4, r4, #15
 8006efe:	4e8e      	ldr	r6, [pc, #568]	; (8007138 <_dtoa_r+0x598>)
 8006f00:	b954      	cbnz	r4, 8006f18 <_dtoa_r+0x378>
 8006f02:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006f06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006f0a:	f7f9 fc0f 	bl	800072c <__aeabi_ddiv>
 8006f0e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f12:	e029      	b.n	8006f68 <_dtoa_r+0x3c8>
 8006f14:	2702      	movs	r7, #2
 8006f16:	e7f2      	b.n	8006efe <_dtoa_r+0x35e>
 8006f18:	07e1      	lsls	r1, r4, #31
 8006f1a:	d508      	bpl.n	8006f2e <_dtoa_r+0x38e>
 8006f1c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f20:	e9d6 2300 	ldrd	r2, r3, [r6]
 8006f24:	f7f9 fad8 	bl	80004d8 <__aeabi_dmul>
 8006f28:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006f2c:	3701      	adds	r7, #1
 8006f2e:	1064      	asrs	r4, r4, #1
 8006f30:	3608      	adds	r6, #8
 8006f32:	e7e5      	b.n	8006f00 <_dtoa_r+0x360>
 8006f34:	f000 80a5 	beq.w	8007082 <_dtoa_r+0x4e2>
 8006f38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006f3c:	f1cb 0400 	rsb	r4, fp, #0
 8006f40:	4b7c      	ldr	r3, [pc, #496]	; (8007134 <_dtoa_r+0x594>)
 8006f42:	f004 020f 	and.w	r2, r4, #15
 8006f46:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f4e:	f7f9 fac3 	bl	80004d8 <__aeabi_dmul>
 8006f52:	2702      	movs	r7, #2
 8006f54:	2300      	movs	r3, #0
 8006f56:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006f5a:	4e77      	ldr	r6, [pc, #476]	; (8007138 <_dtoa_r+0x598>)
 8006f5c:	1124      	asrs	r4, r4, #4
 8006f5e:	2c00      	cmp	r4, #0
 8006f60:	f040 8084 	bne.w	800706c <_dtoa_r+0x4cc>
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d1d2      	bne.n	8006f0e <_dtoa_r+0x36e>
 8006f68:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8006f6c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8006f70:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	f000 8087 	beq.w	8007086 <_dtoa_r+0x4e6>
 8006f78:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	4b6f      	ldr	r3, [pc, #444]	; (800713c <_dtoa_r+0x59c>)
 8006f80:	f7f9 fd1c 	bl	80009bc <__aeabi_dcmplt>
 8006f84:	2800      	cmp	r0, #0
 8006f86:	d07e      	beq.n	8007086 <_dtoa_r+0x4e6>
 8006f88:	9b08      	ldr	r3, [sp, #32]
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d07b      	beq.n	8007086 <_dtoa_r+0x4e6>
 8006f8e:	9b06      	ldr	r3, [sp, #24]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	dd38      	ble.n	8007006 <_dtoa_r+0x466>
 8006f94:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006f98:	2200      	movs	r2, #0
 8006f9a:	4b69      	ldr	r3, [pc, #420]	; (8007140 <_dtoa_r+0x5a0>)
 8006f9c:	f7f9 fa9c 	bl	80004d8 <__aeabi_dmul>
 8006fa0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006fa4:	9c06      	ldr	r4, [sp, #24]
 8006fa6:	f10b 38ff 	add.w	r8, fp, #4294967295	; 0xffffffff
 8006faa:	3701      	adds	r7, #1
 8006fac:	4638      	mov	r0, r7
 8006fae:	f7f9 fa29 	bl	8000404 <__aeabi_i2d>
 8006fb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006fb6:	f7f9 fa8f 	bl	80004d8 <__aeabi_dmul>
 8006fba:	2200      	movs	r2, #0
 8006fbc:	4b61      	ldr	r3, [pc, #388]	; (8007144 <_dtoa_r+0x5a4>)
 8006fbe:	f7f9 f8d5 	bl	800016c <__adddf3>
 8006fc2:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8006fc6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006fca:	9611      	str	r6, [sp, #68]	; 0x44
 8006fcc:	2c00      	cmp	r4, #0
 8006fce:	d15d      	bne.n	800708c <_dtoa_r+0x4ec>
 8006fd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006fd4:	2200      	movs	r2, #0
 8006fd6:	4b5c      	ldr	r3, [pc, #368]	; (8007148 <_dtoa_r+0x5a8>)
 8006fd8:	f7f9 f8c6 	bl	8000168 <__aeabi_dsub>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	460b      	mov	r3, r1
 8006fe0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006fe4:	4633      	mov	r3, r6
 8006fe6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006fe8:	f7f9 fd06 	bl	80009f8 <__aeabi_dcmpgt>
 8006fec:	2800      	cmp	r0, #0
 8006fee:	f040 8295 	bne.w	800751c <_dtoa_r+0x97c>
 8006ff2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006ff6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8006ff8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8006ffc:	f7f9 fcde 	bl	80009bc <__aeabi_dcmplt>
 8007000:	2800      	cmp	r0, #0
 8007002:	f040 8289 	bne.w	8007518 <_dtoa_r+0x978>
 8007006:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800700a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800700e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007010:	2b00      	cmp	r3, #0
 8007012:	f2c0 8151 	blt.w	80072b8 <_dtoa_r+0x718>
 8007016:	f1bb 0f0e 	cmp.w	fp, #14
 800701a:	f300 814d 	bgt.w	80072b8 <_dtoa_r+0x718>
 800701e:	4b45      	ldr	r3, [pc, #276]	; (8007134 <_dtoa_r+0x594>)
 8007020:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8007024:	e9d3 3400 	ldrd	r3, r4, [r3]
 8007028:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800702c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800702e:	2b00      	cmp	r3, #0
 8007030:	f280 80da 	bge.w	80071e8 <_dtoa_r+0x648>
 8007034:	9b08      	ldr	r3, [sp, #32]
 8007036:	2b00      	cmp	r3, #0
 8007038:	f300 80d6 	bgt.w	80071e8 <_dtoa_r+0x648>
 800703c:	f040 826b 	bne.w	8007516 <_dtoa_r+0x976>
 8007040:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007044:	2200      	movs	r2, #0
 8007046:	4b40      	ldr	r3, [pc, #256]	; (8007148 <_dtoa_r+0x5a8>)
 8007048:	f7f9 fa46 	bl	80004d8 <__aeabi_dmul>
 800704c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007050:	f7f9 fcc8 	bl	80009e4 <__aeabi_dcmpge>
 8007054:	9c08      	ldr	r4, [sp, #32]
 8007056:	4626      	mov	r6, r4
 8007058:	2800      	cmp	r0, #0
 800705a:	f040 8241 	bne.w	80074e0 <_dtoa_r+0x940>
 800705e:	2331      	movs	r3, #49	; 0x31
 8007060:	9f03      	ldr	r7, [sp, #12]
 8007062:	f10b 0b01 	add.w	fp, fp, #1
 8007066:	f807 3b01 	strb.w	r3, [r7], #1
 800706a:	e23d      	b.n	80074e8 <_dtoa_r+0x948>
 800706c:	07e2      	lsls	r2, r4, #31
 800706e:	d505      	bpl.n	800707c <_dtoa_r+0x4dc>
 8007070:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007074:	f7f9 fa30 	bl	80004d8 <__aeabi_dmul>
 8007078:	2301      	movs	r3, #1
 800707a:	3701      	adds	r7, #1
 800707c:	1064      	asrs	r4, r4, #1
 800707e:	3608      	adds	r6, #8
 8007080:	e76d      	b.n	8006f5e <_dtoa_r+0x3be>
 8007082:	2702      	movs	r7, #2
 8007084:	e770      	b.n	8006f68 <_dtoa_r+0x3c8>
 8007086:	46d8      	mov	r8, fp
 8007088:	9c08      	ldr	r4, [sp, #32]
 800708a:	e78f      	b.n	8006fac <_dtoa_r+0x40c>
 800708c:	9903      	ldr	r1, [sp, #12]
 800708e:	4b29      	ldr	r3, [pc, #164]	; (8007134 <_dtoa_r+0x594>)
 8007090:	4421      	add	r1, r4
 8007092:	9112      	str	r1, [sp, #72]	; 0x48
 8007094:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007096:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800709a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800709e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80070a2:	2900      	cmp	r1, #0
 80070a4:	d054      	beq.n	8007150 <_dtoa_r+0x5b0>
 80070a6:	2000      	movs	r0, #0
 80070a8:	4928      	ldr	r1, [pc, #160]	; (800714c <_dtoa_r+0x5ac>)
 80070aa:	f7f9 fb3f 	bl	800072c <__aeabi_ddiv>
 80070ae:	463b      	mov	r3, r7
 80070b0:	4632      	mov	r2, r6
 80070b2:	f7f9 f859 	bl	8000168 <__aeabi_dsub>
 80070b6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80070ba:	9f03      	ldr	r7, [sp, #12]
 80070bc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070c0:	f7f9 fcba 	bl	8000a38 <__aeabi_d2iz>
 80070c4:	4604      	mov	r4, r0
 80070c6:	f7f9 f99d 	bl	8000404 <__aeabi_i2d>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80070d2:	f7f9 f849 	bl	8000168 <__aeabi_dsub>
 80070d6:	4602      	mov	r2, r0
 80070d8:	460b      	mov	r3, r1
 80070da:	3430      	adds	r4, #48	; 0x30
 80070dc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070e0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80070e4:	f807 4b01 	strb.w	r4, [r7], #1
 80070e8:	f7f9 fc68 	bl	80009bc <__aeabi_dcmplt>
 80070ec:	2800      	cmp	r0, #0
 80070ee:	d173      	bne.n	80071d8 <_dtoa_r+0x638>
 80070f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070f4:	2000      	movs	r0, #0
 80070f6:	4911      	ldr	r1, [pc, #68]	; (800713c <_dtoa_r+0x59c>)
 80070f8:	f7f9 f836 	bl	8000168 <__aeabi_dsub>
 80070fc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007100:	f7f9 fc5c 	bl	80009bc <__aeabi_dcmplt>
 8007104:	2800      	cmp	r0, #0
 8007106:	f040 80b6 	bne.w	8007276 <_dtoa_r+0x6d6>
 800710a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800710c:	429f      	cmp	r7, r3
 800710e:	f43f af7a 	beq.w	8007006 <_dtoa_r+0x466>
 8007112:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007116:	2200      	movs	r2, #0
 8007118:	4b09      	ldr	r3, [pc, #36]	; (8007140 <_dtoa_r+0x5a0>)
 800711a:	f7f9 f9dd 	bl	80004d8 <__aeabi_dmul>
 800711e:	2200      	movs	r2, #0
 8007120:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8007124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007128:	4b05      	ldr	r3, [pc, #20]	; (8007140 <_dtoa_r+0x5a0>)
 800712a:	f7f9 f9d5 	bl	80004d8 <__aeabi_dmul>
 800712e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007132:	e7c3      	b.n	80070bc <_dtoa_r+0x51c>
 8007134:	0800aa70 	.word	0x0800aa70
 8007138:	0800aa48 	.word	0x0800aa48
 800713c:	3ff00000 	.word	0x3ff00000
 8007140:	40240000 	.word	0x40240000
 8007144:	401c0000 	.word	0x401c0000
 8007148:	40140000 	.word	0x40140000
 800714c:	3fe00000 	.word	0x3fe00000
 8007150:	4630      	mov	r0, r6
 8007152:	4639      	mov	r1, r7
 8007154:	f7f9 f9c0 	bl	80004d8 <__aeabi_dmul>
 8007158:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800715a:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800715e:	9c03      	ldr	r4, [sp, #12]
 8007160:	9314      	str	r3, [sp, #80]	; 0x50
 8007162:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007166:	f7f9 fc67 	bl	8000a38 <__aeabi_d2iz>
 800716a:	9015      	str	r0, [sp, #84]	; 0x54
 800716c:	f7f9 f94a 	bl	8000404 <__aeabi_i2d>
 8007170:	4602      	mov	r2, r0
 8007172:	460b      	mov	r3, r1
 8007174:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007178:	f7f8 fff6 	bl	8000168 <__aeabi_dsub>
 800717c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800717e:	4606      	mov	r6, r0
 8007180:	3330      	adds	r3, #48	; 0x30
 8007182:	f804 3b01 	strb.w	r3, [r4], #1
 8007186:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8007188:	460f      	mov	r7, r1
 800718a:	429c      	cmp	r4, r3
 800718c:	f04f 0200 	mov.w	r2, #0
 8007190:	d124      	bne.n	80071dc <_dtoa_r+0x63c>
 8007192:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8007196:	4baf      	ldr	r3, [pc, #700]	; (8007454 <_dtoa_r+0x8b4>)
 8007198:	f7f8 ffe8 	bl	800016c <__adddf3>
 800719c:	4602      	mov	r2, r0
 800719e:	460b      	mov	r3, r1
 80071a0:	4630      	mov	r0, r6
 80071a2:	4639      	mov	r1, r7
 80071a4:	f7f9 fc28 	bl	80009f8 <__aeabi_dcmpgt>
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d163      	bne.n	8007274 <_dtoa_r+0x6d4>
 80071ac:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80071b0:	2000      	movs	r0, #0
 80071b2:	49a8      	ldr	r1, [pc, #672]	; (8007454 <_dtoa_r+0x8b4>)
 80071b4:	f7f8 ffd8 	bl	8000168 <__aeabi_dsub>
 80071b8:	4602      	mov	r2, r0
 80071ba:	460b      	mov	r3, r1
 80071bc:	4630      	mov	r0, r6
 80071be:	4639      	mov	r1, r7
 80071c0:	f7f9 fbfc 	bl	80009bc <__aeabi_dcmplt>
 80071c4:	2800      	cmp	r0, #0
 80071c6:	f43f af1e 	beq.w	8007006 <_dtoa_r+0x466>
 80071ca:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80071cc:	1e7b      	subs	r3, r7, #1
 80071ce:	9314      	str	r3, [sp, #80]	; 0x50
 80071d0:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80071d4:	2b30      	cmp	r3, #48	; 0x30
 80071d6:	d0f8      	beq.n	80071ca <_dtoa_r+0x62a>
 80071d8:	46c3      	mov	fp, r8
 80071da:	e03b      	b.n	8007254 <_dtoa_r+0x6b4>
 80071dc:	4b9e      	ldr	r3, [pc, #632]	; (8007458 <_dtoa_r+0x8b8>)
 80071de:	f7f9 f97b 	bl	80004d8 <__aeabi_dmul>
 80071e2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80071e6:	e7bc      	b.n	8007162 <_dtoa_r+0x5c2>
 80071e8:	9f03      	ldr	r7, [sp, #12]
 80071ea:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80071ee:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80071f2:	4640      	mov	r0, r8
 80071f4:	4649      	mov	r1, r9
 80071f6:	f7f9 fa99 	bl	800072c <__aeabi_ddiv>
 80071fa:	f7f9 fc1d 	bl	8000a38 <__aeabi_d2iz>
 80071fe:	4604      	mov	r4, r0
 8007200:	f7f9 f900 	bl	8000404 <__aeabi_i2d>
 8007204:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007208:	f7f9 f966 	bl	80004d8 <__aeabi_dmul>
 800720c:	4602      	mov	r2, r0
 800720e:	460b      	mov	r3, r1
 8007210:	4640      	mov	r0, r8
 8007212:	4649      	mov	r1, r9
 8007214:	f7f8 ffa8 	bl	8000168 <__aeabi_dsub>
 8007218:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800721c:	f807 6b01 	strb.w	r6, [r7], #1
 8007220:	9e03      	ldr	r6, [sp, #12]
 8007222:	f8dd c020 	ldr.w	ip, [sp, #32]
 8007226:	1bbe      	subs	r6, r7, r6
 8007228:	45b4      	cmp	ip, r6
 800722a:	4602      	mov	r2, r0
 800722c:	460b      	mov	r3, r1
 800722e:	d136      	bne.n	800729e <_dtoa_r+0x6fe>
 8007230:	f7f8 ff9c 	bl	800016c <__adddf3>
 8007234:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007238:	4680      	mov	r8, r0
 800723a:	4689      	mov	r9, r1
 800723c:	f7f9 fbdc 	bl	80009f8 <__aeabi_dcmpgt>
 8007240:	bb58      	cbnz	r0, 800729a <_dtoa_r+0x6fa>
 8007242:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007246:	4640      	mov	r0, r8
 8007248:	4649      	mov	r1, r9
 800724a:	f7f9 fbad 	bl	80009a8 <__aeabi_dcmpeq>
 800724e:	b108      	cbz	r0, 8007254 <_dtoa_r+0x6b4>
 8007250:	07e3      	lsls	r3, r4, #31
 8007252:	d422      	bmi.n	800729a <_dtoa_r+0x6fa>
 8007254:	4651      	mov	r1, sl
 8007256:	4628      	mov	r0, r5
 8007258:	f000 fbc2 	bl	80079e0 <_Bfree>
 800725c:	2300      	movs	r3, #0
 800725e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007260:	703b      	strb	r3, [r7, #0]
 8007262:	f10b 0301 	add.w	r3, fp, #1
 8007266:	6013      	str	r3, [r2, #0]
 8007268:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800726a:	2b00      	cmp	r3, #0
 800726c:	f43f ace6 	beq.w	8006c3c <_dtoa_r+0x9c>
 8007270:	601f      	str	r7, [r3, #0]
 8007272:	e4e3      	b.n	8006c3c <_dtoa_r+0x9c>
 8007274:	4627      	mov	r7, r4
 8007276:	463b      	mov	r3, r7
 8007278:	461f      	mov	r7, r3
 800727a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800727e:	2a39      	cmp	r2, #57	; 0x39
 8007280:	d107      	bne.n	8007292 <_dtoa_r+0x6f2>
 8007282:	9a03      	ldr	r2, [sp, #12]
 8007284:	429a      	cmp	r2, r3
 8007286:	d1f7      	bne.n	8007278 <_dtoa_r+0x6d8>
 8007288:	2230      	movs	r2, #48	; 0x30
 800728a:	9903      	ldr	r1, [sp, #12]
 800728c:	f108 0801 	add.w	r8, r8, #1
 8007290:	700a      	strb	r2, [r1, #0]
 8007292:	781a      	ldrb	r2, [r3, #0]
 8007294:	3201      	adds	r2, #1
 8007296:	701a      	strb	r2, [r3, #0]
 8007298:	e79e      	b.n	80071d8 <_dtoa_r+0x638>
 800729a:	46d8      	mov	r8, fp
 800729c:	e7eb      	b.n	8007276 <_dtoa_r+0x6d6>
 800729e:	2200      	movs	r2, #0
 80072a0:	4b6d      	ldr	r3, [pc, #436]	; (8007458 <_dtoa_r+0x8b8>)
 80072a2:	f7f9 f919 	bl	80004d8 <__aeabi_dmul>
 80072a6:	2200      	movs	r2, #0
 80072a8:	2300      	movs	r3, #0
 80072aa:	4680      	mov	r8, r0
 80072ac:	4689      	mov	r9, r1
 80072ae:	f7f9 fb7b 	bl	80009a8 <__aeabi_dcmpeq>
 80072b2:	2800      	cmp	r0, #0
 80072b4:	d09b      	beq.n	80071ee <_dtoa_r+0x64e>
 80072b6:	e7cd      	b.n	8007254 <_dtoa_r+0x6b4>
 80072b8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80072ba:	2a00      	cmp	r2, #0
 80072bc:	f000 80c4 	beq.w	8007448 <_dtoa_r+0x8a8>
 80072c0:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80072c2:	2a01      	cmp	r2, #1
 80072c4:	f300 80a8 	bgt.w	8007418 <_dtoa_r+0x878>
 80072c8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80072ca:	2a00      	cmp	r2, #0
 80072cc:	f000 80a0 	beq.w	8007410 <_dtoa_r+0x870>
 80072d0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80072d4:	464f      	mov	r7, r9
 80072d6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80072d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072da:	2101      	movs	r1, #1
 80072dc:	441a      	add	r2, r3
 80072de:	4628      	mov	r0, r5
 80072e0:	4499      	add	r9, r3
 80072e2:	9209      	str	r2, [sp, #36]	; 0x24
 80072e4:	f000 fc32 	bl	8007b4c <__i2b>
 80072e8:	4606      	mov	r6, r0
 80072ea:	b15f      	cbz	r7, 8007304 <_dtoa_r+0x764>
 80072ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	dd08      	ble.n	8007304 <_dtoa_r+0x764>
 80072f2:	42bb      	cmp	r3, r7
 80072f4:	bfa8      	it	ge
 80072f6:	463b      	movge	r3, r7
 80072f8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072fa:	eba9 0903 	sub.w	r9, r9, r3
 80072fe:	1aff      	subs	r7, r7, r3
 8007300:	1ad3      	subs	r3, r2, r3
 8007302:	9309      	str	r3, [sp, #36]	; 0x24
 8007304:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007306:	b1f3      	cbz	r3, 8007346 <_dtoa_r+0x7a6>
 8007308:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800730a:	2b00      	cmp	r3, #0
 800730c:	f000 80a0 	beq.w	8007450 <_dtoa_r+0x8b0>
 8007310:	2c00      	cmp	r4, #0
 8007312:	dd10      	ble.n	8007336 <_dtoa_r+0x796>
 8007314:	4631      	mov	r1, r6
 8007316:	4622      	mov	r2, r4
 8007318:	4628      	mov	r0, r5
 800731a:	f000 fcd5 	bl	8007cc8 <__pow5mult>
 800731e:	4652      	mov	r2, sl
 8007320:	4601      	mov	r1, r0
 8007322:	4606      	mov	r6, r0
 8007324:	4628      	mov	r0, r5
 8007326:	f000 fc27 	bl	8007b78 <__multiply>
 800732a:	4680      	mov	r8, r0
 800732c:	4651      	mov	r1, sl
 800732e:	4628      	mov	r0, r5
 8007330:	f000 fb56 	bl	80079e0 <_Bfree>
 8007334:	46c2      	mov	sl, r8
 8007336:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007338:	1b1a      	subs	r2, r3, r4
 800733a:	d004      	beq.n	8007346 <_dtoa_r+0x7a6>
 800733c:	4651      	mov	r1, sl
 800733e:	4628      	mov	r0, r5
 8007340:	f000 fcc2 	bl	8007cc8 <__pow5mult>
 8007344:	4682      	mov	sl, r0
 8007346:	2101      	movs	r1, #1
 8007348:	4628      	mov	r0, r5
 800734a:	f000 fbff 	bl	8007b4c <__i2b>
 800734e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007350:	4604      	mov	r4, r0
 8007352:	2b00      	cmp	r3, #0
 8007354:	f340 8082 	ble.w	800745c <_dtoa_r+0x8bc>
 8007358:	461a      	mov	r2, r3
 800735a:	4601      	mov	r1, r0
 800735c:	4628      	mov	r0, r5
 800735e:	f000 fcb3 	bl	8007cc8 <__pow5mult>
 8007362:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007364:	4604      	mov	r4, r0
 8007366:	2b01      	cmp	r3, #1
 8007368:	dd7b      	ble.n	8007462 <_dtoa_r+0x8c2>
 800736a:	f04f 0800 	mov.w	r8, #0
 800736e:	6923      	ldr	r3, [r4, #16]
 8007370:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007374:	6918      	ldr	r0, [r3, #16]
 8007376:	f000 fb9b 	bl	8007ab0 <__hi0bits>
 800737a:	f1c0 0020 	rsb	r0, r0, #32
 800737e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007380:	4418      	add	r0, r3
 8007382:	f010 001f 	ands.w	r0, r0, #31
 8007386:	f000 8092 	beq.w	80074ae <_dtoa_r+0x90e>
 800738a:	f1c0 0320 	rsb	r3, r0, #32
 800738e:	2b04      	cmp	r3, #4
 8007390:	f340 8085 	ble.w	800749e <_dtoa_r+0x8fe>
 8007394:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007396:	f1c0 001c 	rsb	r0, r0, #28
 800739a:	4403      	add	r3, r0
 800739c:	4481      	add	r9, r0
 800739e:	4407      	add	r7, r0
 80073a0:	9309      	str	r3, [sp, #36]	; 0x24
 80073a2:	f1b9 0f00 	cmp.w	r9, #0
 80073a6:	dd05      	ble.n	80073b4 <_dtoa_r+0x814>
 80073a8:	4651      	mov	r1, sl
 80073aa:	464a      	mov	r2, r9
 80073ac:	4628      	mov	r0, r5
 80073ae:	f000 fce5 	bl	8007d7c <__lshift>
 80073b2:	4682      	mov	sl, r0
 80073b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	dd05      	ble.n	80073c6 <_dtoa_r+0x826>
 80073ba:	4621      	mov	r1, r4
 80073bc:	461a      	mov	r2, r3
 80073be:	4628      	mov	r0, r5
 80073c0:	f000 fcdc 	bl	8007d7c <__lshift>
 80073c4:	4604      	mov	r4, r0
 80073c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d072      	beq.n	80074b2 <_dtoa_r+0x912>
 80073cc:	4621      	mov	r1, r4
 80073ce:	4650      	mov	r0, sl
 80073d0:	f000 fd40 	bl	8007e54 <__mcmp>
 80073d4:	2800      	cmp	r0, #0
 80073d6:	da6c      	bge.n	80074b2 <_dtoa_r+0x912>
 80073d8:	2300      	movs	r3, #0
 80073da:	4651      	mov	r1, sl
 80073dc:	220a      	movs	r2, #10
 80073de:	4628      	mov	r0, r5
 80073e0:	f000 fb20 	bl	8007a24 <__multadd>
 80073e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80073e6:	4682      	mov	sl, r0
 80073e8:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	f000 81ac 	beq.w	800774a <_dtoa_r+0xbaa>
 80073f2:	2300      	movs	r3, #0
 80073f4:	4631      	mov	r1, r6
 80073f6:	220a      	movs	r2, #10
 80073f8:	4628      	mov	r0, r5
 80073fa:	f000 fb13 	bl	8007a24 <__multadd>
 80073fe:	9b06      	ldr	r3, [sp, #24]
 8007400:	4606      	mov	r6, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	f300 8093 	bgt.w	800752e <_dtoa_r+0x98e>
 8007408:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800740a:	2b02      	cmp	r3, #2
 800740c:	dc59      	bgt.n	80074c2 <_dtoa_r+0x922>
 800740e:	e08e      	b.n	800752e <_dtoa_r+0x98e>
 8007410:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8007412:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8007416:	e75d      	b.n	80072d4 <_dtoa_r+0x734>
 8007418:	9b08      	ldr	r3, [sp, #32]
 800741a:	1e5c      	subs	r4, r3, #1
 800741c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800741e:	42a3      	cmp	r3, r4
 8007420:	bfbf      	itttt	lt
 8007422:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8007424:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8007426:	1ae3      	sublt	r3, r4, r3
 8007428:	18d2      	addlt	r2, r2, r3
 800742a:	bfa8      	it	ge
 800742c:	1b1c      	subge	r4, r3, r4
 800742e:	9b08      	ldr	r3, [sp, #32]
 8007430:	bfbe      	ittt	lt
 8007432:	940a      	strlt	r4, [sp, #40]	; 0x28
 8007434:	920e      	strlt	r2, [sp, #56]	; 0x38
 8007436:	2400      	movlt	r4, #0
 8007438:	2b00      	cmp	r3, #0
 800743a:	bfb5      	itete	lt
 800743c:	eba9 0703 	sublt.w	r7, r9, r3
 8007440:	464f      	movge	r7, r9
 8007442:	2300      	movlt	r3, #0
 8007444:	9b08      	ldrge	r3, [sp, #32]
 8007446:	e747      	b.n	80072d8 <_dtoa_r+0x738>
 8007448:	464f      	mov	r7, r9
 800744a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800744c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800744e:	e74c      	b.n	80072ea <_dtoa_r+0x74a>
 8007450:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007452:	e773      	b.n	800733c <_dtoa_r+0x79c>
 8007454:	3fe00000 	.word	0x3fe00000
 8007458:	40240000 	.word	0x40240000
 800745c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800745e:	2b01      	cmp	r3, #1
 8007460:	dc18      	bgt.n	8007494 <_dtoa_r+0x8f4>
 8007462:	9b04      	ldr	r3, [sp, #16]
 8007464:	b9b3      	cbnz	r3, 8007494 <_dtoa_r+0x8f4>
 8007466:	9b05      	ldr	r3, [sp, #20]
 8007468:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800746c:	b993      	cbnz	r3, 8007494 <_dtoa_r+0x8f4>
 800746e:	9b05      	ldr	r3, [sp, #20]
 8007470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007474:	0d1b      	lsrs	r3, r3, #20
 8007476:	051b      	lsls	r3, r3, #20
 8007478:	b17b      	cbz	r3, 800749a <_dtoa_r+0x8fa>
 800747a:	f04f 0801 	mov.w	r8, #1
 800747e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007480:	f109 0901 	add.w	r9, r9, #1
 8007484:	3301      	adds	r3, #1
 8007486:	9309      	str	r3, [sp, #36]	; 0x24
 8007488:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800748a:	2b00      	cmp	r3, #0
 800748c:	f47f af6f 	bne.w	800736e <_dtoa_r+0x7ce>
 8007490:	2001      	movs	r0, #1
 8007492:	e774      	b.n	800737e <_dtoa_r+0x7de>
 8007494:	f04f 0800 	mov.w	r8, #0
 8007498:	e7f6      	b.n	8007488 <_dtoa_r+0x8e8>
 800749a:	4698      	mov	r8, r3
 800749c:	e7f4      	b.n	8007488 <_dtoa_r+0x8e8>
 800749e:	d080      	beq.n	80073a2 <_dtoa_r+0x802>
 80074a0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80074a2:	331c      	adds	r3, #28
 80074a4:	441a      	add	r2, r3
 80074a6:	4499      	add	r9, r3
 80074a8:	441f      	add	r7, r3
 80074aa:	9209      	str	r2, [sp, #36]	; 0x24
 80074ac:	e779      	b.n	80073a2 <_dtoa_r+0x802>
 80074ae:	4603      	mov	r3, r0
 80074b0:	e7f6      	b.n	80074a0 <_dtoa_r+0x900>
 80074b2:	9b08      	ldr	r3, [sp, #32]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	dc34      	bgt.n	8007522 <_dtoa_r+0x982>
 80074b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80074ba:	2b02      	cmp	r3, #2
 80074bc:	dd31      	ble.n	8007522 <_dtoa_r+0x982>
 80074be:	9b08      	ldr	r3, [sp, #32]
 80074c0:	9306      	str	r3, [sp, #24]
 80074c2:	9b06      	ldr	r3, [sp, #24]
 80074c4:	b963      	cbnz	r3, 80074e0 <_dtoa_r+0x940>
 80074c6:	4621      	mov	r1, r4
 80074c8:	2205      	movs	r2, #5
 80074ca:	4628      	mov	r0, r5
 80074cc:	f000 faaa 	bl	8007a24 <__multadd>
 80074d0:	4601      	mov	r1, r0
 80074d2:	4604      	mov	r4, r0
 80074d4:	4650      	mov	r0, sl
 80074d6:	f000 fcbd 	bl	8007e54 <__mcmp>
 80074da:	2800      	cmp	r0, #0
 80074dc:	f73f adbf 	bgt.w	800705e <_dtoa_r+0x4be>
 80074e0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80074e2:	9f03      	ldr	r7, [sp, #12]
 80074e4:	ea6f 0b03 	mvn.w	fp, r3
 80074e8:	f04f 0800 	mov.w	r8, #0
 80074ec:	4621      	mov	r1, r4
 80074ee:	4628      	mov	r0, r5
 80074f0:	f000 fa76 	bl	80079e0 <_Bfree>
 80074f4:	2e00      	cmp	r6, #0
 80074f6:	f43f aead 	beq.w	8007254 <_dtoa_r+0x6b4>
 80074fa:	f1b8 0f00 	cmp.w	r8, #0
 80074fe:	d005      	beq.n	800750c <_dtoa_r+0x96c>
 8007500:	45b0      	cmp	r8, r6
 8007502:	d003      	beq.n	800750c <_dtoa_r+0x96c>
 8007504:	4641      	mov	r1, r8
 8007506:	4628      	mov	r0, r5
 8007508:	f000 fa6a 	bl	80079e0 <_Bfree>
 800750c:	4631      	mov	r1, r6
 800750e:	4628      	mov	r0, r5
 8007510:	f000 fa66 	bl	80079e0 <_Bfree>
 8007514:	e69e      	b.n	8007254 <_dtoa_r+0x6b4>
 8007516:	2400      	movs	r4, #0
 8007518:	4626      	mov	r6, r4
 800751a:	e7e1      	b.n	80074e0 <_dtoa_r+0x940>
 800751c:	46c3      	mov	fp, r8
 800751e:	4626      	mov	r6, r4
 8007520:	e59d      	b.n	800705e <_dtoa_r+0x4be>
 8007522:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007524:	2b00      	cmp	r3, #0
 8007526:	f000 80c8 	beq.w	80076ba <_dtoa_r+0xb1a>
 800752a:	9b08      	ldr	r3, [sp, #32]
 800752c:	9306      	str	r3, [sp, #24]
 800752e:	2f00      	cmp	r7, #0
 8007530:	dd05      	ble.n	800753e <_dtoa_r+0x99e>
 8007532:	4631      	mov	r1, r6
 8007534:	463a      	mov	r2, r7
 8007536:	4628      	mov	r0, r5
 8007538:	f000 fc20 	bl	8007d7c <__lshift>
 800753c:	4606      	mov	r6, r0
 800753e:	f1b8 0f00 	cmp.w	r8, #0
 8007542:	d05b      	beq.n	80075fc <_dtoa_r+0xa5c>
 8007544:	4628      	mov	r0, r5
 8007546:	6871      	ldr	r1, [r6, #4]
 8007548:	f000 fa0a 	bl	8007960 <_Balloc>
 800754c:	4607      	mov	r7, r0
 800754e:	b928      	cbnz	r0, 800755c <_dtoa_r+0x9bc>
 8007550:	4602      	mov	r2, r0
 8007552:	f240 21ef 	movw	r1, #751	; 0x2ef
 8007556:	4b81      	ldr	r3, [pc, #516]	; (800775c <_dtoa_r+0xbbc>)
 8007558:	f7ff bb36 	b.w	8006bc8 <_dtoa_r+0x28>
 800755c:	6932      	ldr	r2, [r6, #16]
 800755e:	f106 010c 	add.w	r1, r6, #12
 8007562:	3202      	adds	r2, #2
 8007564:	0092      	lsls	r2, r2, #2
 8007566:	300c      	adds	r0, #12
 8007568:	f7ff fa83 	bl	8006a72 <memcpy>
 800756c:	2201      	movs	r2, #1
 800756e:	4639      	mov	r1, r7
 8007570:	4628      	mov	r0, r5
 8007572:	f000 fc03 	bl	8007d7c <__lshift>
 8007576:	46b0      	mov	r8, r6
 8007578:	4606      	mov	r6, r0
 800757a:	9b03      	ldr	r3, [sp, #12]
 800757c:	9a03      	ldr	r2, [sp, #12]
 800757e:	3301      	adds	r3, #1
 8007580:	9308      	str	r3, [sp, #32]
 8007582:	9b06      	ldr	r3, [sp, #24]
 8007584:	4413      	add	r3, r2
 8007586:	930b      	str	r3, [sp, #44]	; 0x2c
 8007588:	9b04      	ldr	r3, [sp, #16]
 800758a:	f003 0301 	and.w	r3, r3, #1
 800758e:	930a      	str	r3, [sp, #40]	; 0x28
 8007590:	9b08      	ldr	r3, [sp, #32]
 8007592:	4621      	mov	r1, r4
 8007594:	3b01      	subs	r3, #1
 8007596:	4650      	mov	r0, sl
 8007598:	9304      	str	r3, [sp, #16]
 800759a:	f7ff fa78 	bl	8006a8e <quorem>
 800759e:	4641      	mov	r1, r8
 80075a0:	9006      	str	r0, [sp, #24]
 80075a2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80075a6:	4650      	mov	r0, sl
 80075a8:	f000 fc54 	bl	8007e54 <__mcmp>
 80075ac:	4632      	mov	r2, r6
 80075ae:	9009      	str	r0, [sp, #36]	; 0x24
 80075b0:	4621      	mov	r1, r4
 80075b2:	4628      	mov	r0, r5
 80075b4:	f000 fc6a 	bl	8007e8c <__mdiff>
 80075b8:	68c2      	ldr	r2, [r0, #12]
 80075ba:	4607      	mov	r7, r0
 80075bc:	bb02      	cbnz	r2, 8007600 <_dtoa_r+0xa60>
 80075be:	4601      	mov	r1, r0
 80075c0:	4650      	mov	r0, sl
 80075c2:	f000 fc47 	bl	8007e54 <__mcmp>
 80075c6:	4602      	mov	r2, r0
 80075c8:	4639      	mov	r1, r7
 80075ca:	4628      	mov	r0, r5
 80075cc:	920c      	str	r2, [sp, #48]	; 0x30
 80075ce:	f000 fa07 	bl	80079e0 <_Bfree>
 80075d2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80075d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80075d6:	9f08      	ldr	r7, [sp, #32]
 80075d8:	ea43 0102 	orr.w	r1, r3, r2
 80075dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80075de:	4319      	orrs	r1, r3
 80075e0:	d110      	bne.n	8007604 <_dtoa_r+0xa64>
 80075e2:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80075e6:	d029      	beq.n	800763c <_dtoa_r+0xa9c>
 80075e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	dd02      	ble.n	80075f4 <_dtoa_r+0xa54>
 80075ee:	9b06      	ldr	r3, [sp, #24]
 80075f0:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80075f4:	9b04      	ldr	r3, [sp, #16]
 80075f6:	f883 9000 	strb.w	r9, [r3]
 80075fa:	e777      	b.n	80074ec <_dtoa_r+0x94c>
 80075fc:	4630      	mov	r0, r6
 80075fe:	e7ba      	b.n	8007576 <_dtoa_r+0x9d6>
 8007600:	2201      	movs	r2, #1
 8007602:	e7e1      	b.n	80075c8 <_dtoa_r+0xa28>
 8007604:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007606:	2b00      	cmp	r3, #0
 8007608:	db04      	blt.n	8007614 <_dtoa_r+0xa74>
 800760a:	9922      	ldr	r1, [sp, #136]	; 0x88
 800760c:	430b      	orrs	r3, r1
 800760e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8007610:	430b      	orrs	r3, r1
 8007612:	d120      	bne.n	8007656 <_dtoa_r+0xab6>
 8007614:	2a00      	cmp	r2, #0
 8007616:	dded      	ble.n	80075f4 <_dtoa_r+0xa54>
 8007618:	4651      	mov	r1, sl
 800761a:	2201      	movs	r2, #1
 800761c:	4628      	mov	r0, r5
 800761e:	f000 fbad 	bl	8007d7c <__lshift>
 8007622:	4621      	mov	r1, r4
 8007624:	4682      	mov	sl, r0
 8007626:	f000 fc15 	bl	8007e54 <__mcmp>
 800762a:	2800      	cmp	r0, #0
 800762c:	dc03      	bgt.n	8007636 <_dtoa_r+0xa96>
 800762e:	d1e1      	bne.n	80075f4 <_dtoa_r+0xa54>
 8007630:	f019 0f01 	tst.w	r9, #1
 8007634:	d0de      	beq.n	80075f4 <_dtoa_r+0xa54>
 8007636:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800763a:	d1d8      	bne.n	80075ee <_dtoa_r+0xa4e>
 800763c:	2339      	movs	r3, #57	; 0x39
 800763e:	9a04      	ldr	r2, [sp, #16]
 8007640:	7013      	strb	r3, [r2, #0]
 8007642:	463b      	mov	r3, r7
 8007644:	461f      	mov	r7, r3
 8007646:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800764a:	3b01      	subs	r3, #1
 800764c:	2a39      	cmp	r2, #57	; 0x39
 800764e:	d06b      	beq.n	8007728 <_dtoa_r+0xb88>
 8007650:	3201      	adds	r2, #1
 8007652:	701a      	strb	r2, [r3, #0]
 8007654:	e74a      	b.n	80074ec <_dtoa_r+0x94c>
 8007656:	2a00      	cmp	r2, #0
 8007658:	dd07      	ble.n	800766a <_dtoa_r+0xaca>
 800765a:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800765e:	d0ed      	beq.n	800763c <_dtoa_r+0xa9c>
 8007660:	9a04      	ldr	r2, [sp, #16]
 8007662:	f109 0301 	add.w	r3, r9, #1
 8007666:	7013      	strb	r3, [r2, #0]
 8007668:	e740      	b.n	80074ec <_dtoa_r+0x94c>
 800766a:	9b08      	ldr	r3, [sp, #32]
 800766c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800766e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8007672:	4293      	cmp	r3, r2
 8007674:	d042      	beq.n	80076fc <_dtoa_r+0xb5c>
 8007676:	4651      	mov	r1, sl
 8007678:	2300      	movs	r3, #0
 800767a:	220a      	movs	r2, #10
 800767c:	4628      	mov	r0, r5
 800767e:	f000 f9d1 	bl	8007a24 <__multadd>
 8007682:	45b0      	cmp	r8, r6
 8007684:	4682      	mov	sl, r0
 8007686:	f04f 0300 	mov.w	r3, #0
 800768a:	f04f 020a 	mov.w	r2, #10
 800768e:	4641      	mov	r1, r8
 8007690:	4628      	mov	r0, r5
 8007692:	d107      	bne.n	80076a4 <_dtoa_r+0xb04>
 8007694:	f000 f9c6 	bl	8007a24 <__multadd>
 8007698:	4680      	mov	r8, r0
 800769a:	4606      	mov	r6, r0
 800769c:	9b08      	ldr	r3, [sp, #32]
 800769e:	3301      	adds	r3, #1
 80076a0:	9308      	str	r3, [sp, #32]
 80076a2:	e775      	b.n	8007590 <_dtoa_r+0x9f0>
 80076a4:	f000 f9be 	bl	8007a24 <__multadd>
 80076a8:	4631      	mov	r1, r6
 80076aa:	4680      	mov	r8, r0
 80076ac:	2300      	movs	r3, #0
 80076ae:	220a      	movs	r2, #10
 80076b0:	4628      	mov	r0, r5
 80076b2:	f000 f9b7 	bl	8007a24 <__multadd>
 80076b6:	4606      	mov	r6, r0
 80076b8:	e7f0      	b.n	800769c <_dtoa_r+0xafc>
 80076ba:	9b08      	ldr	r3, [sp, #32]
 80076bc:	9306      	str	r3, [sp, #24]
 80076be:	9f03      	ldr	r7, [sp, #12]
 80076c0:	4621      	mov	r1, r4
 80076c2:	4650      	mov	r0, sl
 80076c4:	f7ff f9e3 	bl	8006a8e <quorem>
 80076c8:	9b03      	ldr	r3, [sp, #12]
 80076ca:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80076ce:	f807 9b01 	strb.w	r9, [r7], #1
 80076d2:	1afa      	subs	r2, r7, r3
 80076d4:	9b06      	ldr	r3, [sp, #24]
 80076d6:	4293      	cmp	r3, r2
 80076d8:	dd07      	ble.n	80076ea <_dtoa_r+0xb4a>
 80076da:	4651      	mov	r1, sl
 80076dc:	2300      	movs	r3, #0
 80076de:	220a      	movs	r2, #10
 80076e0:	4628      	mov	r0, r5
 80076e2:	f000 f99f 	bl	8007a24 <__multadd>
 80076e6:	4682      	mov	sl, r0
 80076e8:	e7ea      	b.n	80076c0 <_dtoa_r+0xb20>
 80076ea:	9b06      	ldr	r3, [sp, #24]
 80076ec:	f04f 0800 	mov.w	r8, #0
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bfcc      	ite	gt
 80076f4:	461f      	movgt	r7, r3
 80076f6:	2701      	movle	r7, #1
 80076f8:	9b03      	ldr	r3, [sp, #12]
 80076fa:	441f      	add	r7, r3
 80076fc:	4651      	mov	r1, sl
 80076fe:	2201      	movs	r2, #1
 8007700:	4628      	mov	r0, r5
 8007702:	f000 fb3b 	bl	8007d7c <__lshift>
 8007706:	4621      	mov	r1, r4
 8007708:	4682      	mov	sl, r0
 800770a:	f000 fba3 	bl	8007e54 <__mcmp>
 800770e:	2800      	cmp	r0, #0
 8007710:	dc97      	bgt.n	8007642 <_dtoa_r+0xaa2>
 8007712:	d102      	bne.n	800771a <_dtoa_r+0xb7a>
 8007714:	f019 0f01 	tst.w	r9, #1
 8007718:	d193      	bne.n	8007642 <_dtoa_r+0xaa2>
 800771a:	463b      	mov	r3, r7
 800771c:	461f      	mov	r7, r3
 800771e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007722:	2a30      	cmp	r2, #48	; 0x30
 8007724:	d0fa      	beq.n	800771c <_dtoa_r+0xb7c>
 8007726:	e6e1      	b.n	80074ec <_dtoa_r+0x94c>
 8007728:	9a03      	ldr	r2, [sp, #12]
 800772a:	429a      	cmp	r2, r3
 800772c:	d18a      	bne.n	8007644 <_dtoa_r+0xaa4>
 800772e:	2331      	movs	r3, #49	; 0x31
 8007730:	f10b 0b01 	add.w	fp, fp, #1
 8007734:	e797      	b.n	8007666 <_dtoa_r+0xac6>
 8007736:	4b0a      	ldr	r3, [pc, #40]	; (8007760 <_dtoa_r+0xbc0>)
 8007738:	f7ff ba9f 	b.w	8006c7a <_dtoa_r+0xda>
 800773c:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800773e:	2b00      	cmp	r3, #0
 8007740:	f47f aa77 	bne.w	8006c32 <_dtoa_r+0x92>
 8007744:	4b07      	ldr	r3, [pc, #28]	; (8007764 <_dtoa_r+0xbc4>)
 8007746:	f7ff ba98 	b.w	8006c7a <_dtoa_r+0xda>
 800774a:	9b06      	ldr	r3, [sp, #24]
 800774c:	2b00      	cmp	r3, #0
 800774e:	dcb6      	bgt.n	80076be <_dtoa_r+0xb1e>
 8007750:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007752:	2b02      	cmp	r3, #2
 8007754:	f73f aeb5 	bgt.w	80074c2 <_dtoa_r+0x922>
 8007758:	e7b1      	b.n	80076be <_dtoa_r+0xb1e>
 800775a:	bf00      	nop
 800775c:	0800a9da 	.word	0x0800a9da
 8007760:	0800a93a 	.word	0x0800a93a
 8007764:	0800a95e 	.word	0x0800a95e

08007768 <_free_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4605      	mov	r5, r0
 800776c:	2900      	cmp	r1, #0
 800776e:	d040      	beq.n	80077f2 <_free_r+0x8a>
 8007770:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007774:	1f0c      	subs	r4, r1, #4
 8007776:	2b00      	cmp	r3, #0
 8007778:	bfb8      	it	lt
 800777a:	18e4      	addlt	r4, r4, r3
 800777c:	f000 f8e4 	bl	8007948 <__malloc_lock>
 8007780:	4a1c      	ldr	r2, [pc, #112]	; (80077f4 <_free_r+0x8c>)
 8007782:	6813      	ldr	r3, [r2, #0]
 8007784:	b933      	cbnz	r3, 8007794 <_free_r+0x2c>
 8007786:	6063      	str	r3, [r4, #4]
 8007788:	6014      	str	r4, [r2, #0]
 800778a:	4628      	mov	r0, r5
 800778c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007790:	f000 b8e0 	b.w	8007954 <__malloc_unlock>
 8007794:	42a3      	cmp	r3, r4
 8007796:	d908      	bls.n	80077aa <_free_r+0x42>
 8007798:	6820      	ldr	r0, [r4, #0]
 800779a:	1821      	adds	r1, r4, r0
 800779c:	428b      	cmp	r3, r1
 800779e:	bf01      	itttt	eq
 80077a0:	6819      	ldreq	r1, [r3, #0]
 80077a2:	685b      	ldreq	r3, [r3, #4]
 80077a4:	1809      	addeq	r1, r1, r0
 80077a6:	6021      	streq	r1, [r4, #0]
 80077a8:	e7ed      	b.n	8007786 <_free_r+0x1e>
 80077aa:	461a      	mov	r2, r3
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	b10b      	cbz	r3, 80077b4 <_free_r+0x4c>
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d9fa      	bls.n	80077aa <_free_r+0x42>
 80077b4:	6811      	ldr	r1, [r2, #0]
 80077b6:	1850      	adds	r0, r2, r1
 80077b8:	42a0      	cmp	r0, r4
 80077ba:	d10b      	bne.n	80077d4 <_free_r+0x6c>
 80077bc:	6820      	ldr	r0, [r4, #0]
 80077be:	4401      	add	r1, r0
 80077c0:	1850      	adds	r0, r2, r1
 80077c2:	4283      	cmp	r3, r0
 80077c4:	6011      	str	r1, [r2, #0]
 80077c6:	d1e0      	bne.n	800778a <_free_r+0x22>
 80077c8:	6818      	ldr	r0, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	4408      	add	r0, r1
 80077ce:	6010      	str	r0, [r2, #0]
 80077d0:	6053      	str	r3, [r2, #4]
 80077d2:	e7da      	b.n	800778a <_free_r+0x22>
 80077d4:	d902      	bls.n	80077dc <_free_r+0x74>
 80077d6:	230c      	movs	r3, #12
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	e7d6      	b.n	800778a <_free_r+0x22>
 80077dc:	6820      	ldr	r0, [r4, #0]
 80077de:	1821      	adds	r1, r4, r0
 80077e0:	428b      	cmp	r3, r1
 80077e2:	bf01      	itttt	eq
 80077e4:	6819      	ldreq	r1, [r3, #0]
 80077e6:	685b      	ldreq	r3, [r3, #4]
 80077e8:	1809      	addeq	r1, r1, r0
 80077ea:	6021      	streq	r1, [r4, #0]
 80077ec:	6063      	str	r3, [r4, #4]
 80077ee:	6054      	str	r4, [r2, #4]
 80077f0:	e7cb      	b.n	800778a <_free_r+0x22>
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	20000880 	.word	0x20000880

080077f8 <malloc>:
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <malloc+0xc>)
 80077fa:	4601      	mov	r1, r0
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	f000 b823 	b.w	8007848 <_malloc_r>
 8007802:	bf00      	nop
 8007804:	20000084 	.word	0x20000084

08007808 <sbrk_aligned>:
 8007808:	b570      	push	{r4, r5, r6, lr}
 800780a:	4e0e      	ldr	r6, [pc, #56]	; (8007844 <sbrk_aligned+0x3c>)
 800780c:	460c      	mov	r4, r1
 800780e:	6831      	ldr	r1, [r6, #0]
 8007810:	4605      	mov	r5, r0
 8007812:	b911      	cbnz	r1, 800781a <sbrk_aligned+0x12>
 8007814:	f000 fe38 	bl	8008488 <_sbrk_r>
 8007818:	6030      	str	r0, [r6, #0]
 800781a:	4621      	mov	r1, r4
 800781c:	4628      	mov	r0, r5
 800781e:	f000 fe33 	bl	8008488 <_sbrk_r>
 8007822:	1c43      	adds	r3, r0, #1
 8007824:	d00a      	beq.n	800783c <sbrk_aligned+0x34>
 8007826:	1cc4      	adds	r4, r0, #3
 8007828:	f024 0403 	bic.w	r4, r4, #3
 800782c:	42a0      	cmp	r0, r4
 800782e:	d007      	beq.n	8007840 <sbrk_aligned+0x38>
 8007830:	1a21      	subs	r1, r4, r0
 8007832:	4628      	mov	r0, r5
 8007834:	f000 fe28 	bl	8008488 <_sbrk_r>
 8007838:	3001      	adds	r0, #1
 800783a:	d101      	bne.n	8007840 <sbrk_aligned+0x38>
 800783c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007840:	4620      	mov	r0, r4
 8007842:	bd70      	pop	{r4, r5, r6, pc}
 8007844:	20000884 	.word	0x20000884

08007848 <_malloc_r>:
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	1ccd      	adds	r5, r1, #3
 800784e:	f025 0503 	bic.w	r5, r5, #3
 8007852:	3508      	adds	r5, #8
 8007854:	2d0c      	cmp	r5, #12
 8007856:	bf38      	it	cc
 8007858:	250c      	movcc	r5, #12
 800785a:	2d00      	cmp	r5, #0
 800785c:	4607      	mov	r7, r0
 800785e:	db01      	blt.n	8007864 <_malloc_r+0x1c>
 8007860:	42a9      	cmp	r1, r5
 8007862:	d905      	bls.n	8007870 <_malloc_r+0x28>
 8007864:	230c      	movs	r3, #12
 8007866:	2600      	movs	r6, #0
 8007868:	603b      	str	r3, [r7, #0]
 800786a:	4630      	mov	r0, r6
 800786c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007870:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8007944 <_malloc_r+0xfc>
 8007874:	f000 f868 	bl	8007948 <__malloc_lock>
 8007878:	f8d8 3000 	ldr.w	r3, [r8]
 800787c:	461c      	mov	r4, r3
 800787e:	bb5c      	cbnz	r4, 80078d8 <_malloc_r+0x90>
 8007880:	4629      	mov	r1, r5
 8007882:	4638      	mov	r0, r7
 8007884:	f7ff ffc0 	bl	8007808 <sbrk_aligned>
 8007888:	1c43      	adds	r3, r0, #1
 800788a:	4604      	mov	r4, r0
 800788c:	d155      	bne.n	800793a <_malloc_r+0xf2>
 800788e:	f8d8 4000 	ldr.w	r4, [r8]
 8007892:	4626      	mov	r6, r4
 8007894:	2e00      	cmp	r6, #0
 8007896:	d145      	bne.n	8007924 <_malloc_r+0xdc>
 8007898:	2c00      	cmp	r4, #0
 800789a:	d048      	beq.n	800792e <_malloc_r+0xe6>
 800789c:	6823      	ldr	r3, [r4, #0]
 800789e:	4631      	mov	r1, r6
 80078a0:	4638      	mov	r0, r7
 80078a2:	eb04 0903 	add.w	r9, r4, r3
 80078a6:	f000 fdef 	bl	8008488 <_sbrk_r>
 80078aa:	4581      	cmp	r9, r0
 80078ac:	d13f      	bne.n	800792e <_malloc_r+0xe6>
 80078ae:	6821      	ldr	r1, [r4, #0]
 80078b0:	4638      	mov	r0, r7
 80078b2:	1a6d      	subs	r5, r5, r1
 80078b4:	4629      	mov	r1, r5
 80078b6:	f7ff ffa7 	bl	8007808 <sbrk_aligned>
 80078ba:	3001      	adds	r0, #1
 80078bc:	d037      	beq.n	800792e <_malloc_r+0xe6>
 80078be:	6823      	ldr	r3, [r4, #0]
 80078c0:	442b      	add	r3, r5
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	f8d8 3000 	ldr.w	r3, [r8]
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d038      	beq.n	800793e <_malloc_r+0xf6>
 80078cc:	685a      	ldr	r2, [r3, #4]
 80078ce:	42a2      	cmp	r2, r4
 80078d0:	d12b      	bne.n	800792a <_malloc_r+0xe2>
 80078d2:	2200      	movs	r2, #0
 80078d4:	605a      	str	r2, [r3, #4]
 80078d6:	e00f      	b.n	80078f8 <_malloc_r+0xb0>
 80078d8:	6822      	ldr	r2, [r4, #0]
 80078da:	1b52      	subs	r2, r2, r5
 80078dc:	d41f      	bmi.n	800791e <_malloc_r+0xd6>
 80078de:	2a0b      	cmp	r2, #11
 80078e0:	d917      	bls.n	8007912 <_malloc_r+0xca>
 80078e2:	1961      	adds	r1, r4, r5
 80078e4:	42a3      	cmp	r3, r4
 80078e6:	6025      	str	r5, [r4, #0]
 80078e8:	bf18      	it	ne
 80078ea:	6059      	strne	r1, [r3, #4]
 80078ec:	6863      	ldr	r3, [r4, #4]
 80078ee:	bf08      	it	eq
 80078f0:	f8c8 1000 	streq.w	r1, [r8]
 80078f4:	5162      	str	r2, [r4, r5]
 80078f6:	604b      	str	r3, [r1, #4]
 80078f8:	4638      	mov	r0, r7
 80078fa:	f104 060b 	add.w	r6, r4, #11
 80078fe:	f000 f829 	bl	8007954 <__malloc_unlock>
 8007902:	f026 0607 	bic.w	r6, r6, #7
 8007906:	1d23      	adds	r3, r4, #4
 8007908:	1af2      	subs	r2, r6, r3
 800790a:	d0ae      	beq.n	800786a <_malloc_r+0x22>
 800790c:	1b9b      	subs	r3, r3, r6
 800790e:	50a3      	str	r3, [r4, r2]
 8007910:	e7ab      	b.n	800786a <_malloc_r+0x22>
 8007912:	42a3      	cmp	r3, r4
 8007914:	6862      	ldr	r2, [r4, #4]
 8007916:	d1dd      	bne.n	80078d4 <_malloc_r+0x8c>
 8007918:	f8c8 2000 	str.w	r2, [r8]
 800791c:	e7ec      	b.n	80078f8 <_malloc_r+0xb0>
 800791e:	4623      	mov	r3, r4
 8007920:	6864      	ldr	r4, [r4, #4]
 8007922:	e7ac      	b.n	800787e <_malloc_r+0x36>
 8007924:	4634      	mov	r4, r6
 8007926:	6876      	ldr	r6, [r6, #4]
 8007928:	e7b4      	b.n	8007894 <_malloc_r+0x4c>
 800792a:	4613      	mov	r3, r2
 800792c:	e7cc      	b.n	80078c8 <_malloc_r+0x80>
 800792e:	230c      	movs	r3, #12
 8007930:	4638      	mov	r0, r7
 8007932:	603b      	str	r3, [r7, #0]
 8007934:	f000 f80e 	bl	8007954 <__malloc_unlock>
 8007938:	e797      	b.n	800786a <_malloc_r+0x22>
 800793a:	6025      	str	r5, [r4, #0]
 800793c:	e7dc      	b.n	80078f8 <_malloc_r+0xb0>
 800793e:	605b      	str	r3, [r3, #4]
 8007940:	deff      	udf	#255	; 0xff
 8007942:	bf00      	nop
 8007944:	20000880 	.word	0x20000880

08007948 <__malloc_lock>:
 8007948:	4801      	ldr	r0, [pc, #4]	; (8007950 <__malloc_lock+0x8>)
 800794a:	f7ff b882 	b.w	8006a52 <__retarget_lock_acquire_recursive>
 800794e:	bf00      	nop
 8007950:	2000087c 	.word	0x2000087c

08007954 <__malloc_unlock>:
 8007954:	4801      	ldr	r0, [pc, #4]	; (800795c <__malloc_unlock+0x8>)
 8007956:	f7ff b87d 	b.w	8006a54 <__retarget_lock_release_recursive>
 800795a:	bf00      	nop
 800795c:	2000087c 	.word	0x2000087c

08007960 <_Balloc>:
 8007960:	b570      	push	{r4, r5, r6, lr}
 8007962:	69c6      	ldr	r6, [r0, #28]
 8007964:	4604      	mov	r4, r0
 8007966:	460d      	mov	r5, r1
 8007968:	b976      	cbnz	r6, 8007988 <_Balloc+0x28>
 800796a:	2010      	movs	r0, #16
 800796c:	f7ff ff44 	bl	80077f8 <malloc>
 8007970:	4602      	mov	r2, r0
 8007972:	61e0      	str	r0, [r4, #28]
 8007974:	b920      	cbnz	r0, 8007980 <_Balloc+0x20>
 8007976:	216b      	movs	r1, #107	; 0x6b
 8007978:	4b17      	ldr	r3, [pc, #92]	; (80079d8 <_Balloc+0x78>)
 800797a:	4818      	ldr	r0, [pc, #96]	; (80079dc <_Balloc+0x7c>)
 800797c:	f000 fd94 	bl	80084a8 <__assert_func>
 8007980:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007984:	6006      	str	r6, [r0, #0]
 8007986:	60c6      	str	r6, [r0, #12]
 8007988:	69e6      	ldr	r6, [r4, #28]
 800798a:	68f3      	ldr	r3, [r6, #12]
 800798c:	b183      	cbz	r3, 80079b0 <_Balloc+0x50>
 800798e:	69e3      	ldr	r3, [r4, #28]
 8007990:	68db      	ldr	r3, [r3, #12]
 8007992:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007996:	b9b8      	cbnz	r0, 80079c8 <_Balloc+0x68>
 8007998:	2101      	movs	r1, #1
 800799a:	fa01 f605 	lsl.w	r6, r1, r5
 800799e:	1d72      	adds	r2, r6, #5
 80079a0:	4620      	mov	r0, r4
 80079a2:	0092      	lsls	r2, r2, #2
 80079a4:	f000 fd9e 	bl	80084e4 <_calloc_r>
 80079a8:	b160      	cbz	r0, 80079c4 <_Balloc+0x64>
 80079aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80079ae:	e00e      	b.n	80079ce <_Balloc+0x6e>
 80079b0:	2221      	movs	r2, #33	; 0x21
 80079b2:	2104      	movs	r1, #4
 80079b4:	4620      	mov	r0, r4
 80079b6:	f000 fd95 	bl	80084e4 <_calloc_r>
 80079ba:	69e3      	ldr	r3, [r4, #28]
 80079bc:	60f0      	str	r0, [r6, #12]
 80079be:	68db      	ldr	r3, [r3, #12]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d1e4      	bne.n	800798e <_Balloc+0x2e>
 80079c4:	2000      	movs	r0, #0
 80079c6:	bd70      	pop	{r4, r5, r6, pc}
 80079c8:	6802      	ldr	r2, [r0, #0]
 80079ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80079ce:	2300      	movs	r3, #0
 80079d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80079d4:	e7f7      	b.n	80079c6 <_Balloc+0x66>
 80079d6:	bf00      	nop
 80079d8:	0800a96b 	.word	0x0800a96b
 80079dc:	0800a9eb 	.word	0x0800a9eb

080079e0 <_Bfree>:
 80079e0:	b570      	push	{r4, r5, r6, lr}
 80079e2:	69c6      	ldr	r6, [r0, #28]
 80079e4:	4605      	mov	r5, r0
 80079e6:	460c      	mov	r4, r1
 80079e8:	b976      	cbnz	r6, 8007a08 <_Bfree+0x28>
 80079ea:	2010      	movs	r0, #16
 80079ec:	f7ff ff04 	bl	80077f8 <malloc>
 80079f0:	4602      	mov	r2, r0
 80079f2:	61e8      	str	r0, [r5, #28]
 80079f4:	b920      	cbnz	r0, 8007a00 <_Bfree+0x20>
 80079f6:	218f      	movs	r1, #143	; 0x8f
 80079f8:	4b08      	ldr	r3, [pc, #32]	; (8007a1c <_Bfree+0x3c>)
 80079fa:	4809      	ldr	r0, [pc, #36]	; (8007a20 <_Bfree+0x40>)
 80079fc:	f000 fd54 	bl	80084a8 <__assert_func>
 8007a00:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a04:	6006      	str	r6, [r0, #0]
 8007a06:	60c6      	str	r6, [r0, #12]
 8007a08:	b13c      	cbz	r4, 8007a1a <_Bfree+0x3a>
 8007a0a:	69eb      	ldr	r3, [r5, #28]
 8007a0c:	6862      	ldr	r2, [r4, #4]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007a14:	6021      	str	r1, [r4, #0]
 8007a16:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	0800a96b 	.word	0x0800a96b
 8007a20:	0800a9eb 	.word	0x0800a9eb

08007a24 <__multadd>:
 8007a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a28:	4607      	mov	r7, r0
 8007a2a:	460c      	mov	r4, r1
 8007a2c:	461e      	mov	r6, r3
 8007a2e:	2000      	movs	r0, #0
 8007a30:	690d      	ldr	r5, [r1, #16]
 8007a32:	f101 0c14 	add.w	ip, r1, #20
 8007a36:	f8dc 3000 	ldr.w	r3, [ip]
 8007a3a:	3001      	adds	r0, #1
 8007a3c:	b299      	uxth	r1, r3
 8007a3e:	fb02 6101 	mla	r1, r2, r1, r6
 8007a42:	0c1e      	lsrs	r6, r3, #16
 8007a44:	0c0b      	lsrs	r3, r1, #16
 8007a46:	fb02 3306 	mla	r3, r2, r6, r3
 8007a4a:	b289      	uxth	r1, r1
 8007a4c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007a50:	4285      	cmp	r5, r0
 8007a52:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007a56:	f84c 1b04 	str.w	r1, [ip], #4
 8007a5a:	dcec      	bgt.n	8007a36 <__multadd+0x12>
 8007a5c:	b30e      	cbz	r6, 8007aa2 <__multadd+0x7e>
 8007a5e:	68a3      	ldr	r3, [r4, #8]
 8007a60:	42ab      	cmp	r3, r5
 8007a62:	dc19      	bgt.n	8007a98 <__multadd+0x74>
 8007a64:	6861      	ldr	r1, [r4, #4]
 8007a66:	4638      	mov	r0, r7
 8007a68:	3101      	adds	r1, #1
 8007a6a:	f7ff ff79 	bl	8007960 <_Balloc>
 8007a6e:	4680      	mov	r8, r0
 8007a70:	b928      	cbnz	r0, 8007a7e <__multadd+0x5a>
 8007a72:	4602      	mov	r2, r0
 8007a74:	21ba      	movs	r1, #186	; 0xba
 8007a76:	4b0c      	ldr	r3, [pc, #48]	; (8007aa8 <__multadd+0x84>)
 8007a78:	480c      	ldr	r0, [pc, #48]	; (8007aac <__multadd+0x88>)
 8007a7a:	f000 fd15 	bl	80084a8 <__assert_func>
 8007a7e:	6922      	ldr	r2, [r4, #16]
 8007a80:	f104 010c 	add.w	r1, r4, #12
 8007a84:	3202      	adds	r2, #2
 8007a86:	0092      	lsls	r2, r2, #2
 8007a88:	300c      	adds	r0, #12
 8007a8a:	f7fe fff2 	bl	8006a72 <memcpy>
 8007a8e:	4621      	mov	r1, r4
 8007a90:	4638      	mov	r0, r7
 8007a92:	f7ff ffa5 	bl	80079e0 <_Bfree>
 8007a96:	4644      	mov	r4, r8
 8007a98:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007a9c:	3501      	adds	r5, #1
 8007a9e:	615e      	str	r6, [r3, #20]
 8007aa0:	6125      	str	r5, [r4, #16]
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aa8:	0800a9da 	.word	0x0800a9da
 8007aac:	0800a9eb 	.word	0x0800a9eb

08007ab0 <__hi0bits>:
 8007ab0:	0c02      	lsrs	r2, r0, #16
 8007ab2:	0412      	lsls	r2, r2, #16
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	b9ca      	cbnz	r2, 8007aec <__hi0bits+0x3c>
 8007ab8:	0403      	lsls	r3, r0, #16
 8007aba:	2010      	movs	r0, #16
 8007abc:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8007ac0:	bf04      	itt	eq
 8007ac2:	021b      	lsleq	r3, r3, #8
 8007ac4:	3008      	addeq	r0, #8
 8007ac6:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8007aca:	bf04      	itt	eq
 8007acc:	011b      	lsleq	r3, r3, #4
 8007ace:	3004      	addeq	r0, #4
 8007ad0:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8007ad4:	bf04      	itt	eq
 8007ad6:	009b      	lsleq	r3, r3, #2
 8007ad8:	3002      	addeq	r0, #2
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	db05      	blt.n	8007aea <__hi0bits+0x3a>
 8007ade:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8007ae2:	f100 0001 	add.w	r0, r0, #1
 8007ae6:	bf08      	it	eq
 8007ae8:	2020      	moveq	r0, #32
 8007aea:	4770      	bx	lr
 8007aec:	2000      	movs	r0, #0
 8007aee:	e7e5      	b.n	8007abc <__hi0bits+0xc>

08007af0 <__lo0bits>:
 8007af0:	6803      	ldr	r3, [r0, #0]
 8007af2:	4602      	mov	r2, r0
 8007af4:	f013 0007 	ands.w	r0, r3, #7
 8007af8:	d00b      	beq.n	8007b12 <__lo0bits+0x22>
 8007afa:	07d9      	lsls	r1, r3, #31
 8007afc:	d421      	bmi.n	8007b42 <__lo0bits+0x52>
 8007afe:	0798      	lsls	r0, r3, #30
 8007b00:	bf49      	itett	mi
 8007b02:	085b      	lsrmi	r3, r3, #1
 8007b04:	089b      	lsrpl	r3, r3, #2
 8007b06:	2001      	movmi	r0, #1
 8007b08:	6013      	strmi	r3, [r2, #0]
 8007b0a:	bf5c      	itt	pl
 8007b0c:	2002      	movpl	r0, #2
 8007b0e:	6013      	strpl	r3, [r2, #0]
 8007b10:	4770      	bx	lr
 8007b12:	b299      	uxth	r1, r3
 8007b14:	b909      	cbnz	r1, 8007b1a <__lo0bits+0x2a>
 8007b16:	2010      	movs	r0, #16
 8007b18:	0c1b      	lsrs	r3, r3, #16
 8007b1a:	b2d9      	uxtb	r1, r3
 8007b1c:	b909      	cbnz	r1, 8007b22 <__lo0bits+0x32>
 8007b1e:	3008      	adds	r0, #8
 8007b20:	0a1b      	lsrs	r3, r3, #8
 8007b22:	0719      	lsls	r1, r3, #28
 8007b24:	bf04      	itt	eq
 8007b26:	091b      	lsreq	r3, r3, #4
 8007b28:	3004      	addeq	r0, #4
 8007b2a:	0799      	lsls	r1, r3, #30
 8007b2c:	bf04      	itt	eq
 8007b2e:	089b      	lsreq	r3, r3, #2
 8007b30:	3002      	addeq	r0, #2
 8007b32:	07d9      	lsls	r1, r3, #31
 8007b34:	d403      	bmi.n	8007b3e <__lo0bits+0x4e>
 8007b36:	085b      	lsrs	r3, r3, #1
 8007b38:	f100 0001 	add.w	r0, r0, #1
 8007b3c:	d003      	beq.n	8007b46 <__lo0bits+0x56>
 8007b3e:	6013      	str	r3, [r2, #0]
 8007b40:	4770      	bx	lr
 8007b42:	2000      	movs	r0, #0
 8007b44:	4770      	bx	lr
 8007b46:	2020      	movs	r0, #32
 8007b48:	4770      	bx	lr
	...

08007b4c <__i2b>:
 8007b4c:	b510      	push	{r4, lr}
 8007b4e:	460c      	mov	r4, r1
 8007b50:	2101      	movs	r1, #1
 8007b52:	f7ff ff05 	bl	8007960 <_Balloc>
 8007b56:	4602      	mov	r2, r0
 8007b58:	b928      	cbnz	r0, 8007b66 <__i2b+0x1a>
 8007b5a:	f240 1145 	movw	r1, #325	; 0x145
 8007b5e:	4b04      	ldr	r3, [pc, #16]	; (8007b70 <__i2b+0x24>)
 8007b60:	4804      	ldr	r0, [pc, #16]	; (8007b74 <__i2b+0x28>)
 8007b62:	f000 fca1 	bl	80084a8 <__assert_func>
 8007b66:	2301      	movs	r3, #1
 8007b68:	6144      	str	r4, [r0, #20]
 8007b6a:	6103      	str	r3, [r0, #16]
 8007b6c:	bd10      	pop	{r4, pc}
 8007b6e:	bf00      	nop
 8007b70:	0800a9da 	.word	0x0800a9da
 8007b74:	0800a9eb 	.word	0x0800a9eb

08007b78 <__multiply>:
 8007b78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b7c:	4691      	mov	r9, r2
 8007b7e:	690a      	ldr	r2, [r1, #16]
 8007b80:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007b84:	460c      	mov	r4, r1
 8007b86:	429a      	cmp	r2, r3
 8007b88:	bfbe      	ittt	lt
 8007b8a:	460b      	movlt	r3, r1
 8007b8c:	464c      	movlt	r4, r9
 8007b8e:	4699      	movlt	r9, r3
 8007b90:	6927      	ldr	r7, [r4, #16]
 8007b92:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007b96:	68a3      	ldr	r3, [r4, #8]
 8007b98:	6861      	ldr	r1, [r4, #4]
 8007b9a:	eb07 060a 	add.w	r6, r7, sl
 8007b9e:	42b3      	cmp	r3, r6
 8007ba0:	b085      	sub	sp, #20
 8007ba2:	bfb8      	it	lt
 8007ba4:	3101      	addlt	r1, #1
 8007ba6:	f7ff fedb 	bl	8007960 <_Balloc>
 8007baa:	b930      	cbnz	r0, 8007bba <__multiply+0x42>
 8007bac:	4602      	mov	r2, r0
 8007bae:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8007bb2:	4b43      	ldr	r3, [pc, #268]	; (8007cc0 <__multiply+0x148>)
 8007bb4:	4843      	ldr	r0, [pc, #268]	; (8007cc4 <__multiply+0x14c>)
 8007bb6:	f000 fc77 	bl	80084a8 <__assert_func>
 8007bba:	f100 0514 	add.w	r5, r0, #20
 8007bbe:	462b      	mov	r3, r5
 8007bc0:	2200      	movs	r2, #0
 8007bc2:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007bc6:	4543      	cmp	r3, r8
 8007bc8:	d321      	bcc.n	8007c0e <__multiply+0x96>
 8007bca:	f104 0314 	add.w	r3, r4, #20
 8007bce:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007bd2:	f109 0314 	add.w	r3, r9, #20
 8007bd6:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007bda:	9202      	str	r2, [sp, #8]
 8007bdc:	1b3a      	subs	r2, r7, r4
 8007bde:	3a15      	subs	r2, #21
 8007be0:	f022 0203 	bic.w	r2, r2, #3
 8007be4:	3204      	adds	r2, #4
 8007be6:	f104 0115 	add.w	r1, r4, #21
 8007bea:	428f      	cmp	r7, r1
 8007bec:	bf38      	it	cc
 8007bee:	2204      	movcc	r2, #4
 8007bf0:	9201      	str	r2, [sp, #4]
 8007bf2:	9a02      	ldr	r2, [sp, #8]
 8007bf4:	9303      	str	r3, [sp, #12]
 8007bf6:	429a      	cmp	r2, r3
 8007bf8:	d80c      	bhi.n	8007c14 <__multiply+0x9c>
 8007bfa:	2e00      	cmp	r6, #0
 8007bfc:	dd03      	ble.n	8007c06 <__multiply+0x8e>
 8007bfe:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d05a      	beq.n	8007cbc <__multiply+0x144>
 8007c06:	6106      	str	r6, [r0, #16]
 8007c08:	b005      	add	sp, #20
 8007c0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c0e:	f843 2b04 	str.w	r2, [r3], #4
 8007c12:	e7d8      	b.n	8007bc6 <__multiply+0x4e>
 8007c14:	f8b3 a000 	ldrh.w	sl, [r3]
 8007c18:	f1ba 0f00 	cmp.w	sl, #0
 8007c1c:	d023      	beq.n	8007c66 <__multiply+0xee>
 8007c1e:	46a9      	mov	r9, r5
 8007c20:	f04f 0c00 	mov.w	ip, #0
 8007c24:	f104 0e14 	add.w	lr, r4, #20
 8007c28:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007c2c:	f8d9 1000 	ldr.w	r1, [r9]
 8007c30:	fa1f fb82 	uxth.w	fp, r2
 8007c34:	b289      	uxth	r1, r1
 8007c36:	fb0a 110b 	mla	r1, sl, fp, r1
 8007c3a:	4461      	add	r1, ip
 8007c3c:	f8d9 c000 	ldr.w	ip, [r9]
 8007c40:	0c12      	lsrs	r2, r2, #16
 8007c42:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8007c46:	fb0a c202 	mla	r2, sl, r2, ip
 8007c4a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007c4e:	b289      	uxth	r1, r1
 8007c50:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c54:	4577      	cmp	r7, lr
 8007c56:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007c5a:	f849 1b04 	str.w	r1, [r9], #4
 8007c5e:	d8e3      	bhi.n	8007c28 <__multiply+0xb0>
 8007c60:	9a01      	ldr	r2, [sp, #4]
 8007c62:	f845 c002 	str.w	ip, [r5, r2]
 8007c66:	9a03      	ldr	r2, [sp, #12]
 8007c68:	3304      	adds	r3, #4
 8007c6a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007c6e:	f1b9 0f00 	cmp.w	r9, #0
 8007c72:	d021      	beq.n	8007cb8 <__multiply+0x140>
 8007c74:	46ae      	mov	lr, r5
 8007c76:	f04f 0a00 	mov.w	sl, #0
 8007c7a:	6829      	ldr	r1, [r5, #0]
 8007c7c:	f104 0c14 	add.w	ip, r4, #20
 8007c80:	f8bc b000 	ldrh.w	fp, [ip]
 8007c84:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007c88:	b289      	uxth	r1, r1
 8007c8a:	fb09 220b 	mla	r2, r9, fp, r2
 8007c8e:	4452      	add	r2, sl
 8007c90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007c94:	f84e 1b04 	str.w	r1, [lr], #4
 8007c98:	f85c 1b04 	ldr.w	r1, [ip], #4
 8007c9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007ca0:	f8be 1000 	ldrh.w	r1, [lr]
 8007ca4:	4567      	cmp	r7, ip
 8007ca6:	fb09 110a 	mla	r1, r9, sl, r1
 8007caa:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8007cae:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007cb2:	d8e5      	bhi.n	8007c80 <__multiply+0x108>
 8007cb4:	9a01      	ldr	r2, [sp, #4]
 8007cb6:	50a9      	str	r1, [r5, r2]
 8007cb8:	3504      	adds	r5, #4
 8007cba:	e79a      	b.n	8007bf2 <__multiply+0x7a>
 8007cbc:	3e01      	subs	r6, #1
 8007cbe:	e79c      	b.n	8007bfa <__multiply+0x82>
 8007cc0:	0800a9da 	.word	0x0800a9da
 8007cc4:	0800a9eb 	.word	0x0800a9eb

08007cc8 <__pow5mult>:
 8007cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ccc:	4615      	mov	r5, r2
 8007cce:	f012 0203 	ands.w	r2, r2, #3
 8007cd2:	4606      	mov	r6, r0
 8007cd4:	460f      	mov	r7, r1
 8007cd6:	d007      	beq.n	8007ce8 <__pow5mult+0x20>
 8007cd8:	4c25      	ldr	r4, [pc, #148]	; (8007d70 <__pow5mult+0xa8>)
 8007cda:	3a01      	subs	r2, #1
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007ce2:	f7ff fe9f 	bl	8007a24 <__multadd>
 8007ce6:	4607      	mov	r7, r0
 8007ce8:	10ad      	asrs	r5, r5, #2
 8007cea:	d03d      	beq.n	8007d68 <__pow5mult+0xa0>
 8007cec:	69f4      	ldr	r4, [r6, #28]
 8007cee:	b97c      	cbnz	r4, 8007d10 <__pow5mult+0x48>
 8007cf0:	2010      	movs	r0, #16
 8007cf2:	f7ff fd81 	bl	80077f8 <malloc>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	61f0      	str	r0, [r6, #28]
 8007cfa:	b928      	cbnz	r0, 8007d08 <__pow5mult+0x40>
 8007cfc:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007d00:	4b1c      	ldr	r3, [pc, #112]	; (8007d74 <__pow5mult+0xac>)
 8007d02:	481d      	ldr	r0, [pc, #116]	; (8007d78 <__pow5mult+0xb0>)
 8007d04:	f000 fbd0 	bl	80084a8 <__assert_func>
 8007d08:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007d0c:	6004      	str	r4, [r0, #0]
 8007d0e:	60c4      	str	r4, [r0, #12]
 8007d10:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007d14:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007d18:	b94c      	cbnz	r4, 8007d2e <__pow5mult+0x66>
 8007d1a:	f240 2171 	movw	r1, #625	; 0x271
 8007d1e:	4630      	mov	r0, r6
 8007d20:	f7ff ff14 	bl	8007b4c <__i2b>
 8007d24:	2300      	movs	r3, #0
 8007d26:	4604      	mov	r4, r0
 8007d28:	f8c8 0008 	str.w	r0, [r8, #8]
 8007d2c:	6003      	str	r3, [r0, #0]
 8007d2e:	f04f 0900 	mov.w	r9, #0
 8007d32:	07eb      	lsls	r3, r5, #31
 8007d34:	d50a      	bpl.n	8007d4c <__pow5mult+0x84>
 8007d36:	4639      	mov	r1, r7
 8007d38:	4622      	mov	r2, r4
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	f7ff ff1c 	bl	8007b78 <__multiply>
 8007d40:	4680      	mov	r8, r0
 8007d42:	4639      	mov	r1, r7
 8007d44:	4630      	mov	r0, r6
 8007d46:	f7ff fe4b 	bl	80079e0 <_Bfree>
 8007d4a:	4647      	mov	r7, r8
 8007d4c:	106d      	asrs	r5, r5, #1
 8007d4e:	d00b      	beq.n	8007d68 <__pow5mult+0xa0>
 8007d50:	6820      	ldr	r0, [r4, #0]
 8007d52:	b938      	cbnz	r0, 8007d64 <__pow5mult+0x9c>
 8007d54:	4622      	mov	r2, r4
 8007d56:	4621      	mov	r1, r4
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f7ff ff0d 	bl	8007b78 <__multiply>
 8007d5e:	6020      	str	r0, [r4, #0]
 8007d60:	f8c0 9000 	str.w	r9, [r0]
 8007d64:	4604      	mov	r4, r0
 8007d66:	e7e4      	b.n	8007d32 <__pow5mult+0x6a>
 8007d68:	4638      	mov	r0, r7
 8007d6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d6e:	bf00      	nop
 8007d70:	0800ab38 	.word	0x0800ab38
 8007d74:	0800a96b 	.word	0x0800a96b
 8007d78:	0800a9eb 	.word	0x0800a9eb

08007d7c <__lshift>:
 8007d7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d80:	460c      	mov	r4, r1
 8007d82:	4607      	mov	r7, r0
 8007d84:	4691      	mov	r9, r2
 8007d86:	6923      	ldr	r3, [r4, #16]
 8007d88:	6849      	ldr	r1, [r1, #4]
 8007d8a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007d8e:	68a3      	ldr	r3, [r4, #8]
 8007d90:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007d94:	f108 0601 	add.w	r6, r8, #1
 8007d98:	42b3      	cmp	r3, r6
 8007d9a:	db0b      	blt.n	8007db4 <__lshift+0x38>
 8007d9c:	4638      	mov	r0, r7
 8007d9e:	f7ff fddf 	bl	8007960 <_Balloc>
 8007da2:	4605      	mov	r5, r0
 8007da4:	b948      	cbnz	r0, 8007dba <__lshift+0x3e>
 8007da6:	4602      	mov	r2, r0
 8007da8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8007dac:	4b27      	ldr	r3, [pc, #156]	; (8007e4c <__lshift+0xd0>)
 8007dae:	4828      	ldr	r0, [pc, #160]	; (8007e50 <__lshift+0xd4>)
 8007db0:	f000 fb7a 	bl	80084a8 <__assert_func>
 8007db4:	3101      	adds	r1, #1
 8007db6:	005b      	lsls	r3, r3, #1
 8007db8:	e7ee      	b.n	8007d98 <__lshift+0x1c>
 8007dba:	2300      	movs	r3, #0
 8007dbc:	f100 0114 	add.w	r1, r0, #20
 8007dc0:	f100 0210 	add.w	r2, r0, #16
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	4553      	cmp	r3, sl
 8007dc8:	db33      	blt.n	8007e32 <__lshift+0xb6>
 8007dca:	6920      	ldr	r0, [r4, #16]
 8007dcc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007dd0:	f104 0314 	add.w	r3, r4, #20
 8007dd4:	f019 091f 	ands.w	r9, r9, #31
 8007dd8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ddc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007de0:	d02b      	beq.n	8007e3a <__lshift+0xbe>
 8007de2:	468a      	mov	sl, r1
 8007de4:	2200      	movs	r2, #0
 8007de6:	f1c9 0e20 	rsb	lr, r9, #32
 8007dea:	6818      	ldr	r0, [r3, #0]
 8007dec:	fa00 f009 	lsl.w	r0, r0, r9
 8007df0:	4310      	orrs	r0, r2
 8007df2:	f84a 0b04 	str.w	r0, [sl], #4
 8007df6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007dfa:	459c      	cmp	ip, r3
 8007dfc:	fa22 f20e 	lsr.w	r2, r2, lr
 8007e00:	d8f3      	bhi.n	8007dea <__lshift+0x6e>
 8007e02:	ebac 0304 	sub.w	r3, ip, r4
 8007e06:	3b15      	subs	r3, #21
 8007e08:	f023 0303 	bic.w	r3, r3, #3
 8007e0c:	3304      	adds	r3, #4
 8007e0e:	f104 0015 	add.w	r0, r4, #21
 8007e12:	4584      	cmp	ip, r0
 8007e14:	bf38      	it	cc
 8007e16:	2304      	movcc	r3, #4
 8007e18:	50ca      	str	r2, [r1, r3]
 8007e1a:	b10a      	cbz	r2, 8007e20 <__lshift+0xa4>
 8007e1c:	f108 0602 	add.w	r6, r8, #2
 8007e20:	3e01      	subs	r6, #1
 8007e22:	4638      	mov	r0, r7
 8007e24:	4621      	mov	r1, r4
 8007e26:	612e      	str	r6, [r5, #16]
 8007e28:	f7ff fdda 	bl	80079e0 <_Bfree>
 8007e2c:	4628      	mov	r0, r5
 8007e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e32:	f842 0f04 	str.w	r0, [r2, #4]!
 8007e36:	3301      	adds	r3, #1
 8007e38:	e7c5      	b.n	8007dc6 <__lshift+0x4a>
 8007e3a:	3904      	subs	r1, #4
 8007e3c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e40:	459c      	cmp	ip, r3
 8007e42:	f841 2f04 	str.w	r2, [r1, #4]!
 8007e46:	d8f9      	bhi.n	8007e3c <__lshift+0xc0>
 8007e48:	e7ea      	b.n	8007e20 <__lshift+0xa4>
 8007e4a:	bf00      	nop
 8007e4c:	0800a9da 	.word	0x0800a9da
 8007e50:	0800a9eb 	.word	0x0800a9eb

08007e54 <__mcmp>:
 8007e54:	4603      	mov	r3, r0
 8007e56:	690a      	ldr	r2, [r1, #16]
 8007e58:	6900      	ldr	r0, [r0, #16]
 8007e5a:	b530      	push	{r4, r5, lr}
 8007e5c:	1a80      	subs	r0, r0, r2
 8007e5e:	d10d      	bne.n	8007e7c <__mcmp+0x28>
 8007e60:	3314      	adds	r3, #20
 8007e62:	3114      	adds	r1, #20
 8007e64:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8007e68:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007e6c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007e70:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007e74:	4295      	cmp	r5, r2
 8007e76:	d002      	beq.n	8007e7e <__mcmp+0x2a>
 8007e78:	d304      	bcc.n	8007e84 <__mcmp+0x30>
 8007e7a:	2001      	movs	r0, #1
 8007e7c:	bd30      	pop	{r4, r5, pc}
 8007e7e:	42a3      	cmp	r3, r4
 8007e80:	d3f4      	bcc.n	8007e6c <__mcmp+0x18>
 8007e82:	e7fb      	b.n	8007e7c <__mcmp+0x28>
 8007e84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e88:	e7f8      	b.n	8007e7c <__mcmp+0x28>
	...

08007e8c <__mdiff>:
 8007e8c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e90:	460d      	mov	r5, r1
 8007e92:	4607      	mov	r7, r0
 8007e94:	4611      	mov	r1, r2
 8007e96:	4628      	mov	r0, r5
 8007e98:	4614      	mov	r4, r2
 8007e9a:	f7ff ffdb 	bl	8007e54 <__mcmp>
 8007e9e:	1e06      	subs	r6, r0, #0
 8007ea0:	d111      	bne.n	8007ec6 <__mdiff+0x3a>
 8007ea2:	4631      	mov	r1, r6
 8007ea4:	4638      	mov	r0, r7
 8007ea6:	f7ff fd5b 	bl	8007960 <_Balloc>
 8007eaa:	4602      	mov	r2, r0
 8007eac:	b928      	cbnz	r0, 8007eba <__mdiff+0x2e>
 8007eae:	f240 2137 	movw	r1, #567	; 0x237
 8007eb2:	4b3a      	ldr	r3, [pc, #232]	; (8007f9c <__mdiff+0x110>)
 8007eb4:	483a      	ldr	r0, [pc, #232]	; (8007fa0 <__mdiff+0x114>)
 8007eb6:	f000 faf7 	bl	80084a8 <__assert_func>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8007ec0:	4610      	mov	r0, r2
 8007ec2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007ec6:	bfa4      	itt	ge
 8007ec8:	4623      	movge	r3, r4
 8007eca:	462c      	movge	r4, r5
 8007ecc:	4638      	mov	r0, r7
 8007ece:	6861      	ldr	r1, [r4, #4]
 8007ed0:	bfa6      	itte	ge
 8007ed2:	461d      	movge	r5, r3
 8007ed4:	2600      	movge	r6, #0
 8007ed6:	2601      	movlt	r6, #1
 8007ed8:	f7ff fd42 	bl	8007960 <_Balloc>
 8007edc:	4602      	mov	r2, r0
 8007ede:	b918      	cbnz	r0, 8007ee8 <__mdiff+0x5c>
 8007ee0:	f240 2145 	movw	r1, #581	; 0x245
 8007ee4:	4b2d      	ldr	r3, [pc, #180]	; (8007f9c <__mdiff+0x110>)
 8007ee6:	e7e5      	b.n	8007eb4 <__mdiff+0x28>
 8007ee8:	f102 0814 	add.w	r8, r2, #20
 8007eec:	46c2      	mov	sl, r8
 8007eee:	f04f 0c00 	mov.w	ip, #0
 8007ef2:	6927      	ldr	r7, [r4, #16]
 8007ef4:	60c6      	str	r6, [r0, #12]
 8007ef6:	692e      	ldr	r6, [r5, #16]
 8007ef8:	f104 0014 	add.w	r0, r4, #20
 8007efc:	f105 0914 	add.w	r9, r5, #20
 8007f00:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8007f04:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007f08:	3410      	adds	r4, #16
 8007f0a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 8007f0e:	f859 3b04 	ldr.w	r3, [r9], #4
 8007f12:	fa1f f18b 	uxth.w	r1, fp
 8007f16:	4461      	add	r1, ip
 8007f18:	fa1f fc83 	uxth.w	ip, r3
 8007f1c:	0c1b      	lsrs	r3, r3, #16
 8007f1e:	eba1 010c 	sub.w	r1, r1, ip
 8007f22:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007f26:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007f2a:	b289      	uxth	r1, r1
 8007f2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007f30:	454e      	cmp	r6, r9
 8007f32:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8007f36:	f84a 1b04 	str.w	r1, [sl], #4
 8007f3a:	d8e6      	bhi.n	8007f0a <__mdiff+0x7e>
 8007f3c:	1b73      	subs	r3, r6, r5
 8007f3e:	3b15      	subs	r3, #21
 8007f40:	f023 0303 	bic.w	r3, r3, #3
 8007f44:	3515      	adds	r5, #21
 8007f46:	3304      	adds	r3, #4
 8007f48:	42ae      	cmp	r6, r5
 8007f4a:	bf38      	it	cc
 8007f4c:	2304      	movcc	r3, #4
 8007f4e:	4418      	add	r0, r3
 8007f50:	4443      	add	r3, r8
 8007f52:	461e      	mov	r6, r3
 8007f54:	4605      	mov	r5, r0
 8007f56:	4575      	cmp	r5, lr
 8007f58:	d30e      	bcc.n	8007f78 <__mdiff+0xec>
 8007f5a:	f10e 0103 	add.w	r1, lr, #3
 8007f5e:	1a09      	subs	r1, r1, r0
 8007f60:	f021 0103 	bic.w	r1, r1, #3
 8007f64:	3803      	subs	r0, #3
 8007f66:	4586      	cmp	lr, r0
 8007f68:	bf38      	it	cc
 8007f6a:	2100      	movcc	r1, #0
 8007f6c:	440b      	add	r3, r1
 8007f6e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007f72:	b189      	cbz	r1, 8007f98 <__mdiff+0x10c>
 8007f74:	6117      	str	r7, [r2, #16]
 8007f76:	e7a3      	b.n	8007ec0 <__mdiff+0x34>
 8007f78:	f855 8b04 	ldr.w	r8, [r5], #4
 8007f7c:	fa1f f188 	uxth.w	r1, r8
 8007f80:	4461      	add	r1, ip
 8007f82:	140c      	asrs	r4, r1, #16
 8007f84:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8007f88:	b289      	uxth	r1, r1
 8007f8a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8007f8e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8007f92:	f846 1b04 	str.w	r1, [r6], #4
 8007f96:	e7de      	b.n	8007f56 <__mdiff+0xca>
 8007f98:	3f01      	subs	r7, #1
 8007f9a:	e7e8      	b.n	8007f6e <__mdiff+0xe2>
 8007f9c:	0800a9da 	.word	0x0800a9da
 8007fa0:	0800a9eb 	.word	0x0800a9eb

08007fa4 <__d2b>:
 8007fa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fa6:	2101      	movs	r1, #1
 8007fa8:	4617      	mov	r7, r2
 8007faa:	461c      	mov	r4, r3
 8007fac:	9e08      	ldr	r6, [sp, #32]
 8007fae:	f7ff fcd7 	bl	8007960 <_Balloc>
 8007fb2:	4605      	mov	r5, r0
 8007fb4:	b930      	cbnz	r0, 8007fc4 <__d2b+0x20>
 8007fb6:	4602      	mov	r2, r0
 8007fb8:	f240 310f 	movw	r1, #783	; 0x30f
 8007fbc:	4b22      	ldr	r3, [pc, #136]	; (8008048 <__d2b+0xa4>)
 8007fbe:	4823      	ldr	r0, [pc, #140]	; (800804c <__d2b+0xa8>)
 8007fc0:	f000 fa72 	bl	80084a8 <__assert_func>
 8007fc4:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8007fc8:	f3c4 540a 	ubfx	r4, r4, #20, #11
 8007fcc:	bb24      	cbnz	r4, 8008018 <__d2b+0x74>
 8007fce:	2f00      	cmp	r7, #0
 8007fd0:	9301      	str	r3, [sp, #4]
 8007fd2:	d026      	beq.n	8008022 <__d2b+0x7e>
 8007fd4:	4668      	mov	r0, sp
 8007fd6:	9700      	str	r7, [sp, #0]
 8007fd8:	f7ff fd8a 	bl	8007af0 <__lo0bits>
 8007fdc:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007fe0:	b1e8      	cbz	r0, 800801e <__d2b+0x7a>
 8007fe2:	f1c0 0320 	rsb	r3, r0, #32
 8007fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8007fea:	430b      	orrs	r3, r1
 8007fec:	40c2      	lsrs	r2, r0
 8007fee:	616b      	str	r3, [r5, #20]
 8007ff0:	9201      	str	r2, [sp, #4]
 8007ff2:	9b01      	ldr	r3, [sp, #4]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	bf14      	ite	ne
 8007ff8:	2102      	movne	r1, #2
 8007ffa:	2101      	moveq	r1, #1
 8007ffc:	61ab      	str	r3, [r5, #24]
 8007ffe:	6129      	str	r1, [r5, #16]
 8008000:	b1bc      	cbz	r4, 8008032 <__d2b+0x8e>
 8008002:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8008006:	4404      	add	r4, r0
 8008008:	6034      	str	r4, [r6, #0]
 800800a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800800e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008010:	6018      	str	r0, [r3, #0]
 8008012:	4628      	mov	r0, r5
 8008014:	b003      	add	sp, #12
 8008016:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008018:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800801c:	e7d7      	b.n	8007fce <__d2b+0x2a>
 800801e:	6169      	str	r1, [r5, #20]
 8008020:	e7e7      	b.n	8007ff2 <__d2b+0x4e>
 8008022:	a801      	add	r0, sp, #4
 8008024:	f7ff fd64 	bl	8007af0 <__lo0bits>
 8008028:	9b01      	ldr	r3, [sp, #4]
 800802a:	2101      	movs	r1, #1
 800802c:	616b      	str	r3, [r5, #20]
 800802e:	3020      	adds	r0, #32
 8008030:	e7e5      	b.n	8007ffe <__d2b+0x5a>
 8008032:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008036:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800803a:	6030      	str	r0, [r6, #0]
 800803c:	6918      	ldr	r0, [r3, #16]
 800803e:	f7ff fd37 	bl	8007ab0 <__hi0bits>
 8008042:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 8008046:	e7e2      	b.n	800800e <__d2b+0x6a>
 8008048:	0800a9da 	.word	0x0800a9da
 800804c:	0800a9eb 	.word	0x0800a9eb

08008050 <__ssputs_r>:
 8008050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008054:	461f      	mov	r7, r3
 8008056:	688e      	ldr	r6, [r1, #8]
 8008058:	4682      	mov	sl, r0
 800805a:	42be      	cmp	r6, r7
 800805c:	460c      	mov	r4, r1
 800805e:	4690      	mov	r8, r2
 8008060:	680b      	ldr	r3, [r1, #0]
 8008062:	d82c      	bhi.n	80080be <__ssputs_r+0x6e>
 8008064:	898a      	ldrh	r2, [r1, #12]
 8008066:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800806a:	d026      	beq.n	80080ba <__ssputs_r+0x6a>
 800806c:	6965      	ldr	r5, [r4, #20]
 800806e:	6909      	ldr	r1, [r1, #16]
 8008070:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008074:	eba3 0901 	sub.w	r9, r3, r1
 8008078:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800807c:	1c7b      	adds	r3, r7, #1
 800807e:	444b      	add	r3, r9
 8008080:	106d      	asrs	r5, r5, #1
 8008082:	429d      	cmp	r5, r3
 8008084:	bf38      	it	cc
 8008086:	461d      	movcc	r5, r3
 8008088:	0553      	lsls	r3, r2, #21
 800808a:	d527      	bpl.n	80080dc <__ssputs_r+0x8c>
 800808c:	4629      	mov	r1, r5
 800808e:	f7ff fbdb 	bl	8007848 <_malloc_r>
 8008092:	4606      	mov	r6, r0
 8008094:	b360      	cbz	r0, 80080f0 <__ssputs_r+0xa0>
 8008096:	464a      	mov	r2, r9
 8008098:	6921      	ldr	r1, [r4, #16]
 800809a:	f7fe fcea 	bl	8006a72 <memcpy>
 800809e:	89a3      	ldrh	r3, [r4, #12]
 80080a0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80080a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	6126      	str	r6, [r4, #16]
 80080ac:	444e      	add	r6, r9
 80080ae:	6026      	str	r6, [r4, #0]
 80080b0:	463e      	mov	r6, r7
 80080b2:	6165      	str	r5, [r4, #20]
 80080b4:	eba5 0509 	sub.w	r5, r5, r9
 80080b8:	60a5      	str	r5, [r4, #8]
 80080ba:	42be      	cmp	r6, r7
 80080bc:	d900      	bls.n	80080c0 <__ssputs_r+0x70>
 80080be:	463e      	mov	r6, r7
 80080c0:	4632      	mov	r2, r6
 80080c2:	4641      	mov	r1, r8
 80080c4:	6820      	ldr	r0, [r4, #0]
 80080c6:	f000 f9c5 	bl	8008454 <memmove>
 80080ca:	2000      	movs	r0, #0
 80080cc:	68a3      	ldr	r3, [r4, #8]
 80080ce:	1b9b      	subs	r3, r3, r6
 80080d0:	60a3      	str	r3, [r4, #8]
 80080d2:	6823      	ldr	r3, [r4, #0]
 80080d4:	4433      	add	r3, r6
 80080d6:	6023      	str	r3, [r4, #0]
 80080d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080dc:	462a      	mov	r2, r5
 80080de:	f000 fa27 	bl	8008530 <_realloc_r>
 80080e2:	4606      	mov	r6, r0
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d1e0      	bne.n	80080aa <__ssputs_r+0x5a>
 80080e8:	4650      	mov	r0, sl
 80080ea:	6921      	ldr	r1, [r4, #16]
 80080ec:	f7ff fb3c 	bl	8007768 <_free_r>
 80080f0:	230c      	movs	r3, #12
 80080f2:	f8ca 3000 	str.w	r3, [sl]
 80080f6:	89a3      	ldrh	r3, [r4, #12]
 80080f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008100:	81a3      	strh	r3, [r4, #12]
 8008102:	e7e9      	b.n	80080d8 <__ssputs_r+0x88>

08008104 <_svfiprintf_r>:
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	4698      	mov	r8, r3
 800810a:	898b      	ldrh	r3, [r1, #12]
 800810c:	4607      	mov	r7, r0
 800810e:	061b      	lsls	r3, r3, #24
 8008110:	460d      	mov	r5, r1
 8008112:	4614      	mov	r4, r2
 8008114:	b09d      	sub	sp, #116	; 0x74
 8008116:	d50e      	bpl.n	8008136 <_svfiprintf_r+0x32>
 8008118:	690b      	ldr	r3, [r1, #16]
 800811a:	b963      	cbnz	r3, 8008136 <_svfiprintf_r+0x32>
 800811c:	2140      	movs	r1, #64	; 0x40
 800811e:	f7ff fb93 	bl	8007848 <_malloc_r>
 8008122:	6028      	str	r0, [r5, #0]
 8008124:	6128      	str	r0, [r5, #16]
 8008126:	b920      	cbnz	r0, 8008132 <_svfiprintf_r+0x2e>
 8008128:	230c      	movs	r3, #12
 800812a:	603b      	str	r3, [r7, #0]
 800812c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008130:	e0d0      	b.n	80082d4 <_svfiprintf_r+0x1d0>
 8008132:	2340      	movs	r3, #64	; 0x40
 8008134:	616b      	str	r3, [r5, #20]
 8008136:	2300      	movs	r3, #0
 8008138:	9309      	str	r3, [sp, #36]	; 0x24
 800813a:	2320      	movs	r3, #32
 800813c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008140:	2330      	movs	r3, #48	; 0x30
 8008142:	f04f 0901 	mov.w	r9, #1
 8008146:	f8cd 800c 	str.w	r8, [sp, #12]
 800814a:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 80082ec <_svfiprintf_r+0x1e8>
 800814e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008152:	4623      	mov	r3, r4
 8008154:	469a      	mov	sl, r3
 8008156:	f813 2b01 	ldrb.w	r2, [r3], #1
 800815a:	b10a      	cbz	r2, 8008160 <_svfiprintf_r+0x5c>
 800815c:	2a25      	cmp	r2, #37	; 0x25
 800815e:	d1f9      	bne.n	8008154 <_svfiprintf_r+0x50>
 8008160:	ebba 0b04 	subs.w	fp, sl, r4
 8008164:	d00b      	beq.n	800817e <_svfiprintf_r+0x7a>
 8008166:	465b      	mov	r3, fp
 8008168:	4622      	mov	r2, r4
 800816a:	4629      	mov	r1, r5
 800816c:	4638      	mov	r0, r7
 800816e:	f7ff ff6f 	bl	8008050 <__ssputs_r>
 8008172:	3001      	adds	r0, #1
 8008174:	f000 80a9 	beq.w	80082ca <_svfiprintf_r+0x1c6>
 8008178:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800817a:	445a      	add	r2, fp
 800817c:	9209      	str	r2, [sp, #36]	; 0x24
 800817e:	f89a 3000 	ldrb.w	r3, [sl]
 8008182:	2b00      	cmp	r3, #0
 8008184:	f000 80a1 	beq.w	80082ca <_svfiprintf_r+0x1c6>
 8008188:	2300      	movs	r3, #0
 800818a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800818e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008192:	f10a 0a01 	add.w	sl, sl, #1
 8008196:	9304      	str	r3, [sp, #16]
 8008198:	9307      	str	r3, [sp, #28]
 800819a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800819e:	931a      	str	r3, [sp, #104]	; 0x68
 80081a0:	4654      	mov	r4, sl
 80081a2:	2205      	movs	r2, #5
 80081a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081a8:	4850      	ldr	r0, [pc, #320]	; (80082ec <_svfiprintf_r+0x1e8>)
 80081aa:	f7fe fc54 	bl	8006a56 <memchr>
 80081ae:	9a04      	ldr	r2, [sp, #16]
 80081b0:	b9d8      	cbnz	r0, 80081ea <_svfiprintf_r+0xe6>
 80081b2:	06d0      	lsls	r0, r2, #27
 80081b4:	bf44      	itt	mi
 80081b6:	2320      	movmi	r3, #32
 80081b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081bc:	0711      	lsls	r1, r2, #28
 80081be:	bf44      	itt	mi
 80081c0:	232b      	movmi	r3, #43	; 0x2b
 80081c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80081c6:	f89a 3000 	ldrb.w	r3, [sl]
 80081ca:	2b2a      	cmp	r3, #42	; 0x2a
 80081cc:	d015      	beq.n	80081fa <_svfiprintf_r+0xf6>
 80081ce:	4654      	mov	r4, sl
 80081d0:	2000      	movs	r0, #0
 80081d2:	f04f 0c0a 	mov.w	ip, #10
 80081d6:	9a07      	ldr	r2, [sp, #28]
 80081d8:	4621      	mov	r1, r4
 80081da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80081de:	3b30      	subs	r3, #48	; 0x30
 80081e0:	2b09      	cmp	r3, #9
 80081e2:	d94d      	bls.n	8008280 <_svfiprintf_r+0x17c>
 80081e4:	b1b0      	cbz	r0, 8008214 <_svfiprintf_r+0x110>
 80081e6:	9207      	str	r2, [sp, #28]
 80081e8:	e014      	b.n	8008214 <_svfiprintf_r+0x110>
 80081ea:	eba0 0308 	sub.w	r3, r0, r8
 80081ee:	fa09 f303 	lsl.w	r3, r9, r3
 80081f2:	4313      	orrs	r3, r2
 80081f4:	46a2      	mov	sl, r4
 80081f6:	9304      	str	r3, [sp, #16]
 80081f8:	e7d2      	b.n	80081a0 <_svfiprintf_r+0x9c>
 80081fa:	9b03      	ldr	r3, [sp, #12]
 80081fc:	1d19      	adds	r1, r3, #4
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	9103      	str	r1, [sp, #12]
 8008202:	2b00      	cmp	r3, #0
 8008204:	bfbb      	ittet	lt
 8008206:	425b      	neglt	r3, r3
 8008208:	f042 0202 	orrlt.w	r2, r2, #2
 800820c:	9307      	strge	r3, [sp, #28]
 800820e:	9307      	strlt	r3, [sp, #28]
 8008210:	bfb8      	it	lt
 8008212:	9204      	strlt	r2, [sp, #16]
 8008214:	7823      	ldrb	r3, [r4, #0]
 8008216:	2b2e      	cmp	r3, #46	; 0x2e
 8008218:	d10c      	bne.n	8008234 <_svfiprintf_r+0x130>
 800821a:	7863      	ldrb	r3, [r4, #1]
 800821c:	2b2a      	cmp	r3, #42	; 0x2a
 800821e:	d134      	bne.n	800828a <_svfiprintf_r+0x186>
 8008220:	9b03      	ldr	r3, [sp, #12]
 8008222:	3402      	adds	r4, #2
 8008224:	1d1a      	adds	r2, r3, #4
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	9203      	str	r2, [sp, #12]
 800822a:	2b00      	cmp	r3, #0
 800822c:	bfb8      	it	lt
 800822e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008232:	9305      	str	r3, [sp, #20]
 8008234:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 80082f0 <_svfiprintf_r+0x1ec>
 8008238:	2203      	movs	r2, #3
 800823a:	4650      	mov	r0, sl
 800823c:	7821      	ldrb	r1, [r4, #0]
 800823e:	f7fe fc0a 	bl	8006a56 <memchr>
 8008242:	b138      	cbz	r0, 8008254 <_svfiprintf_r+0x150>
 8008244:	2240      	movs	r2, #64	; 0x40
 8008246:	9b04      	ldr	r3, [sp, #16]
 8008248:	eba0 000a 	sub.w	r0, r0, sl
 800824c:	4082      	lsls	r2, r0
 800824e:	4313      	orrs	r3, r2
 8008250:	3401      	adds	r4, #1
 8008252:	9304      	str	r3, [sp, #16]
 8008254:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008258:	2206      	movs	r2, #6
 800825a:	4826      	ldr	r0, [pc, #152]	; (80082f4 <_svfiprintf_r+0x1f0>)
 800825c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008260:	f7fe fbf9 	bl	8006a56 <memchr>
 8008264:	2800      	cmp	r0, #0
 8008266:	d038      	beq.n	80082da <_svfiprintf_r+0x1d6>
 8008268:	4b23      	ldr	r3, [pc, #140]	; (80082f8 <_svfiprintf_r+0x1f4>)
 800826a:	bb1b      	cbnz	r3, 80082b4 <_svfiprintf_r+0x1b0>
 800826c:	9b03      	ldr	r3, [sp, #12]
 800826e:	3307      	adds	r3, #7
 8008270:	f023 0307 	bic.w	r3, r3, #7
 8008274:	3308      	adds	r3, #8
 8008276:	9303      	str	r3, [sp, #12]
 8008278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800827a:	4433      	add	r3, r6
 800827c:	9309      	str	r3, [sp, #36]	; 0x24
 800827e:	e768      	b.n	8008152 <_svfiprintf_r+0x4e>
 8008280:	460c      	mov	r4, r1
 8008282:	2001      	movs	r0, #1
 8008284:	fb0c 3202 	mla	r2, ip, r2, r3
 8008288:	e7a6      	b.n	80081d8 <_svfiprintf_r+0xd4>
 800828a:	2300      	movs	r3, #0
 800828c:	f04f 0c0a 	mov.w	ip, #10
 8008290:	4619      	mov	r1, r3
 8008292:	3401      	adds	r4, #1
 8008294:	9305      	str	r3, [sp, #20]
 8008296:	4620      	mov	r0, r4
 8008298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800829c:	3a30      	subs	r2, #48	; 0x30
 800829e:	2a09      	cmp	r2, #9
 80082a0:	d903      	bls.n	80082aa <_svfiprintf_r+0x1a6>
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d0c6      	beq.n	8008234 <_svfiprintf_r+0x130>
 80082a6:	9105      	str	r1, [sp, #20]
 80082a8:	e7c4      	b.n	8008234 <_svfiprintf_r+0x130>
 80082aa:	4604      	mov	r4, r0
 80082ac:	2301      	movs	r3, #1
 80082ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80082b2:	e7f0      	b.n	8008296 <_svfiprintf_r+0x192>
 80082b4:	ab03      	add	r3, sp, #12
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	462a      	mov	r2, r5
 80082ba:	4638      	mov	r0, r7
 80082bc:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <_svfiprintf_r+0x1f8>)
 80082be:	a904      	add	r1, sp, #16
 80082c0:	f7fd fe62 	bl	8005f88 <_printf_float>
 80082c4:	1c42      	adds	r2, r0, #1
 80082c6:	4606      	mov	r6, r0
 80082c8:	d1d6      	bne.n	8008278 <_svfiprintf_r+0x174>
 80082ca:	89ab      	ldrh	r3, [r5, #12]
 80082cc:	065b      	lsls	r3, r3, #25
 80082ce:	f53f af2d 	bmi.w	800812c <_svfiprintf_r+0x28>
 80082d2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80082d4:	b01d      	add	sp, #116	; 0x74
 80082d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082da:	ab03      	add	r3, sp, #12
 80082dc:	9300      	str	r3, [sp, #0]
 80082de:	462a      	mov	r2, r5
 80082e0:	4638      	mov	r0, r7
 80082e2:	4b06      	ldr	r3, [pc, #24]	; (80082fc <_svfiprintf_r+0x1f8>)
 80082e4:	a904      	add	r1, sp, #16
 80082e6:	f7fe f8ef 	bl	80064c8 <_printf_i>
 80082ea:	e7eb      	b.n	80082c4 <_svfiprintf_r+0x1c0>
 80082ec:	0800ab44 	.word	0x0800ab44
 80082f0:	0800ab4a 	.word	0x0800ab4a
 80082f4:	0800ab4e 	.word	0x0800ab4e
 80082f8:	08005f89 	.word	0x08005f89
 80082fc:	08008051 	.word	0x08008051

08008300 <__sflush_r>:
 8008300:	898a      	ldrh	r2, [r1, #12]
 8008302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008304:	4605      	mov	r5, r0
 8008306:	0710      	lsls	r0, r2, #28
 8008308:	460c      	mov	r4, r1
 800830a:	d457      	bmi.n	80083bc <__sflush_r+0xbc>
 800830c:	684b      	ldr	r3, [r1, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	dc04      	bgt.n	800831c <__sflush_r+0x1c>
 8008312:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008314:	2b00      	cmp	r3, #0
 8008316:	dc01      	bgt.n	800831c <__sflush_r+0x1c>
 8008318:	2000      	movs	r0, #0
 800831a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800831c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800831e:	2e00      	cmp	r6, #0
 8008320:	d0fa      	beq.n	8008318 <__sflush_r+0x18>
 8008322:	2300      	movs	r3, #0
 8008324:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008328:	682f      	ldr	r7, [r5, #0]
 800832a:	6a21      	ldr	r1, [r4, #32]
 800832c:	602b      	str	r3, [r5, #0]
 800832e:	d032      	beq.n	8008396 <__sflush_r+0x96>
 8008330:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008332:	89a3      	ldrh	r3, [r4, #12]
 8008334:	075a      	lsls	r2, r3, #29
 8008336:	d505      	bpl.n	8008344 <__sflush_r+0x44>
 8008338:	6863      	ldr	r3, [r4, #4]
 800833a:	1ac0      	subs	r0, r0, r3
 800833c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800833e:	b10b      	cbz	r3, 8008344 <__sflush_r+0x44>
 8008340:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008342:	1ac0      	subs	r0, r0, r3
 8008344:	2300      	movs	r3, #0
 8008346:	4602      	mov	r2, r0
 8008348:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800834a:	4628      	mov	r0, r5
 800834c:	6a21      	ldr	r1, [r4, #32]
 800834e:	47b0      	blx	r6
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	89a3      	ldrh	r3, [r4, #12]
 8008354:	d106      	bne.n	8008364 <__sflush_r+0x64>
 8008356:	6829      	ldr	r1, [r5, #0]
 8008358:	291d      	cmp	r1, #29
 800835a:	d82b      	bhi.n	80083b4 <__sflush_r+0xb4>
 800835c:	4a28      	ldr	r2, [pc, #160]	; (8008400 <__sflush_r+0x100>)
 800835e:	410a      	asrs	r2, r1
 8008360:	07d6      	lsls	r6, r2, #31
 8008362:	d427      	bmi.n	80083b4 <__sflush_r+0xb4>
 8008364:	2200      	movs	r2, #0
 8008366:	6062      	str	r2, [r4, #4]
 8008368:	6922      	ldr	r2, [r4, #16]
 800836a:	04d9      	lsls	r1, r3, #19
 800836c:	6022      	str	r2, [r4, #0]
 800836e:	d504      	bpl.n	800837a <__sflush_r+0x7a>
 8008370:	1c42      	adds	r2, r0, #1
 8008372:	d101      	bne.n	8008378 <__sflush_r+0x78>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b903      	cbnz	r3, 800837a <__sflush_r+0x7a>
 8008378:	6560      	str	r0, [r4, #84]	; 0x54
 800837a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800837c:	602f      	str	r7, [r5, #0]
 800837e:	2900      	cmp	r1, #0
 8008380:	d0ca      	beq.n	8008318 <__sflush_r+0x18>
 8008382:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008386:	4299      	cmp	r1, r3
 8008388:	d002      	beq.n	8008390 <__sflush_r+0x90>
 800838a:	4628      	mov	r0, r5
 800838c:	f7ff f9ec 	bl	8007768 <_free_r>
 8008390:	2000      	movs	r0, #0
 8008392:	6360      	str	r0, [r4, #52]	; 0x34
 8008394:	e7c1      	b.n	800831a <__sflush_r+0x1a>
 8008396:	2301      	movs	r3, #1
 8008398:	4628      	mov	r0, r5
 800839a:	47b0      	blx	r6
 800839c:	1c41      	adds	r1, r0, #1
 800839e:	d1c8      	bne.n	8008332 <__sflush_r+0x32>
 80083a0:	682b      	ldr	r3, [r5, #0]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d0c5      	beq.n	8008332 <__sflush_r+0x32>
 80083a6:	2b1d      	cmp	r3, #29
 80083a8:	d001      	beq.n	80083ae <__sflush_r+0xae>
 80083aa:	2b16      	cmp	r3, #22
 80083ac:	d101      	bne.n	80083b2 <__sflush_r+0xb2>
 80083ae:	602f      	str	r7, [r5, #0]
 80083b0:	e7b2      	b.n	8008318 <__sflush_r+0x18>
 80083b2:	89a3      	ldrh	r3, [r4, #12]
 80083b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083b8:	81a3      	strh	r3, [r4, #12]
 80083ba:	e7ae      	b.n	800831a <__sflush_r+0x1a>
 80083bc:	690f      	ldr	r7, [r1, #16]
 80083be:	2f00      	cmp	r7, #0
 80083c0:	d0aa      	beq.n	8008318 <__sflush_r+0x18>
 80083c2:	0793      	lsls	r3, r2, #30
 80083c4:	bf18      	it	ne
 80083c6:	2300      	movne	r3, #0
 80083c8:	680e      	ldr	r6, [r1, #0]
 80083ca:	bf08      	it	eq
 80083cc:	694b      	ldreq	r3, [r1, #20]
 80083ce:	1bf6      	subs	r6, r6, r7
 80083d0:	600f      	str	r7, [r1, #0]
 80083d2:	608b      	str	r3, [r1, #8]
 80083d4:	2e00      	cmp	r6, #0
 80083d6:	dd9f      	ble.n	8008318 <__sflush_r+0x18>
 80083d8:	4633      	mov	r3, r6
 80083da:	463a      	mov	r2, r7
 80083dc:	4628      	mov	r0, r5
 80083de:	6a21      	ldr	r1, [r4, #32]
 80083e0:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80083e4:	47e0      	blx	ip
 80083e6:	2800      	cmp	r0, #0
 80083e8:	dc06      	bgt.n	80083f8 <__sflush_r+0xf8>
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80083f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80083f4:	81a3      	strh	r3, [r4, #12]
 80083f6:	e790      	b.n	800831a <__sflush_r+0x1a>
 80083f8:	4407      	add	r7, r0
 80083fa:	1a36      	subs	r6, r6, r0
 80083fc:	e7ea      	b.n	80083d4 <__sflush_r+0xd4>
 80083fe:	bf00      	nop
 8008400:	dfbffffe 	.word	0xdfbffffe

08008404 <_fflush_r>:
 8008404:	b538      	push	{r3, r4, r5, lr}
 8008406:	690b      	ldr	r3, [r1, #16]
 8008408:	4605      	mov	r5, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b913      	cbnz	r3, 8008414 <_fflush_r+0x10>
 800840e:	2500      	movs	r5, #0
 8008410:	4628      	mov	r0, r5
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	b118      	cbz	r0, 800841e <_fflush_r+0x1a>
 8008416:	6a03      	ldr	r3, [r0, #32]
 8008418:	b90b      	cbnz	r3, 800841e <_fflush_r+0x1a>
 800841a:	f7fe fa03 	bl	8006824 <__sinit>
 800841e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d0f3      	beq.n	800840e <_fflush_r+0xa>
 8008426:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008428:	07d0      	lsls	r0, r2, #31
 800842a:	d404      	bmi.n	8008436 <_fflush_r+0x32>
 800842c:	0599      	lsls	r1, r3, #22
 800842e:	d402      	bmi.n	8008436 <_fflush_r+0x32>
 8008430:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008432:	f7fe fb0e 	bl	8006a52 <__retarget_lock_acquire_recursive>
 8008436:	4628      	mov	r0, r5
 8008438:	4621      	mov	r1, r4
 800843a:	f7ff ff61 	bl	8008300 <__sflush_r>
 800843e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008440:	4605      	mov	r5, r0
 8008442:	07da      	lsls	r2, r3, #31
 8008444:	d4e4      	bmi.n	8008410 <_fflush_r+0xc>
 8008446:	89a3      	ldrh	r3, [r4, #12]
 8008448:	059b      	lsls	r3, r3, #22
 800844a:	d4e1      	bmi.n	8008410 <_fflush_r+0xc>
 800844c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800844e:	f7fe fb01 	bl	8006a54 <__retarget_lock_release_recursive>
 8008452:	e7dd      	b.n	8008410 <_fflush_r+0xc>

08008454 <memmove>:
 8008454:	4288      	cmp	r0, r1
 8008456:	b510      	push	{r4, lr}
 8008458:	eb01 0402 	add.w	r4, r1, r2
 800845c:	d902      	bls.n	8008464 <memmove+0x10>
 800845e:	4284      	cmp	r4, r0
 8008460:	4623      	mov	r3, r4
 8008462:	d807      	bhi.n	8008474 <memmove+0x20>
 8008464:	1e43      	subs	r3, r0, #1
 8008466:	42a1      	cmp	r1, r4
 8008468:	d008      	beq.n	800847c <memmove+0x28>
 800846a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800846e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008472:	e7f8      	b.n	8008466 <memmove+0x12>
 8008474:	4601      	mov	r1, r0
 8008476:	4402      	add	r2, r0
 8008478:	428a      	cmp	r2, r1
 800847a:	d100      	bne.n	800847e <memmove+0x2a>
 800847c:	bd10      	pop	{r4, pc}
 800847e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008482:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008486:	e7f7      	b.n	8008478 <memmove+0x24>

08008488 <_sbrk_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	2300      	movs	r3, #0
 800848c:	4d05      	ldr	r5, [pc, #20]	; (80084a4 <_sbrk_r+0x1c>)
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f7f9 ffb2 	bl	80023fc <_sbrk>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d102      	bne.n	80084a2 <_sbrk_r+0x1a>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	b103      	cbz	r3, 80084a2 <_sbrk_r+0x1a>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	20000878 	.word	0x20000878

080084a8 <__assert_func>:
 80084a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084aa:	4614      	mov	r4, r2
 80084ac:	461a      	mov	r2, r3
 80084ae:	4b09      	ldr	r3, [pc, #36]	; (80084d4 <__assert_func+0x2c>)
 80084b0:	4605      	mov	r5, r0
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	68d8      	ldr	r0, [r3, #12]
 80084b6:	b14c      	cbz	r4, 80084cc <__assert_func+0x24>
 80084b8:	4b07      	ldr	r3, [pc, #28]	; (80084d8 <__assert_func+0x30>)
 80084ba:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084be:	9100      	str	r1, [sp, #0]
 80084c0:	462b      	mov	r3, r5
 80084c2:	4906      	ldr	r1, [pc, #24]	; (80084dc <__assert_func+0x34>)
 80084c4:	f000 f870 	bl	80085a8 <fiprintf>
 80084c8:	f000 f880 	bl	80085cc <abort>
 80084cc:	4b04      	ldr	r3, [pc, #16]	; (80084e0 <__assert_func+0x38>)
 80084ce:	461c      	mov	r4, r3
 80084d0:	e7f3      	b.n	80084ba <__assert_func+0x12>
 80084d2:	bf00      	nop
 80084d4:	20000084 	.word	0x20000084
 80084d8:	0800ab5f 	.word	0x0800ab5f
 80084dc:	0800ab6c 	.word	0x0800ab6c
 80084e0:	0800ab9a 	.word	0x0800ab9a

080084e4 <_calloc_r>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	fba1 5402 	umull	r5, r4, r1, r2
 80084ea:	b934      	cbnz	r4, 80084fa <_calloc_r+0x16>
 80084ec:	4629      	mov	r1, r5
 80084ee:	f7ff f9ab 	bl	8007848 <_malloc_r>
 80084f2:	4606      	mov	r6, r0
 80084f4:	b928      	cbnz	r0, 8008502 <_calloc_r+0x1e>
 80084f6:	4630      	mov	r0, r6
 80084f8:	bd70      	pop	{r4, r5, r6, pc}
 80084fa:	220c      	movs	r2, #12
 80084fc:	2600      	movs	r6, #0
 80084fe:	6002      	str	r2, [r0, #0]
 8008500:	e7f9      	b.n	80084f6 <_calloc_r+0x12>
 8008502:	462a      	mov	r2, r5
 8008504:	4621      	mov	r1, r4
 8008506:	f7fe fa26 	bl	8006956 <memset>
 800850a:	e7f4      	b.n	80084f6 <_calloc_r+0x12>

0800850c <__ascii_mbtowc>:
 800850c:	b082      	sub	sp, #8
 800850e:	b901      	cbnz	r1, 8008512 <__ascii_mbtowc+0x6>
 8008510:	a901      	add	r1, sp, #4
 8008512:	b142      	cbz	r2, 8008526 <__ascii_mbtowc+0x1a>
 8008514:	b14b      	cbz	r3, 800852a <__ascii_mbtowc+0x1e>
 8008516:	7813      	ldrb	r3, [r2, #0]
 8008518:	600b      	str	r3, [r1, #0]
 800851a:	7812      	ldrb	r2, [r2, #0]
 800851c:	1e10      	subs	r0, r2, #0
 800851e:	bf18      	it	ne
 8008520:	2001      	movne	r0, #1
 8008522:	b002      	add	sp, #8
 8008524:	4770      	bx	lr
 8008526:	4610      	mov	r0, r2
 8008528:	e7fb      	b.n	8008522 <__ascii_mbtowc+0x16>
 800852a:	f06f 0001 	mvn.w	r0, #1
 800852e:	e7f8      	b.n	8008522 <__ascii_mbtowc+0x16>

08008530 <_realloc_r>:
 8008530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008534:	4680      	mov	r8, r0
 8008536:	4614      	mov	r4, r2
 8008538:	460e      	mov	r6, r1
 800853a:	b921      	cbnz	r1, 8008546 <_realloc_r+0x16>
 800853c:	4611      	mov	r1, r2
 800853e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008542:	f7ff b981 	b.w	8007848 <_malloc_r>
 8008546:	b92a      	cbnz	r2, 8008554 <_realloc_r+0x24>
 8008548:	f7ff f90e 	bl	8007768 <_free_r>
 800854c:	4625      	mov	r5, r4
 800854e:	4628      	mov	r0, r5
 8008550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008554:	f000 f841 	bl	80085da <_malloc_usable_size_r>
 8008558:	4284      	cmp	r4, r0
 800855a:	4607      	mov	r7, r0
 800855c:	d802      	bhi.n	8008564 <_realloc_r+0x34>
 800855e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008562:	d812      	bhi.n	800858a <_realloc_r+0x5a>
 8008564:	4621      	mov	r1, r4
 8008566:	4640      	mov	r0, r8
 8008568:	f7ff f96e 	bl	8007848 <_malloc_r>
 800856c:	4605      	mov	r5, r0
 800856e:	2800      	cmp	r0, #0
 8008570:	d0ed      	beq.n	800854e <_realloc_r+0x1e>
 8008572:	42bc      	cmp	r4, r7
 8008574:	4622      	mov	r2, r4
 8008576:	4631      	mov	r1, r6
 8008578:	bf28      	it	cs
 800857a:	463a      	movcs	r2, r7
 800857c:	f7fe fa79 	bl	8006a72 <memcpy>
 8008580:	4631      	mov	r1, r6
 8008582:	4640      	mov	r0, r8
 8008584:	f7ff f8f0 	bl	8007768 <_free_r>
 8008588:	e7e1      	b.n	800854e <_realloc_r+0x1e>
 800858a:	4635      	mov	r5, r6
 800858c:	e7df      	b.n	800854e <_realloc_r+0x1e>

0800858e <__ascii_wctomb>:
 800858e:	4603      	mov	r3, r0
 8008590:	4608      	mov	r0, r1
 8008592:	b141      	cbz	r1, 80085a6 <__ascii_wctomb+0x18>
 8008594:	2aff      	cmp	r2, #255	; 0xff
 8008596:	d904      	bls.n	80085a2 <__ascii_wctomb+0x14>
 8008598:	228a      	movs	r2, #138	; 0x8a
 800859a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800859e:	601a      	str	r2, [r3, #0]
 80085a0:	4770      	bx	lr
 80085a2:	2001      	movs	r0, #1
 80085a4:	700a      	strb	r2, [r1, #0]
 80085a6:	4770      	bx	lr

080085a8 <fiprintf>:
 80085a8:	b40e      	push	{r1, r2, r3}
 80085aa:	b503      	push	{r0, r1, lr}
 80085ac:	4601      	mov	r1, r0
 80085ae:	ab03      	add	r3, sp, #12
 80085b0:	4805      	ldr	r0, [pc, #20]	; (80085c8 <fiprintf+0x20>)
 80085b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80085b6:	6800      	ldr	r0, [r0, #0]
 80085b8:	9301      	str	r3, [sp, #4]
 80085ba:	f000 f83d 	bl	8008638 <_vfiprintf_r>
 80085be:	b002      	add	sp, #8
 80085c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80085c4:	b003      	add	sp, #12
 80085c6:	4770      	bx	lr
 80085c8:	20000084 	.word	0x20000084

080085cc <abort>:
 80085cc:	2006      	movs	r0, #6
 80085ce:	b508      	push	{r3, lr}
 80085d0:	f000 fa0a 	bl	80089e8 <raise>
 80085d4:	2001      	movs	r0, #1
 80085d6:	f7f9 fe9e 	bl	8002316 <_exit>

080085da <_malloc_usable_size_r>:
 80085da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80085de:	1f18      	subs	r0, r3, #4
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	bfbc      	itt	lt
 80085e4:	580b      	ldrlt	r3, [r1, r0]
 80085e6:	18c0      	addlt	r0, r0, r3
 80085e8:	4770      	bx	lr

080085ea <__sfputc_r>:
 80085ea:	6893      	ldr	r3, [r2, #8]
 80085ec:	b410      	push	{r4}
 80085ee:	3b01      	subs	r3, #1
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	6093      	str	r3, [r2, #8]
 80085f4:	da07      	bge.n	8008606 <__sfputc_r+0x1c>
 80085f6:	6994      	ldr	r4, [r2, #24]
 80085f8:	42a3      	cmp	r3, r4
 80085fa:	db01      	blt.n	8008600 <__sfputc_r+0x16>
 80085fc:	290a      	cmp	r1, #10
 80085fe:	d102      	bne.n	8008606 <__sfputc_r+0x1c>
 8008600:	bc10      	pop	{r4}
 8008602:	f000 b933 	b.w	800886c <__swbuf_r>
 8008606:	6813      	ldr	r3, [r2, #0]
 8008608:	1c58      	adds	r0, r3, #1
 800860a:	6010      	str	r0, [r2, #0]
 800860c:	7019      	strb	r1, [r3, #0]
 800860e:	4608      	mov	r0, r1
 8008610:	bc10      	pop	{r4}
 8008612:	4770      	bx	lr

08008614 <__sfputs_r>:
 8008614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008616:	4606      	mov	r6, r0
 8008618:	460f      	mov	r7, r1
 800861a:	4614      	mov	r4, r2
 800861c:	18d5      	adds	r5, r2, r3
 800861e:	42ac      	cmp	r4, r5
 8008620:	d101      	bne.n	8008626 <__sfputs_r+0x12>
 8008622:	2000      	movs	r0, #0
 8008624:	e007      	b.n	8008636 <__sfputs_r+0x22>
 8008626:	463a      	mov	r2, r7
 8008628:	4630      	mov	r0, r6
 800862a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800862e:	f7ff ffdc 	bl	80085ea <__sfputc_r>
 8008632:	1c43      	adds	r3, r0, #1
 8008634:	d1f3      	bne.n	800861e <__sfputs_r+0xa>
 8008636:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008638 <_vfiprintf_r>:
 8008638:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800863c:	460d      	mov	r5, r1
 800863e:	4614      	mov	r4, r2
 8008640:	4698      	mov	r8, r3
 8008642:	4606      	mov	r6, r0
 8008644:	b09d      	sub	sp, #116	; 0x74
 8008646:	b118      	cbz	r0, 8008650 <_vfiprintf_r+0x18>
 8008648:	6a03      	ldr	r3, [r0, #32]
 800864a:	b90b      	cbnz	r3, 8008650 <_vfiprintf_r+0x18>
 800864c:	f7fe f8ea 	bl	8006824 <__sinit>
 8008650:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008652:	07d9      	lsls	r1, r3, #31
 8008654:	d405      	bmi.n	8008662 <_vfiprintf_r+0x2a>
 8008656:	89ab      	ldrh	r3, [r5, #12]
 8008658:	059a      	lsls	r2, r3, #22
 800865a:	d402      	bmi.n	8008662 <_vfiprintf_r+0x2a>
 800865c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800865e:	f7fe f9f8 	bl	8006a52 <__retarget_lock_acquire_recursive>
 8008662:	89ab      	ldrh	r3, [r5, #12]
 8008664:	071b      	lsls	r3, r3, #28
 8008666:	d501      	bpl.n	800866c <_vfiprintf_r+0x34>
 8008668:	692b      	ldr	r3, [r5, #16]
 800866a:	b99b      	cbnz	r3, 8008694 <_vfiprintf_r+0x5c>
 800866c:	4629      	mov	r1, r5
 800866e:	4630      	mov	r0, r6
 8008670:	f000 f93a 	bl	80088e8 <__swsetup_r>
 8008674:	b170      	cbz	r0, 8008694 <_vfiprintf_r+0x5c>
 8008676:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008678:	07dc      	lsls	r4, r3, #31
 800867a:	d504      	bpl.n	8008686 <_vfiprintf_r+0x4e>
 800867c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008680:	b01d      	add	sp, #116	; 0x74
 8008682:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008686:	89ab      	ldrh	r3, [r5, #12]
 8008688:	0598      	lsls	r0, r3, #22
 800868a:	d4f7      	bmi.n	800867c <_vfiprintf_r+0x44>
 800868c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800868e:	f7fe f9e1 	bl	8006a54 <__retarget_lock_release_recursive>
 8008692:	e7f3      	b.n	800867c <_vfiprintf_r+0x44>
 8008694:	2300      	movs	r3, #0
 8008696:	9309      	str	r3, [sp, #36]	; 0x24
 8008698:	2320      	movs	r3, #32
 800869a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800869e:	2330      	movs	r3, #48	; 0x30
 80086a0:	f04f 0901 	mov.w	r9, #1
 80086a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80086a8:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8008858 <_vfiprintf_r+0x220>
 80086ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80086b0:	4623      	mov	r3, r4
 80086b2:	469a      	mov	sl, r3
 80086b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80086b8:	b10a      	cbz	r2, 80086be <_vfiprintf_r+0x86>
 80086ba:	2a25      	cmp	r2, #37	; 0x25
 80086bc:	d1f9      	bne.n	80086b2 <_vfiprintf_r+0x7a>
 80086be:	ebba 0b04 	subs.w	fp, sl, r4
 80086c2:	d00b      	beq.n	80086dc <_vfiprintf_r+0xa4>
 80086c4:	465b      	mov	r3, fp
 80086c6:	4622      	mov	r2, r4
 80086c8:	4629      	mov	r1, r5
 80086ca:	4630      	mov	r0, r6
 80086cc:	f7ff ffa2 	bl	8008614 <__sfputs_r>
 80086d0:	3001      	adds	r0, #1
 80086d2:	f000 80a9 	beq.w	8008828 <_vfiprintf_r+0x1f0>
 80086d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80086d8:	445a      	add	r2, fp
 80086da:	9209      	str	r2, [sp, #36]	; 0x24
 80086dc:	f89a 3000 	ldrb.w	r3, [sl]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	f000 80a1 	beq.w	8008828 <_vfiprintf_r+0x1f0>
 80086e6:	2300      	movs	r3, #0
 80086e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80086ec:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086f0:	f10a 0a01 	add.w	sl, sl, #1
 80086f4:	9304      	str	r3, [sp, #16]
 80086f6:	9307      	str	r3, [sp, #28]
 80086f8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086fc:	931a      	str	r3, [sp, #104]	; 0x68
 80086fe:	4654      	mov	r4, sl
 8008700:	2205      	movs	r2, #5
 8008702:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008706:	4854      	ldr	r0, [pc, #336]	; (8008858 <_vfiprintf_r+0x220>)
 8008708:	f7fe f9a5 	bl	8006a56 <memchr>
 800870c:	9a04      	ldr	r2, [sp, #16]
 800870e:	b9d8      	cbnz	r0, 8008748 <_vfiprintf_r+0x110>
 8008710:	06d1      	lsls	r1, r2, #27
 8008712:	bf44      	itt	mi
 8008714:	2320      	movmi	r3, #32
 8008716:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800871a:	0713      	lsls	r3, r2, #28
 800871c:	bf44      	itt	mi
 800871e:	232b      	movmi	r3, #43	; 0x2b
 8008720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008724:	f89a 3000 	ldrb.w	r3, [sl]
 8008728:	2b2a      	cmp	r3, #42	; 0x2a
 800872a:	d015      	beq.n	8008758 <_vfiprintf_r+0x120>
 800872c:	4654      	mov	r4, sl
 800872e:	2000      	movs	r0, #0
 8008730:	f04f 0c0a 	mov.w	ip, #10
 8008734:	9a07      	ldr	r2, [sp, #28]
 8008736:	4621      	mov	r1, r4
 8008738:	f811 3b01 	ldrb.w	r3, [r1], #1
 800873c:	3b30      	subs	r3, #48	; 0x30
 800873e:	2b09      	cmp	r3, #9
 8008740:	d94d      	bls.n	80087de <_vfiprintf_r+0x1a6>
 8008742:	b1b0      	cbz	r0, 8008772 <_vfiprintf_r+0x13a>
 8008744:	9207      	str	r2, [sp, #28]
 8008746:	e014      	b.n	8008772 <_vfiprintf_r+0x13a>
 8008748:	eba0 0308 	sub.w	r3, r0, r8
 800874c:	fa09 f303 	lsl.w	r3, r9, r3
 8008750:	4313      	orrs	r3, r2
 8008752:	46a2      	mov	sl, r4
 8008754:	9304      	str	r3, [sp, #16]
 8008756:	e7d2      	b.n	80086fe <_vfiprintf_r+0xc6>
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	1d19      	adds	r1, r3, #4
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	9103      	str	r1, [sp, #12]
 8008760:	2b00      	cmp	r3, #0
 8008762:	bfbb      	ittet	lt
 8008764:	425b      	neglt	r3, r3
 8008766:	f042 0202 	orrlt.w	r2, r2, #2
 800876a:	9307      	strge	r3, [sp, #28]
 800876c:	9307      	strlt	r3, [sp, #28]
 800876e:	bfb8      	it	lt
 8008770:	9204      	strlt	r2, [sp, #16]
 8008772:	7823      	ldrb	r3, [r4, #0]
 8008774:	2b2e      	cmp	r3, #46	; 0x2e
 8008776:	d10c      	bne.n	8008792 <_vfiprintf_r+0x15a>
 8008778:	7863      	ldrb	r3, [r4, #1]
 800877a:	2b2a      	cmp	r3, #42	; 0x2a
 800877c:	d134      	bne.n	80087e8 <_vfiprintf_r+0x1b0>
 800877e:	9b03      	ldr	r3, [sp, #12]
 8008780:	3402      	adds	r4, #2
 8008782:	1d1a      	adds	r2, r3, #4
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	9203      	str	r2, [sp, #12]
 8008788:	2b00      	cmp	r3, #0
 800878a:	bfb8      	it	lt
 800878c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8008790:	9305      	str	r3, [sp, #20]
 8008792:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800885c <_vfiprintf_r+0x224>
 8008796:	2203      	movs	r2, #3
 8008798:	4650      	mov	r0, sl
 800879a:	7821      	ldrb	r1, [r4, #0]
 800879c:	f7fe f95b 	bl	8006a56 <memchr>
 80087a0:	b138      	cbz	r0, 80087b2 <_vfiprintf_r+0x17a>
 80087a2:	2240      	movs	r2, #64	; 0x40
 80087a4:	9b04      	ldr	r3, [sp, #16]
 80087a6:	eba0 000a 	sub.w	r0, r0, sl
 80087aa:	4082      	lsls	r2, r0
 80087ac:	4313      	orrs	r3, r2
 80087ae:	3401      	adds	r4, #1
 80087b0:	9304      	str	r3, [sp, #16]
 80087b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80087b6:	2206      	movs	r2, #6
 80087b8:	4829      	ldr	r0, [pc, #164]	; (8008860 <_vfiprintf_r+0x228>)
 80087ba:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80087be:	f7fe f94a 	bl	8006a56 <memchr>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	d03f      	beq.n	8008846 <_vfiprintf_r+0x20e>
 80087c6:	4b27      	ldr	r3, [pc, #156]	; (8008864 <_vfiprintf_r+0x22c>)
 80087c8:	bb1b      	cbnz	r3, 8008812 <_vfiprintf_r+0x1da>
 80087ca:	9b03      	ldr	r3, [sp, #12]
 80087cc:	3307      	adds	r3, #7
 80087ce:	f023 0307 	bic.w	r3, r3, #7
 80087d2:	3308      	adds	r3, #8
 80087d4:	9303      	str	r3, [sp, #12]
 80087d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80087d8:	443b      	add	r3, r7
 80087da:	9309      	str	r3, [sp, #36]	; 0x24
 80087dc:	e768      	b.n	80086b0 <_vfiprintf_r+0x78>
 80087de:	460c      	mov	r4, r1
 80087e0:	2001      	movs	r0, #1
 80087e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80087e6:	e7a6      	b.n	8008736 <_vfiprintf_r+0xfe>
 80087e8:	2300      	movs	r3, #0
 80087ea:	f04f 0c0a 	mov.w	ip, #10
 80087ee:	4619      	mov	r1, r3
 80087f0:	3401      	adds	r4, #1
 80087f2:	9305      	str	r3, [sp, #20]
 80087f4:	4620      	mov	r0, r4
 80087f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087fa:	3a30      	subs	r2, #48	; 0x30
 80087fc:	2a09      	cmp	r2, #9
 80087fe:	d903      	bls.n	8008808 <_vfiprintf_r+0x1d0>
 8008800:	2b00      	cmp	r3, #0
 8008802:	d0c6      	beq.n	8008792 <_vfiprintf_r+0x15a>
 8008804:	9105      	str	r1, [sp, #20]
 8008806:	e7c4      	b.n	8008792 <_vfiprintf_r+0x15a>
 8008808:	4604      	mov	r4, r0
 800880a:	2301      	movs	r3, #1
 800880c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008810:	e7f0      	b.n	80087f4 <_vfiprintf_r+0x1bc>
 8008812:	ab03      	add	r3, sp, #12
 8008814:	9300      	str	r3, [sp, #0]
 8008816:	462a      	mov	r2, r5
 8008818:	4630      	mov	r0, r6
 800881a:	4b13      	ldr	r3, [pc, #76]	; (8008868 <_vfiprintf_r+0x230>)
 800881c:	a904      	add	r1, sp, #16
 800881e:	f7fd fbb3 	bl	8005f88 <_printf_float>
 8008822:	4607      	mov	r7, r0
 8008824:	1c78      	adds	r0, r7, #1
 8008826:	d1d6      	bne.n	80087d6 <_vfiprintf_r+0x19e>
 8008828:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800882a:	07d9      	lsls	r1, r3, #31
 800882c:	d405      	bmi.n	800883a <_vfiprintf_r+0x202>
 800882e:	89ab      	ldrh	r3, [r5, #12]
 8008830:	059a      	lsls	r2, r3, #22
 8008832:	d402      	bmi.n	800883a <_vfiprintf_r+0x202>
 8008834:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008836:	f7fe f90d 	bl	8006a54 <__retarget_lock_release_recursive>
 800883a:	89ab      	ldrh	r3, [r5, #12]
 800883c:	065b      	lsls	r3, r3, #25
 800883e:	f53f af1d 	bmi.w	800867c <_vfiprintf_r+0x44>
 8008842:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008844:	e71c      	b.n	8008680 <_vfiprintf_r+0x48>
 8008846:	ab03      	add	r3, sp, #12
 8008848:	9300      	str	r3, [sp, #0]
 800884a:	462a      	mov	r2, r5
 800884c:	4630      	mov	r0, r6
 800884e:	4b06      	ldr	r3, [pc, #24]	; (8008868 <_vfiprintf_r+0x230>)
 8008850:	a904      	add	r1, sp, #16
 8008852:	f7fd fe39 	bl	80064c8 <_printf_i>
 8008856:	e7e4      	b.n	8008822 <_vfiprintf_r+0x1ea>
 8008858:	0800ab44 	.word	0x0800ab44
 800885c:	0800ab4a 	.word	0x0800ab4a
 8008860:	0800ab4e 	.word	0x0800ab4e
 8008864:	08005f89 	.word	0x08005f89
 8008868:	08008615 	.word	0x08008615

0800886c <__swbuf_r>:
 800886c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800886e:	460e      	mov	r6, r1
 8008870:	4614      	mov	r4, r2
 8008872:	4605      	mov	r5, r0
 8008874:	b118      	cbz	r0, 800887e <__swbuf_r+0x12>
 8008876:	6a03      	ldr	r3, [r0, #32]
 8008878:	b90b      	cbnz	r3, 800887e <__swbuf_r+0x12>
 800887a:	f7fd ffd3 	bl	8006824 <__sinit>
 800887e:	69a3      	ldr	r3, [r4, #24]
 8008880:	60a3      	str	r3, [r4, #8]
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	071a      	lsls	r2, r3, #28
 8008886:	d525      	bpl.n	80088d4 <__swbuf_r+0x68>
 8008888:	6923      	ldr	r3, [r4, #16]
 800888a:	b31b      	cbz	r3, 80088d4 <__swbuf_r+0x68>
 800888c:	6823      	ldr	r3, [r4, #0]
 800888e:	6922      	ldr	r2, [r4, #16]
 8008890:	b2f6      	uxtb	r6, r6
 8008892:	1a98      	subs	r0, r3, r2
 8008894:	6963      	ldr	r3, [r4, #20]
 8008896:	4637      	mov	r7, r6
 8008898:	4283      	cmp	r3, r0
 800889a:	dc04      	bgt.n	80088a6 <__swbuf_r+0x3a>
 800889c:	4621      	mov	r1, r4
 800889e:	4628      	mov	r0, r5
 80088a0:	f7ff fdb0 	bl	8008404 <_fflush_r>
 80088a4:	b9e0      	cbnz	r0, 80088e0 <__swbuf_r+0x74>
 80088a6:	68a3      	ldr	r3, [r4, #8]
 80088a8:	3b01      	subs	r3, #1
 80088aa:	60a3      	str	r3, [r4, #8]
 80088ac:	6823      	ldr	r3, [r4, #0]
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	6022      	str	r2, [r4, #0]
 80088b2:	701e      	strb	r6, [r3, #0]
 80088b4:	6962      	ldr	r2, [r4, #20]
 80088b6:	1c43      	adds	r3, r0, #1
 80088b8:	429a      	cmp	r2, r3
 80088ba:	d004      	beq.n	80088c6 <__swbuf_r+0x5a>
 80088bc:	89a3      	ldrh	r3, [r4, #12]
 80088be:	07db      	lsls	r3, r3, #31
 80088c0:	d506      	bpl.n	80088d0 <__swbuf_r+0x64>
 80088c2:	2e0a      	cmp	r6, #10
 80088c4:	d104      	bne.n	80088d0 <__swbuf_r+0x64>
 80088c6:	4621      	mov	r1, r4
 80088c8:	4628      	mov	r0, r5
 80088ca:	f7ff fd9b 	bl	8008404 <_fflush_r>
 80088ce:	b938      	cbnz	r0, 80088e0 <__swbuf_r+0x74>
 80088d0:	4638      	mov	r0, r7
 80088d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80088d4:	4621      	mov	r1, r4
 80088d6:	4628      	mov	r0, r5
 80088d8:	f000 f806 	bl	80088e8 <__swsetup_r>
 80088dc:	2800      	cmp	r0, #0
 80088de:	d0d5      	beq.n	800888c <__swbuf_r+0x20>
 80088e0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80088e4:	e7f4      	b.n	80088d0 <__swbuf_r+0x64>
	...

080088e8 <__swsetup_r>:
 80088e8:	b538      	push	{r3, r4, r5, lr}
 80088ea:	4b2a      	ldr	r3, [pc, #168]	; (8008994 <__swsetup_r+0xac>)
 80088ec:	4605      	mov	r5, r0
 80088ee:	6818      	ldr	r0, [r3, #0]
 80088f0:	460c      	mov	r4, r1
 80088f2:	b118      	cbz	r0, 80088fc <__swsetup_r+0x14>
 80088f4:	6a03      	ldr	r3, [r0, #32]
 80088f6:	b90b      	cbnz	r3, 80088fc <__swsetup_r+0x14>
 80088f8:	f7fd ff94 	bl	8006824 <__sinit>
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008902:	0718      	lsls	r0, r3, #28
 8008904:	d422      	bmi.n	800894c <__swsetup_r+0x64>
 8008906:	06d9      	lsls	r1, r3, #27
 8008908:	d407      	bmi.n	800891a <__swsetup_r+0x32>
 800890a:	2309      	movs	r3, #9
 800890c:	602b      	str	r3, [r5, #0]
 800890e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008912:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008916:	81a3      	strh	r3, [r4, #12]
 8008918:	e034      	b.n	8008984 <__swsetup_r+0x9c>
 800891a:	0758      	lsls	r0, r3, #29
 800891c:	d512      	bpl.n	8008944 <__swsetup_r+0x5c>
 800891e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008920:	b141      	cbz	r1, 8008934 <__swsetup_r+0x4c>
 8008922:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008926:	4299      	cmp	r1, r3
 8008928:	d002      	beq.n	8008930 <__swsetup_r+0x48>
 800892a:	4628      	mov	r0, r5
 800892c:	f7fe ff1c 	bl	8007768 <_free_r>
 8008930:	2300      	movs	r3, #0
 8008932:	6363      	str	r3, [r4, #52]	; 0x34
 8008934:	89a3      	ldrh	r3, [r4, #12]
 8008936:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800893a:	81a3      	strh	r3, [r4, #12]
 800893c:	2300      	movs	r3, #0
 800893e:	6063      	str	r3, [r4, #4]
 8008940:	6923      	ldr	r3, [r4, #16]
 8008942:	6023      	str	r3, [r4, #0]
 8008944:	89a3      	ldrh	r3, [r4, #12]
 8008946:	f043 0308 	orr.w	r3, r3, #8
 800894a:	81a3      	strh	r3, [r4, #12]
 800894c:	6923      	ldr	r3, [r4, #16]
 800894e:	b94b      	cbnz	r3, 8008964 <__swsetup_r+0x7c>
 8008950:	89a3      	ldrh	r3, [r4, #12]
 8008952:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008956:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800895a:	d003      	beq.n	8008964 <__swsetup_r+0x7c>
 800895c:	4621      	mov	r1, r4
 800895e:	4628      	mov	r0, r5
 8008960:	f000 f883 	bl	8008a6a <__smakebuf_r>
 8008964:	89a0      	ldrh	r0, [r4, #12]
 8008966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800896a:	f010 0301 	ands.w	r3, r0, #1
 800896e:	d00a      	beq.n	8008986 <__swsetup_r+0x9e>
 8008970:	2300      	movs	r3, #0
 8008972:	60a3      	str	r3, [r4, #8]
 8008974:	6963      	ldr	r3, [r4, #20]
 8008976:	425b      	negs	r3, r3
 8008978:	61a3      	str	r3, [r4, #24]
 800897a:	6923      	ldr	r3, [r4, #16]
 800897c:	b943      	cbnz	r3, 8008990 <__swsetup_r+0xa8>
 800897e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008982:	d1c4      	bne.n	800890e <__swsetup_r+0x26>
 8008984:	bd38      	pop	{r3, r4, r5, pc}
 8008986:	0781      	lsls	r1, r0, #30
 8008988:	bf58      	it	pl
 800898a:	6963      	ldrpl	r3, [r4, #20]
 800898c:	60a3      	str	r3, [r4, #8]
 800898e:	e7f4      	b.n	800897a <__swsetup_r+0x92>
 8008990:	2000      	movs	r0, #0
 8008992:	e7f7      	b.n	8008984 <__swsetup_r+0x9c>
 8008994:	20000084 	.word	0x20000084

08008998 <_raise_r>:
 8008998:	291f      	cmp	r1, #31
 800899a:	b538      	push	{r3, r4, r5, lr}
 800899c:	4604      	mov	r4, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	d904      	bls.n	80089ac <_raise_r+0x14>
 80089a2:	2316      	movs	r3, #22
 80089a4:	6003      	str	r3, [r0, #0]
 80089a6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80089aa:	bd38      	pop	{r3, r4, r5, pc}
 80089ac:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80089ae:	b112      	cbz	r2, 80089b6 <_raise_r+0x1e>
 80089b0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80089b4:	b94b      	cbnz	r3, 80089ca <_raise_r+0x32>
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 f830 	bl	8008a1c <_getpid_r>
 80089bc:	462a      	mov	r2, r5
 80089be:	4601      	mov	r1, r0
 80089c0:	4620      	mov	r0, r4
 80089c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c6:	f000 b817 	b.w	80089f8 <_kill_r>
 80089ca:	2b01      	cmp	r3, #1
 80089cc:	d00a      	beq.n	80089e4 <_raise_r+0x4c>
 80089ce:	1c59      	adds	r1, r3, #1
 80089d0:	d103      	bne.n	80089da <_raise_r+0x42>
 80089d2:	2316      	movs	r3, #22
 80089d4:	6003      	str	r3, [r0, #0]
 80089d6:	2001      	movs	r0, #1
 80089d8:	e7e7      	b.n	80089aa <_raise_r+0x12>
 80089da:	2400      	movs	r4, #0
 80089dc:	4628      	mov	r0, r5
 80089de:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80089e2:	4798      	blx	r3
 80089e4:	2000      	movs	r0, #0
 80089e6:	e7e0      	b.n	80089aa <_raise_r+0x12>

080089e8 <raise>:
 80089e8:	4b02      	ldr	r3, [pc, #8]	; (80089f4 <raise+0xc>)
 80089ea:	4601      	mov	r1, r0
 80089ec:	6818      	ldr	r0, [r3, #0]
 80089ee:	f7ff bfd3 	b.w	8008998 <_raise_r>
 80089f2:	bf00      	nop
 80089f4:	20000084 	.word	0x20000084

080089f8 <_kill_r>:
 80089f8:	b538      	push	{r3, r4, r5, lr}
 80089fa:	2300      	movs	r3, #0
 80089fc:	4d06      	ldr	r5, [pc, #24]	; (8008a18 <_kill_r+0x20>)
 80089fe:	4604      	mov	r4, r0
 8008a00:	4608      	mov	r0, r1
 8008a02:	4611      	mov	r1, r2
 8008a04:	602b      	str	r3, [r5, #0]
 8008a06:	f7f9 fc76 	bl	80022f6 <_kill>
 8008a0a:	1c43      	adds	r3, r0, #1
 8008a0c:	d102      	bne.n	8008a14 <_kill_r+0x1c>
 8008a0e:	682b      	ldr	r3, [r5, #0]
 8008a10:	b103      	cbz	r3, 8008a14 <_kill_r+0x1c>
 8008a12:	6023      	str	r3, [r4, #0]
 8008a14:	bd38      	pop	{r3, r4, r5, pc}
 8008a16:	bf00      	nop
 8008a18:	20000878 	.word	0x20000878

08008a1c <_getpid_r>:
 8008a1c:	f7f9 bc64 	b.w	80022e8 <_getpid>

08008a20 <__swhatbuf_r>:
 8008a20:	b570      	push	{r4, r5, r6, lr}
 8008a22:	460c      	mov	r4, r1
 8008a24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008a28:	4615      	mov	r5, r2
 8008a2a:	2900      	cmp	r1, #0
 8008a2c:	461e      	mov	r6, r3
 8008a2e:	b096      	sub	sp, #88	; 0x58
 8008a30:	da0c      	bge.n	8008a4c <__swhatbuf_r+0x2c>
 8008a32:	89a3      	ldrh	r3, [r4, #12]
 8008a34:	2100      	movs	r1, #0
 8008a36:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008a3a:	bf0c      	ite	eq
 8008a3c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008a40:	2340      	movne	r3, #64	; 0x40
 8008a42:	2000      	movs	r0, #0
 8008a44:	6031      	str	r1, [r6, #0]
 8008a46:	602b      	str	r3, [r5, #0]
 8008a48:	b016      	add	sp, #88	; 0x58
 8008a4a:	bd70      	pop	{r4, r5, r6, pc}
 8008a4c:	466a      	mov	r2, sp
 8008a4e:	f000 f849 	bl	8008ae4 <_fstat_r>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	dbed      	blt.n	8008a32 <__swhatbuf_r+0x12>
 8008a56:	9901      	ldr	r1, [sp, #4]
 8008a58:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008a5c:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008a60:	4259      	negs	r1, r3
 8008a62:	4159      	adcs	r1, r3
 8008a64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008a68:	e7eb      	b.n	8008a42 <__swhatbuf_r+0x22>

08008a6a <__smakebuf_r>:
 8008a6a:	898b      	ldrh	r3, [r1, #12]
 8008a6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008a6e:	079d      	lsls	r5, r3, #30
 8008a70:	4606      	mov	r6, r0
 8008a72:	460c      	mov	r4, r1
 8008a74:	d507      	bpl.n	8008a86 <__smakebuf_r+0x1c>
 8008a76:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008a7a:	6023      	str	r3, [r4, #0]
 8008a7c:	6123      	str	r3, [r4, #16]
 8008a7e:	2301      	movs	r3, #1
 8008a80:	6163      	str	r3, [r4, #20]
 8008a82:	b002      	add	sp, #8
 8008a84:	bd70      	pop	{r4, r5, r6, pc}
 8008a86:	466a      	mov	r2, sp
 8008a88:	ab01      	add	r3, sp, #4
 8008a8a:	f7ff ffc9 	bl	8008a20 <__swhatbuf_r>
 8008a8e:	9900      	ldr	r1, [sp, #0]
 8008a90:	4605      	mov	r5, r0
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7fe fed8 	bl	8007848 <_malloc_r>
 8008a98:	b948      	cbnz	r0, 8008aae <__smakebuf_r+0x44>
 8008a9a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a9e:	059a      	lsls	r2, r3, #22
 8008aa0:	d4ef      	bmi.n	8008a82 <__smakebuf_r+0x18>
 8008aa2:	f023 0303 	bic.w	r3, r3, #3
 8008aa6:	f043 0302 	orr.w	r3, r3, #2
 8008aaa:	81a3      	strh	r3, [r4, #12]
 8008aac:	e7e3      	b.n	8008a76 <__smakebuf_r+0xc>
 8008aae:	89a3      	ldrh	r3, [r4, #12]
 8008ab0:	6020      	str	r0, [r4, #0]
 8008ab2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ab6:	81a3      	strh	r3, [r4, #12]
 8008ab8:	9b00      	ldr	r3, [sp, #0]
 8008aba:	6120      	str	r0, [r4, #16]
 8008abc:	6163      	str	r3, [r4, #20]
 8008abe:	9b01      	ldr	r3, [sp, #4]
 8008ac0:	b15b      	cbz	r3, 8008ada <__smakebuf_r+0x70>
 8008ac2:	4630      	mov	r0, r6
 8008ac4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ac8:	f000 f81e 	bl	8008b08 <_isatty_r>
 8008acc:	b128      	cbz	r0, 8008ada <__smakebuf_r+0x70>
 8008ace:	89a3      	ldrh	r3, [r4, #12]
 8008ad0:	f023 0303 	bic.w	r3, r3, #3
 8008ad4:	f043 0301 	orr.w	r3, r3, #1
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	89a3      	ldrh	r3, [r4, #12]
 8008adc:	431d      	orrs	r5, r3
 8008ade:	81a5      	strh	r5, [r4, #12]
 8008ae0:	e7cf      	b.n	8008a82 <__smakebuf_r+0x18>
	...

08008ae4 <_fstat_r>:
 8008ae4:	b538      	push	{r3, r4, r5, lr}
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	4d06      	ldr	r5, [pc, #24]	; (8008b04 <_fstat_r+0x20>)
 8008aea:	4604      	mov	r4, r0
 8008aec:	4608      	mov	r0, r1
 8008aee:	4611      	mov	r1, r2
 8008af0:	602b      	str	r3, [r5, #0]
 8008af2:	f7f9 fc5e 	bl	80023b2 <_fstat>
 8008af6:	1c43      	adds	r3, r0, #1
 8008af8:	d102      	bne.n	8008b00 <_fstat_r+0x1c>
 8008afa:	682b      	ldr	r3, [r5, #0]
 8008afc:	b103      	cbz	r3, 8008b00 <_fstat_r+0x1c>
 8008afe:	6023      	str	r3, [r4, #0]
 8008b00:	bd38      	pop	{r3, r4, r5, pc}
 8008b02:	bf00      	nop
 8008b04:	20000878 	.word	0x20000878

08008b08 <_isatty_r>:
 8008b08:	b538      	push	{r3, r4, r5, lr}
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	4d05      	ldr	r5, [pc, #20]	; (8008b24 <_isatty_r+0x1c>)
 8008b0e:	4604      	mov	r4, r0
 8008b10:	4608      	mov	r0, r1
 8008b12:	602b      	str	r3, [r5, #0]
 8008b14:	f7f9 fc5c 	bl	80023d0 <_isatty>
 8008b18:	1c43      	adds	r3, r0, #1
 8008b1a:	d102      	bne.n	8008b22 <_isatty_r+0x1a>
 8008b1c:	682b      	ldr	r3, [r5, #0]
 8008b1e:	b103      	cbz	r3, 8008b22 <_isatty_r+0x1a>
 8008b20:	6023      	str	r3, [r4, #0]
 8008b22:	bd38      	pop	{r3, r4, r5, pc}
 8008b24:	20000878 	.word	0x20000878

08008b28 <_init>:
 8008b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b2a:	bf00      	nop
 8008b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b2e:	bc08      	pop	{r3}
 8008b30:	469e      	mov	lr, r3
 8008b32:	4770      	bx	lr

08008b34 <_fini>:
 8008b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b36:	bf00      	nop
 8008b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008b3a:	bc08      	pop	{r3}
 8008b3c:	469e      	mov	lr, r3
 8008b3e:	4770      	bx	lr
